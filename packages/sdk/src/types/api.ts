/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/admin/get-marketplaces": {
    get: operations["getAdminGetmarketplaces"];
  };
  "/admin/open-api": {
    get: operations["getAdminOpenapi"];
  };
  "/admin/rate-limit-rules": {
    get: operations["getAdminRatelimitrules"];
  };
  "/assets/v1": {
    get: operations["getAssetsV1"];
  };
  "/attributes/v1": {
    get: operations["getAttributesV1"];
  };
  "/collection/v1": {
    /** Get detailed information about a single collection, including real-time stats. */
    get: operations["getCollectionV1"];
  };
  "/collection/v2": {
    /** Get detailed information about a single collection, including real-time stats. */
    get: operations["getCollectionV2"];
  };
  "/collection/v3": {
    /** Get detailed information about a single collection, including real-time stats. */
    get: operations["getCollectionV3"];
  };
  "/collections/v1": {
    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
    get: operations["getCollectionsV1"];
  };
  "/collections/v2": {
    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
    get: operations["getCollectionsV2"];
  };
  "/collections/v3": {
    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
    get: operations["getCollectionsV3"];
  };
  "/collections/v4": {
    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
    get: operations["getCollectionsV4"];
  };
  "/collections/v5": {
    /** Use this API to explore a collectionâ€™s metadata and statistics (sales, volume, etc). */
    get: operations["getCollectionsV5"];
  };
  "/collections/v6": {
    /** Use this API to explore a collection's metadata and statistics (sales, volume, etc). */
    get: operations["getCollectionsV6"];
  };
  "/collections/v7": {
    /** Use this API to explore a collection's metadata and statistics (sales, volume, etc). */
    get: operations["getCollectionsV7"];
  };
  "/cross-posting-orders/v1": {
    /**
     * This API can be used to check the status of cross posted listings and bids.
     *
     *  Input your `crossPostingOrderId` into the `ids` param and submit for the status.
     *
     *  The `crossPostingOrderId` is returned in the `execute/bids` and `execute/asks` response as well as the `onProgess` callback for the SDK.
     *
     *  Note: ReservoirKit does not return a `crossPostingOrderId`.
     */
    get: operations["getCrosspostingordersV1"];
  };
  "/orders/v1": {
    /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */
    get: operations["getOrdersV1"];
    post: operations["postOrdersV1"];
  };
  "/orders/v2": {
    /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */
    get: operations["getOrdersV2"];
  };
  "/owners/v1": {
    /** Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute. */
    get: operations["getOwnersV1"];
  };
  "/owners/v2": {
    /** Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute. */
    get: operations["getOwnersV2"];
  };
  "/sales/v1": {
    /** Get recent sales for a contract or token. */
    get: operations["getSalesV1"];
  };
  "/sales/v2": {
    /** Get recent sales for a contract or token. */
    get: operations["getSalesV2"];
  };
  "/sales/v3": {
    /** Get recent sales for a contract or token. Note: this API is returns rich metadata, and has advanced filters, so is only designed for small amounts of recent sales. If you want access to sales in bulk, use the `Aggregator > Bulk Sales` API. */
    get: operations["getSalesV3"];
  };
  "/sales/v4": {
    /** Get recent sales for a contract or token. */
    get: operations["getSalesV4"];
  };
  "/sales/v5": {
    /** Get recent sales for a contract or token. Paid mints are returned in this `sales` endpoint, free mints can be found in the `/activities/` endpoints. Array of contracts max limit is 20. */
    get: operations["getSalesV5"];
  };
  "/sales/v6": {
    /** Get recent sales for a contract or token. Paid mints are returned in this `sales` endpoint, free mints can be found in the `/activities/` endpoints. Array of contracts max limit is 20. */
    get: operations["getSalesV6"];
  };
  "/sources/v1": {
    /** This API returns a list of sources */
    get: operations["getSourcesV1"];
  };
  "/stats/v1": {
    /** Get aggregate stats for a particular set (collection, attribute or single token) */
    get: operations["getStatsV1"];
  };
  "/stats/v2": {
    /** Get aggregate stats for a particular set (collection, attribute or single token) */
    get: operations["getStatsV2"];
  };
  "/tokens/v1": {
    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */
    get: operations["getTokensV1"];
  };
  "/tokens/v2": {
    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */
    get: operations["getTokensV2"];
  };
  "/tokens/v3": {
    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */
    get: operations["getTokensV3"];
  };
  "/tokens/v4": {
    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the tokens/details API */
    get: operations["getTokensV4"];
  };
  "/tokens/v5": {
    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */
    get: operations["getTokensV5"];
  };
  "/tokens/v6": {
    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */
    get: operations["getTokensV6"];
  };
  "/tokens/v7": {
    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */
    get: operations["getTokensV7"];
  };
  "/transfers/v2": {
    /** Get recent transfers for a contract or token. */
    get: operations["getTransfersV2"];
  };
  "/transfers/v3": {
    /** Get recent transfers for a contract or token. */
    get: operations["getTransfersV3"];
  };
  "/transfers/v4": {
    /** Get recent transfers for a contract or token. */
    get: operations["getTransfersV4"];
  };
  "/admin/get-api-key/{key}": {
    get: operations["getAdminGetapikeyKey"];
  };
  "/admin/provider-metadata/{type}": {
    get: operations["getAdminProvidermetadataType"];
  };
  "/api-keys/{key}/rate-limits": {
    /** Get the rate limits for the given API key. Note: API keys are not universal across all available chains; please make a different key for every chain. */
    get: operations["getApikeysKeyRatelimits"];
  };
  "/chain/stats/v1": {
    /** Get chain mint and sales stats for 1 and 7 days */
    get: operations["getChainStatsV1"];
  };
  "/collections/activity/v4": {
    /** This API can be used to build a feed for a collection */
    get: operations["getCollectionsActivityV4"];
  };
  "/collections/activity/v5": {
    /** This API can be used to build a feed for a collection */
    get: operations["getCollectionsActivityV5"];
  };
  "/collections/activity/v6": {
    /** This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
    get: operations["getCollectionsActivityV6"];
  };
  "/collections/daily-volumes/v1": {
    /** Get date, volume, rank and sales count for each collection */
    get: operations["getCollectionsDailyvolumesV1"];
  };
  "/collections/top-selling/v1": {
    /** Get top selling and minting collections */
    get: operations["getCollectionsTopsellingV1"];
  };
  "/collections/top-selling/v2": {
    /** Get top selling and minting collections */
    get: operations["getCollectionsTopsellingV2"];
  };
  "/collections/trending/v1": {
    /** Get top selling and minting collections */
    get: operations["getCollectionsTrendingV1"];
  };
  "/collections/trending-mints/v1": {
    /** Get top trending mints */
    get: operations["getCollectionsTrendingmintsV1"];
  };
  "/collections/{collectionOrSlug}/v1": {
    /** Get detailed information about a single collection, including real-time stats. */
    get: operations["getCollectionsCollectionorslugV1"];
  };
  "/currencies/conversion/v1": {
    /** Convert an amount in one currency to another */
    get: operations["getCurrenciesConversionV1"];
  };
  "/events/asks/v2": {
    /** Get updates any time an asks status changes */
    get: operations["getEventsAsksV2"];
  };
  "/events/asks/v3": {
    /**
     * Every time an ask status changes, an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new listing at a lower price
     *
     * - `expiry` > the previous best listing expired
     *
     * - `sale` > the previous best listing was filled
     *
     * - `cancel` > the previous best listing was canceled
     *
     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
     *
     * - `approval-change` > the best listing was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Note: Private listings (asks) will not appear in the results.
     */
    get: operations["getEventsAsksV3"];
  };
  "/events/bids/v1": {
    /** Get updates any time a bid status changes */
    get: operations["getEventsBidsV1"];
  };
  "/events/bids/v2": {
    /** Get updates any time a bid status changes */
    get: operations["getEventsBidsV2"];
  };
  "/events/bids/v3": {
    /**
     * Every time a bid status changes, an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new offer at a lower price
     *
     * - `expiry` > the previous best offer expired
     *
     * - `sale` > the previous best offer was filled
     *
     * - `cancel` > the previous best offer was canceled
     *
     * - `balance-change` > the best offer was invalidated due to no longer owning the NFT
     *
     * - `approval-change` > the best offer was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Some considerations to keep in mind
     *
     * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
     *
     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
     */
    get: operations["getEventsBidsV3"];
  };
  "/events/orders/v1": {
    /** Get updates any time an order status changes */
    get: operations["getEventsOrdersV1"];
  };
  "/execute/cancel/v2": {
    /** Cancel an existing order on any marketplace */
    get: operations["getExecuteCancelV2"];
  };
  "/liquidity/users/v1": {
    /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */
    get: operations["getLiquidityUsersV1"];
  };
  "/liquidity/users/v2": {
    /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */
    get: operations["getLiquidityUsersV2"];
  };
  "/orders/all/v1": {
    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersAllV1"];
  };
  "/orders/all/v2": {
    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersAllV2"];
  };
  "/orders/asks/v1": {
    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersAsksV1"];
  };
  "/orders/asks/v2": {
    /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersAsksV2"];
  };
  "/orders/asks/v3": {
    /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersAsksV3"];
  };
  "/orders/asks/v4": {
    /**
     * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
     *
     *  Please mark `excludeEOA` as `true` to exclude Blur orders.
     */
    get: operations["getOrdersAsksV4"];
  };
  "/orders/asks/v5": {
    /**
     * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
     *
     *  To get all orders unflitered, select `sortBy` to `updatedAt`. No need to pass any other param. This will return any orders for any collections, token, attribute, etc.
     *
     *  Please mark `excludeEOA` as `true` to exclude Blur orders.
     */
    get: operations["getOrdersAsksV5"];
  };
  "/orders/bids/v1": {
    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersBidsV1"];
  };
  "/orders/bids/v2": {
    /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersBidsV2"];
  };
  "/orders/bids/v3": {
    /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersBidsV3"];
  };
  "/orders/bids/v4": {
    /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
    get: operations["getOrdersBidsV4"];
  };
  "/orders/bids/v5": {
    /**
     * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
     *
     *  There are a different kind of bids than can be returned:
     *
     * - Inputting a 'contract' will return token and attribute bids.
     *
     * - Inputting a 'collection-id' will return collection wide bids./n/n Please mark `excludeEOA` as `true` to exclude Blur orders.
     */
    get: operations["getOrdersBidsV5"];
  };
  "/orders/bids/v6": {
    /**
     * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
     *
     *  There are a different kind of bids than can be returned:
     *
     * - To get all orders unfiltered, select `sortBy` to `updatedAt`. No need to pass any other param. This will return any orders for any collections, token, attribute, etc.
     *
     * - Inputting a 'contract' will return token and attribute bids.
     *
     * - Inputting a 'collection-id' will return collection wide bids.
     *
     * - Please mark `excludeEOA` as `true` to exclude Blur orders.
     */
    get: operations["getOrdersBidsV6"];
  };
  "/orders/depth/v1": {
    /** Get the depth of a token or collection. */
    get: operations["getOrdersDepthV1"];
  };
  "/orders/executed/v1": {
    get: operations["getOrdersExecutedV1"];
  };
  "/owners/common-collections/v1": {
    /** This API can be used to find top common collections from an array of owners. */
    get: operations["getOwnersCommoncollectionsV1"];
  };
  "/owners/cross-collections/v1": {
    /** Find which addresses own the most of a group of collections. */
    get: operations["getOwnersCrosscollectionsV1"];
  };
  "/redirect/logo/v1": {
    get: operations["getRedirectLogoV1"];
  };
  "/redirect/token/v1": {
    get: operations["getRedirectTokenV1"];
  };
  "/sales/bulk/v1": {
    /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Sales` endpoint */
    get: operations["getSalesBulkV1"];
  };
  "/search/activities/v1": {
    /** This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
    get: operations["getSearchActivitiesV1"];
  };
  "/search/collections/v1": {
    get: operations["getSearchCollectionsV1"];
  };
  "/search/collections/v2": {
    get: operations["getSearchCollectionsV2"];
  };
  "/sync/asks/v1": {
    /** This API is optimized for bulk access to asks (listings) for syncing a remote database. Thus it offers minimal filters/metadata. */
    get: operations["getSyncAsksV1"];
  };
  "/tokens/bootstrap/v1": {
    /** Get the latest price event per token in a collection, so that you can listen to future events and keep track of prices */
    get: operations["getTokensBootstrapV1"];
  };
  "/tokens/details/v2": {
    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */
    get: operations["getTokensDetailsV2"];
  };
  "/tokens/details/v3": {
    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */
    get: operations["getTokensDetailsV3"];
  };
  "/tokens/details/v4": {
    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */
    get: operations["getTokensDetailsV4"];
  };
  "/tokens/floor/v1": {
    /** This API will return the best price of every token in a collection that is currently on sale. Note: Prices are returned in the native currency of the network. */
    get: operations["getTokensFloorV1"];
  };
  "/tokens/ids/v1": {
    /** This API is optimized for quickly fetching a list of tokens ids in by collection, contract, token set id. */
    get: operations["getTokensIdsV1"];
  };
  "/transfers/bulk/v1": {
    /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint */
    get: operations["getTransfersBulkV1"];
  };
  "/transfers/bulk/v2": {
    /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint */
    get: operations["getTransfersBulkV2"];
  };
  "/users/activity/v2": {
    /** This API can be used to build a feed for a user */
    get: operations["getUsersActivityV2"];
  };
  "/users/activity/v3": {
    /** This API can be used to build a feed for a user */
    get: operations["getUsersActivityV3"];
  };
  "/users/activity/v4": {
    /** This API can be used to build a feed for a user */
    get: operations["getUsersActivityV4"];
  };
  "/users/activity/v5": {
    /** This API can be used to build a feed for a user */
    get: operations["getUsersActivityV5"];
  };
  "/users/activity/v6": {
    /** This API can be used to build a feed for a user including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
    get: operations["getUsersActivityV6"];
  };
  "/collections/{collection}/supported-marketplaces/v1": {
    /** The ReservoirKit `ListModal` client utilizes this API to identify the marketplace(s) it can list on. */
    get: operations["getCollectionsCollectionSupportedmarketplacesV1"];
  };
  "/collections/{collection}/top-bids/v1": {
    /** When users are placing collection or trait bids, this API can be used to show them where the bid is in the context of other bids, and how many tokens it will be the top bid for. */
    get: operations["getCollectionsCollectionTopbidsV1"];
  };
  "/collections/{collection}/attributes/v1": {
    get: operations["getCollectionsCollectionAttributesV1"];
  };
  "/collections/{collection}/activity/v2": {
    /** This API can be used to build a feed for a collection */
    get: operations["getCollectionsCollectionActivityV2"];
  };
  "/collections/{collection}/activity/v1": {
    /** This API can be used to build a feed for a collection */
    get: operations["getCollectionsCollectionActivityV1"];
  };
  "/collections/{collection}/activity/v3": {
    /** This API can be used to build a feed for a collection */
    get: operations["getCollectionsCollectionActivityV3"];
  };
  "/collections/{collection}/owners-distribution/v1": {
    /** This API can be used to show what the distribution of owners in a collection looks like. */
    get: operations["getCollectionsCollectionOwnersdistributionV1"];
  };
  "/collections/{collection}/marketplace-configurations/v1": {
    /** This API returns recommended marketplace configurations given a collection id */
    get: operations["getCollectionsCollectionMarketplaceconfigurationsV1"];
  };
  "/collections-sets/{collectionsSetId}/owners-distribution/v1": {
    /** This API can be used to show what the distribution of owners in a collections set id looks like. */
    get: operations["getCollectionssetsCollectionssetidOwnersdistributionV1"];
  };
  "/events/collections/floor-ask/v1": {
    /**
     * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new listing at a lower price
     *
     * - `expiry` > the previous best listing expired
     *
     * - `sale` > the previous best listing was filled
     *
     * - `cancel` > the previous best listing was cancelled
     *
     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
     *
     * - `approval-change` > the best listing was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Some considerations to keep in mind
     *
     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
     *
     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
     */
    get: operations["getEventsCollectionsFlooraskV1"];
  };
  "/events/collections/floor-ask/v2": {
    /**
     * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new listing at a lower price
     *
     * - `expiry` > the previous best listing expired
     *
     * - `sale` > the previous best listing was filled
     *
     * - `cancel` > the previous best listing was cancelled
     *
     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
     *
     * - `approval-change` > the best listing was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Some considerations to keep in mind
     *
     * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
     *
     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
     *
     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
     */
    get: operations["getEventsCollectionsFlooraskV2"];
  };
  "/events/collections/top-bid/v1": {
    /** Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency. */
    get: operations["getEventsCollectionsTopbidV1"];
  };
  "/events/collections/top-bid/v2": {
    /**
     * Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new bid at a higher price
     *
     * - `expiry` > the previous top bid expired
     *
     * - `sale` > the previous top bid was accepted
     *
     * - `cancel` > the previous top bid was cancelled
     *
     * - `balance-change` > the top bid was invalidated due NFT no longer available
     *
     * - `approval-change` > the top bid was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Some considerations to keep in mind
     *
     * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
     *
     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
     *
     * - Events are only generated if the top bid changes. So if a new order or sale happens without changing the top bid, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
     */
    get: operations["getEventsCollectionsTopbidV2"];
  };
  "/events/tokens/floor-ask/v2": {
    /**
     * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new listing at a lower price
     *
     * - `expiry` > the previous best listing expired
     *
     * - `sale` > the previous best listing was filled
     *
     * - `cancel` > the previous best listing was cancelled
     *
     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
     *
     * - `approval-change` > the best listing was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Some considerations to keep in mind
     *
     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
     *
     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
     */
    get: operations["getEventsTokensFlooraskV2"];
  };
  "/events/tokens/floor-ask/v3": {
    /**
     * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new listing at a lower price
     *
     * - `expiry` > the previous best listing expired
     *
     * - `sale` > the previous best listing was filled
     *
     * - `cancel` > the previous best listing was cancelled
     *
     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
     *
     * - `approval-change` > the best listing was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Some considerations to keep in mind
     *
     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
     *
     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
     */
    get: operations["getEventsTokensFlooraskV3"];
  };
  "/events/tokens/floor-ask/v4": {
    /**
     * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
     *
     * There are multiple event types, which describe what caused the change in price:
     *
     * - `new-order` > new listing at a lower price
     *
     * - `expiry` > the previous best listing expired
     *
     * - `sale` > the previous best listing was filled
     *
     * - `cancel` > the previous best listing was cancelled
     *
     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
     *
     * - `approval-change` > the best listing was invalidated due to revoked approval
     *
     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
     *
     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
     *
     * - `bootstrap` > initial loading of data, so that all tokens have a price associated
     *
     * Some considerations to keep in mind
     *
     * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
     *
     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
     *
     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
     */
    get: operations["getEventsTokensFlooraskV4"];
  };
  "/oracle/collections/bid-ask-midpoint/v1": {
    /** Get a signed message of any collection's bid-ask midpoint (spot or twap). This is approximation of the colletion price. The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
    get: operations["getOracleCollectionsBidaskmidpointV1"];
  };
  "/oracle/collections/floor-ask/v4": {
    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */
    get: operations["getOracleCollectionsFlooraskV4"];
  };
  "/oracle/collections/floor-ask/v5": {
    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
    get: operations["getOracleCollectionsFlooraskV5"];
  };
  "/oracle/collections/floor-ask/v6": {
    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
    get: operations["getOracleCollectionsFlooraskV6"];
  };
  "/oracle/collections/top-bid/v2": {
    /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
    get: operations["getOracleCollectionsTopbidV2"];
  };
  "/oracle/collections/top-bid/v3": {
    /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
    get: operations["getOracleCollectionsTopbidV3"];
  };
  "/oracle/tokens/status/v2": {
    /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
    get: operations["getOracleTokensStatusV2"];
  };
  "/oracle/tokens/status/v3": {
    /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
    get: operations["getOracleTokensStatusV3"];
  };
  "/tokens/flag/changes/v1": {
    /** This API return the recent flagged/un-flagged tokens across all collections sorted by change time */
    get: operations["getTokensFlagChangesV1"];
  };
  "/tokens/{token}/activity/v4": {
    /** This API can be used to build a feed for a token */
    get: operations["getTokensTokenActivityV4"];
  };
  "/tokens/{token}/activity/v2": {
    /** This API can be used to build a feed for a token */
    get: operations["getTokensTokenActivityV2"];
  };
  "/tokens/{token}/activity/v1": {
    /** This API can be used to build a feed for a token */
    get: operations["getTokensTokenActivityV1"];
  };
  "/tokens/{token}/activity/v3": {
    /** This API can be used to build a feed for a token */
    get: operations["getTokensTokenActivityV3"];
  };
  "/tokens/{token}/activity/v5": {
    /** This API can be used to build a feed for a token activity including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
    get: operations["getTokensTokenActivityV5"];
  };
  "/transactions/{txHash}/synced/v1": {
    /** Get a boolean response on whether a particular transaction was synced or not. */
    get: operations["getTransactionsTxhashSyncedV1"];
  };
  "/users/{user}/tokens/v6": {
    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
    get: operations["getUsersUserTokensV6"];
  };
  "/users/{user}/tokens/v4": {
    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
    get: operations["getUsersUserTokensV4"];
  };
  "/users/{user}/tokens/v2": {
    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
    get: operations["getUsersUserTokensV2"];
  };
  "/users/{user}/collections/v2": {
    /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */
    get: operations["getUsersUserCollectionsV2"];
  };
  "/users/{user}/activity/v1": {
    /** This API can be used to build a feed for a user */
    get: operations["getUsersUserActivityV1"];
  };
  "/users/{user}/collections/v1": {
    /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */
    get: operations["getUsersUserCollectionsV1"];
  };
  "/users/{user}/collections/v3": {
    /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */
    get: operations["getUsersUserCollectionsV3"];
  };
  "/users/{user}/positions/v1": {
    /** Get aggregate user liquidity, grouped by collection. Useful for showing a summary of liquidity being provided (orders made). */
    get: operations["getUsersUserPositionsV1"];
  };
  "/users/{user}/tokens/v1": {
    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
    get: operations["getUsersUserTokensV1"];
  };
  "/users/{user}/tokens/v3": {
    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
    get: operations["getUsersUserTokensV3"];
  };
  "/users/{user}/tokens/v5": {
    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
    get: operations["getUsersUserTokensV5"];
  };
  "/users/{user}/tokens/v7": {
    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
    get: operations["getUsersUserTokensV7"];
  };
  "/collections/{collection}/attributes/explore/v4": {
    /** Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAsk` by default. */
    get: operations["getCollectionsCollectionAttributesExploreV4"];
  };
  "/collections/{collection}/attributes/explore/v2": {
    /** Get detailed aggregate about attributes in a collection, attribute floors */
    get: operations["getCollectionsCollectionAttributesExploreV2"];
  };
  "/collections/{collection}/attributes/all/v4": {
    /**
     * Use this API to see all possible attributes within a collection.
     *
     * - `floorAskPrice` for all attributes might not be returned on collections with more than 10k tokens.
     *
     * - Attributes are case sensitive.
     *
     * - Attributes will return a maximum of 500 values.
     */
    get: operations["getCollectionsCollectionAttributesAllV4"];
  };
  "/collections/{collection}/attributes/all/v2": {
    get: operations["getCollectionsCollectionAttributesAllV2"];
  };
  "/collections/{collection}/attributes/all/v1": {
    get: operations["getCollectionsCollectionAttributesAllV1"];
  };
  "/collections/{collection}/attributes/all/v3": {
    get: operations["getCollectionsCollectionAttributesAllV3"];
  };
  "/collections/{collection}/attributes/static/v1": {
    get: operations["getCollectionsCollectionAttributesStaticV1"];
  };
  "/collections/{collection}/attributes/explore/v1": {
    get: operations["getCollectionsCollectionAttributesExploreV1"];
  };
  "/collections/{collection}/attributes/explore/v3": {
    /** Get detailed aggregate about attributes in a collection, attribute floors */
    get: operations["getCollectionsCollectionAttributesExploreV3"];
  };
  "/collections/{collection}/attributes/explore/v5": {
    /**
     * Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAskPrices` by default.
     *
     * - `floorAskPrices` will not be returned on attributes with more than 10k tokens.
     */
    get: operations["getCollectionsCollectionAttributesExploreV5"];
  };
  "/orders/users/{user}/top-bids/v3": {
    /** Return the top bids for the given user tokens */
    get: operations["getOrdersUsersUserTopbidsV3"];
  };
  "/orders/users/{user}/top-bids/v1": {
    /** Return the top bids for the given user tokens */
    get: operations["getOrdersUsersUserTopbidsV1"];
  };
  "/orders/users/{user}/top-bids/v2": {
    /** Return the top bids for the given user tokens */
    get: operations["getOrdersUsersUserTopbidsV2"];
  };
  "/orders/users/{user}/top-bids/v4": {
    /** Return the top bids for the given user tokens. Please mark `excludeEOA` as `true` to exclude Blur orders. */
    get: operations["getOrdersUsersUserTopbidsV4"];
  };
  "/redirect/collections/{collection}/image/v1": {
    get: operations["getRedirectCollectionsCollectionImageV1"];
  };
  "/redirect/currency/{address}/icon/v1": {
    get: operations["getRedirectCurrencyAddressIconV1"];
  };
  "/redirect/sources/{source}/logo/v2": {
    get: operations["getRedirectSourcesSourceLogoV2"];
  };
  "/redirect/tokens/{token}/image/v1": {
    get: operations["getRedirectTokensTokenImageV1"];
  };
  "/redirect/sources/{source}/tokens/{token}/link/v2": {
    get: operations["getRedirectSourcesSourceTokensTokenLinkV2"];
  };
  "/collections/{collection}/community/v1": {
    /** This API requires an administrator API for execution. Explore and try the `/collections-sets/v1` or `/contracts-sets/v1` endpoints. Please contact technical support with more questions. */
    put: operations["putCollectionsCollectionCommunityV1"];
  };
  "/api-keys": {
    /**
     * The API key can be used in every route, by setting it as a request header **x-api-key**.
     *
     * <a href='https://docs.reservoir.tools/reference/getting-started'>Learn more</a> about API Keys and Rate Limiting
     */
    post: operations["postApikeys"];
  };
  "/admin/calc-rarity": {
    post: operations["postAdminCalcrarity"];
  };
  "/admin/create-rate-limit-rule": {
    post: operations["postAdminCreateratelimitrule"];
  };
  "/admin/delete-rate-limit-rule": {
    post: operations["postAdminDeleteratelimitrule"];
  };
  "/admin/fix-blocks": {
    post: operations["postAdminFixblocks"];
  };
  "/admin/fix-cache": {
    post: operations["postAdminFixcache"];
  };
  "/admin/fix-orders": {
    post: operations["postAdminFixorders"];
  };
  "/admin/fix-token-cache": {
    post: operations["postAdminFixtokencache"];
  };
  "/admin/index-metadata": {
    post: operations["postAdminIndexmetadata"];
  };
  "/admin/pause-rabbit-queue": {
    post: operations["postAdminPauserabbitqueue"];
  };
  "/admin/refresh-collection": {
    post: operations["postAdminRefreshcollection"];
  };
  "/admin/refresh-token": {
    post: operations["postAdminRefreshtoken"];
  };
  "/admin/resume-rabbit-queue": {
    post: operations["postAdminResumerabbitqueue"];
  };
  "/admin/resync-floor-events": {
    post: operations["postAdminResyncfloorevents"];
  };
  "/admin/resync-nft-balances": {
    post: operations["postAdminResyncnftbalances"];
  };
  "/admin/resync-sale-royalties": {
    post: operations["postAdminResyncsaleroyalties"];
  };
  "/admin/resync-source": {
    post: operations["postAdminResyncsource"];
  };
  "/admin/retry-rabbit-queue": {
    post: operations["postAdminRetryrabbitqueue"];
  };
  "/admin/revalidate-order": {
    post: operations["postAdminRevalidateorder"];
  };
  "/admin/routers": {
    post: operations["postAdminRouters"];
  };
  "/admin/set-community": {
    post: operations["postAdminSetcommunity"];
  };
  "/admin/sync-daily-volumes": {
    post: operations["postAdminSyncdailyvolumes"];
  };
  "/admin/sync-events": {
    post: operations["postAdminSyncevents"];
  };
  "/admin/trigger-job": {
    post: operations["postAdminTriggerjob"];
  };
  "/admin/trigger-rabbit-job": {
    post: operations["postAdminTriggerrabbitjob"];
  };
  "/admin/update-api-key": {
    post: operations["postAdminUpdateapikey"];
  };
  "/admin/update-image-version": {
    post: operations["postAdminUpdateimageversion"];
  };
  "/admin/update-rate-limit-rule": {
    post: operations["postAdminUpdateratelimitrule"];
  };
  "/admin/update-source": {
    post: operations["postAdminUpdatesource"];
  };
  "/collections-sets/v1": {
    /**
     * Array of collections to gather in a set. Adding or removing a collection will change the response. You may use this set when `collectionSetId` is an available param. An example is below.
     *
     * `"collections": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623", "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"`
     *
     * `"collectionsSetId": "8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65"`
     */
    post: operations["postCollectionssetsV1"];
  };
  "/contracts-sets/v1": {
    /** Array of contracts to gather in a set. Adding or removing a contract will change the response. You may use this set when contractSetId is an available param. */
    post: operations["postContractssetsV1"];
  };
  "/order/v2": {
    post: operations["postOrderV2"];
  };
  "/order/v3": {
    post: operations["postOrderV3"];
  };
  "/order/v4": {
    post: operations["postOrderV4"];
  };
  "/seaport/offers": {
    post: operations["postSeaportOffers"];
  };
  "/token-sets/v1": {
    post: operations["postTokensetsV1"];
  };
  "/token-sets/v2": {
    /**
     * Use this API to create a `tokenSetId` to call specific tokens from a collection. Adding or removing a tokenId will change the response. See an example below.
     *
     *  Input of `0xd774557b647330c91bf44cfeab205095f7e6c367:1` and `0xd774557b647330c91bf44cfeab205095f7e6c367:2`
     *
     *  Output of `list:0xd774557b647330c91bf44cfeab205095f7e6c367:0xb6fd98eeb7e08fc521f11511289afe4d8e873fd7a3fb76ab757fa47c23f596e9`
     *
     *  Notes:
     *
     * - Include `list:` when using this `tokenSetId` for it to work successfully.
     *
     * - You cannot adjust tokens within a `tokenSetId`. Please create a new set.
     *
     * - Use the `/tokens/ids` endpoint to get a list of tokens within a set.
     */
    post: operations["postTokensetsV2"];
  };
  "/admin/api-keys/metrics": {
    /** Get API usage metrics for the given API key */
    post: operations["postAdminApikeysMetrics"];
  };
  "/collections/disable-metadata/v1": {
    /** This API requires an allowed API key for execution. Please contact technical support with more questions. */
    post: operations["postCollectionsDisablemetadataV1"];
  };
  "/collections/refresh/v1": {
    post: operations["postCollectionsRefreshV1"];
  };
  "/collections/refresh/v2": {
    /**
     * Use this API to refresh a collection metadata. Only use this endpoint when you notice multiple tokens with incorrect metadata. Otherwise, refresh single token metadata. Collections with over 30,000 tokens require admin key override, so please contact technical support for assistance.
     *
     *  Collection metadata is automatically updated at 23:30 UTC daily for:
     *
     * - Top 500 Collection by 24hr Volume
     *
     * - Collections Minted 1 Day Ago
     *
     * - Collections Minted 7 Days Ago
     *
     *  Caution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.
     */
    post: operations["postCollectionsRefreshV2"];
  };
  "/collections/spam-status/v1": {
    /** This API can be used by allowed API keys to update the spam status of a collection. */
    post: operations["postCollectionsSpamstatusV1"];
  };
  "/execute/auth-signature/v1": {
    post: operations["postExecuteAuthsignatureV1"];
  };
  "/execute/bid/v4": {
    /** Generate a bid and submit it to multiple marketplaces */
    post: operations["postExecuteBidV4"];
  };
  "/execute/bid/v5": {
    /**
     * Generate bids and submit them to multiple marketplaces.
     *
     *  Notes:
     *
     * - Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.
     *
     * - We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.
     */
    post: operations["postExecuteBidV5"];
  };
  "/execute/buy/v5": {
    post: operations["postExecuteBuyV5"];
  };
  "/execute/buy/v6": {
    post: operations["postExecuteBuyV6"];
  };
  "/execute/buy/v7": {
    /** Use this API to fill listings. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders. */
    post: operations["postExecuteBuyV7"];
  };
  "/execute/cancel/v3": {
    /** Cancel existing orders on any marketplace */
    post: operations["postExecuteCancelV3"];
  };
  "/execute/cancel-signature/v1": {
    /** If your order was created using the Seaport Oracle to allow off chain & gasless cancellations, you can just use the Kit's cancel modals, SDK's `cancelOrder`, or `/execute/cancel/`. Those tools will automatically access this endpoint for an oracle cancellation without you directly calling this endpoint. */
    post: operations["postExecuteCancelsignatureV1"];
  };
  "/execute/list/v4": {
    /** Generate a listing and submit it to multiple marketplaces */
    post: operations["postExecuteListV4"];
  };
  "/execute/list/v5": {
    /**
     * Generate listings and submit them to multiple marketplaces.
     *
     *  Notes:
     *
     * - Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.
     *
     * - We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.
     */
    post: operations["postExecuteListV5"];
  };
  "/execute/mint/v1": {
    /** Use this API to mint tokens. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. */
    post: operations["postExecuteMintV1"];
  };
  "/execute/permit-signature/v1": {
    post: operations["postExecutePermitsignatureV1"];
  };
  "/execute/pre-signature/v1": {
    post: operations["postExecutePresignatureV1"];
  };
  "/execute/results/v1": {
    post: operations["postExecuteResultsV1"];
  };
  "/execute/sell/v6": {
    post: operations["postExecuteSellV6"];
  };
  "/execute/sell/v7": {
    /** Use this API to accept bids. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders. */
    post: operations["postExecuteSellV7"];
  };
  "/execute/solve/v1": {
    post: operations["postExecuteSolveV1"];
  };
  "/execute/status/v1": {
    post: operations["postExecuteStatusV1"];
  };
  "/execute/transfer/v1": {
    post: operations["postExecuteTransferV1"];
  };
  "/tokens/disable-metadata/v1": {
    /** This API requires an allowed API key for execution. Please contact technical support with more questions. */
    post: operations["postTokensDisablemetadataV1"];
  };
  "/tokens/flag/v1": {
    post: operations["postTokensFlagV1"];
  };
  "/tokens/refresh/v1": {
    /**
     * Token metadata is never automatically refreshed, but may be manually refreshed with this API.
     *
     * Caution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.
     */
    post: operations["postTokensRefreshV1"];
  };
  "/tokens/simulate-floor/v1": {
    post: operations["postTokensSimulatefloorV1"];
  };
  "/tokens/simulate-top-bid/v1": {
    post: operations["postTokensSimulatetopbidV1"];
  };
  "/tokens/spam-status/v1": {
    /** This API can be used by allowed API keys to update the spam status of a token. */
    post: operations["postTokensSpamstatusV1"];
  };
  "/collections/{collection}/override/v1": {
    /** Override collections metadata and royalties */
    post: operations["postCollectionsCollectionOverrideV1"];
  };
  "/execute/solve/capacity/v1": {
    post: operations["postExecuteSolveCapacityV1"];
  };
  "/management/orders/simulate/v1": {
    post: operations["postManagementOrdersSimulateV1"];
  };
}

export interface definitions {
  fee: {
    bps?: number;
    percent?: number;
  };
  Model1: {
    name?: string;
    imageUrl?: string;
    fee?: definitions["fee"];
    feeBps?: number;
    orderbook?: string;
    orderKind?: string;
    listingEnabled?: boolean;
  };
  marketplaces: definitions["Model1"][];
  getMarketplacesv1Resp: {
    marketplaces?: definitions["marketplaces"];
  };
  Model2: {
    value: string;
    count?: number;
  };
  values: definitions["Model2"][];
  Model3: {
    key: string;
    /** @enum {string} */
    kind: "string" | "number" | "date" | "range";
    values?: definitions["values"];
  };
  attributes: definitions["Model3"][];
  getAttributesV1Response: {
    attributes?: definitions["attributes"];
  };
  metadata: { [key: string]: unknown };
  sampleImages: string[];
  royalties: {
    recipient?: string;
    bps?: number;
  };
  lastBuy: {
    value?: number;
    timestamp?: number;
  };
  token: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
  };
  floorAsk: {
    id?: string;
    price?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    token?: definitions["token"];
  };
  topBid: {
    id?: string;
    value?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
  };
  rank: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
    allTime?: number;
  };
  volumeChange: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
  };
  collection: {
    id?: string;
    slug?: string;
    name?: string;
    metadata?: definitions["metadata"];
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    onSaleCount?: string;
    primaryContract?: string;
    tokenSetId?: string;
    royalties?: definitions["royalties"];
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    floorAsk?: definitions["floorAsk"];
    topBid?: definitions["topBid"];
    rank?: definitions["rank"];
    volume?: definitions["rank"];
    volumeChange?: definitions["volumeChange"];
    floorSale?: definitions["volumeChange"];
    floorSaleChange?: definitions["volumeChange"];
  };
  getCollectionV1Response: {
    collection?: definitions["collection"];
  };
  Model4: {
    key?: string;
    kind?: string;
    count?: number;
  };
  Model5: definitions["Model4"][];
  Model6: {
    id?: string;
    /** @description Open Sea slug */
    slug?: string;
    name?: string;
    metadata?: definitions["metadata"];
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    onSaleCount?: string;
    primaryContract?: string;
    tokenSetId?: string;
    royalties?: definitions["royalties"];
    lastBuy?: definitions["lastBuy"];
    floorAsk?: definitions["floorAsk"];
    topBid?: definitions["topBid"];
    rank?: definitions["rank"];
    volume?: definitions["rank"];
    volumeChange?: definitions["volumeChange"];
    floorSale?: definitions["volumeChange"];
    floorSaleChange?: definitions["volumeChange"];
    collectionBidSupported?: boolean;
    ownerCount?: number;
    attributes?: definitions["Model5"];
  };
  getCollectionV2Response: {
    collection?: definitions["Model6"];
  };
  Model7: {
    id?: string;
    sourceDomain?: string;
    price?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    token?: definitions["token"];
  };
  Model8: {
    id?: string;
    /** @description Open Sea slug */
    slug?: string;
    name?: string;
    metadata?: definitions["metadata"];
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    onSaleCount?: string;
    primaryContract?: string;
    tokenSetId?: string;
    royalties?: definitions["royalties"];
    lastBuy?: definitions["lastBuy"];
    floorAsk?: definitions["Model7"];
    topBid?: definitions["topBid"];
    rank?: definitions["rank"];
    volume?: definitions["rank"];
    volumeChange?: definitions["volumeChange"];
    floorSale?: definitions["volumeChange"];
    floorSaleChange?: definitions["volumeChange"];
    collectionBidSupported?: boolean;
    ownerCount?: number;
    attributes?: definitions["Model5"];
  };
  getCollectionV3Response: {
    collection?: definitions["Model8"];
  };
  Model9: {
    id?: string;
    slug?: string;
    name?: string;
    metadata?: definitions["metadata"];
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    tokenSetId?: string;
    royalties?: definitions["royalties"];
    floorAskPrice?: number;
    topBidValue?: number;
    topBidMaker?: string;
    rank?: definitions["rank"];
    volume?: definitions["rank"];
  };
  collections: definitions["Model9"][];
  getCollectionsV1Response: {
    collections?: definitions["collections"];
  };
  Model10: {
    id?: string;
    slug?: string;
    name?: string;
    image?: string;
    banner?: string;
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    tokenSetId?: string;
    primaryContract?: string;
    floorAskPrice?: number;
    topBidValue?: number;
    topBidMaker?: string;
    "1dayVolume"?: number;
    "7dayVolume"?: number;
    "30dayVolume"?: number;
    allTimeVolume?: number;
    allTimeRank?: number;
  };
  Model11: definitions["Model10"][];
  getCollectionsV2Response: {
    collections?: definitions["Model11"];
  };
  Model12: {
    id?: string;
    slug?: string;
    name?: string;
    image?: string;
    banner?: string;
    discordUrl?: string;
    externalUrl?: string;
    twitterUsername?: string;
    description?: string;
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    tokenSetId?: string;
    primaryContract?: string;
    floorAskPrice?: number;
    topBidValue?: number;
    topBidMaker?: string;
    rank?: definitions["rank"];
    volume?: definitions["rank"];
    volumeChange?: definitions["volumeChange"];
    floorSale?: definitions["volumeChange"];
  };
  Model13: definitions["Model12"][];
  getCollectionsV3Response: {
    collections?: definitions["Model13"];
  };
  Model14: {
    id?: string;
    slug?: string;
    name?: string;
    image?: string;
    banner?: string;
    discordUrl?: string;
    externalUrl?: string;
    twitterUsername?: string;
    description?: string;
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    tokenSetId?: string;
    primaryContract?: string;
    floorAskPrice?: number;
    topBidValue?: number;
    topBidMaker?: string;
    rank?: definitions["rank"];
    volume?: definitions["rank"];
    volumeChange?: definitions["volumeChange"];
    floorSale?: definitions["volumeChange"];
    floorSaleChange?: definitions["volumeChange"];
  };
  Model15: definitions["Model14"][];
  getCollectionsV4Response: {
    continuation?: string;
    collections?: definitions["Model15"];
  };
  Model16: {
    recipient?: string;
    bps?: number;
  };
  breakdown: definitions["Model16"][];
  Model17: {
    recipient?: string;
    breakdown?: definitions["breakdown"];
    bps?: number;
  };
  currency: {
    contract?: string;
    name?: string;
    symbol?: string;
    decimals?: number;
    chainId?: number;
  };
  /** @description Amount with fees & royalties included. */
  amount: {
    raw?: string;
    decimal?: number;
    usd?: number;
    native?: number;
  };
  /** @description Amount with fees & royalties removed. */
  netAmount: {
    raw?: string;
    decimal?: number;
    usd?: number;
    native?: number;
  };
  price: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  /** @description Lowest Ask Price. */
  Model18: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
  };
  Model19: {
    id?: string;
    sourceDomain?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    token?: definitions["Model18"];
  };
  /** @description Highest current offer */
  Model20: {
    id?: string;
    sourceDomain?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
  };
  /** @description Current rank based from overall volume */
  Model21: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
    allTime?: number;
  };
  /** @description Total volume in given time period. */
  volume: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
    allTime?: number;
  };
  /** @description Total volume change X-days vs previous X-days. (e.g. 7day [days 1-7] vs 7day prior [days 8-14]) */
  Model22: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
  };
  /** @description The floor sale from X-days ago. */
  floorSale: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
  };
  /** @description Floor sale change from X-days vs X-days ago. (e.g. 7day floor sale vs floor sale 14 days ago) */
  floorSaleChange: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
  };
  /** @description Number of sales of X-days period */
  salesCount: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
    allTime?: number;
  };
  Model23: {
    /** @description Case sensitive */
    key?: string;
    /** @description `string`, `number`, `date`, or `range` */
    kind?: string;
    count?: number;
  };
  Model24: definitions["Model23"][];
  Model25: {
    stage: string;
    tokenId?: string;
    kind: string;
    price?: definitions["price"];
    startTime?: number;
    endTime?: number;
    maxMintsPerWallet?: number;
  };
  mintStages: definitions["Model25"][];
  Model26: {
    /** @description Collection id */
    id?: string;
    /** @description Open Sea slug */
    slug?: string;
    /** @description Time when added to indexer */
    createdAt?: string;
    name?: string;
    image?: string;
    banner?: string;
    discordUrl?: string;
    externalUrl?: string;
    twitterUsername?: string;
    openseaVerificationStatus?: string;
    description?: string;
    sampleImages?: definitions["sampleImages"];
    /** @description Total tokens within the collection. */
    tokenCount?: string;
    /** @description Total tokens currently on sale. */
    onSaleCount?: string;
    primaryContract?: string;
    tokenSetId?: string;
    royalties?: definitions["Model17"];
    allRoyalties?: definitions["metadata"];
    lastBuy?: definitions["lastBuy"];
    floorAsk?: definitions["Model19"];
    topBid?: definitions["Model20"];
    rank?: definitions["Model21"];
    volume?: definitions["volume"];
    volumeChange?: definitions["Model22"];
    floorSale?: definitions["floorSale"];
    floorSaleChange?: definitions["floorSaleChange"];
    salesCount?: definitions["salesCount"];
    /** @description true or false */
    collectionBidSupported?: boolean;
    /** @description Unique number of owners. */
    ownerCount?: number;
    attributes?: definitions["Model24"];
    /** @description Returns `erc721`, `erc1155`, etc. */
    contractKind?: string;
    mintedTimestamp?: number;
    mintStages?: definitions["mintStages"];
  };
  Model27: definitions["Model26"][];
  getCollectionsV5Response: {
    continuation?: string;
    collections?: definitions["Model27"];
  };
  /** @description Total volume change X-days vs previous X-days. (e.g. 7day [days 1-7] vs 7day prior [days 8-14]). A value over 1 is a positive gain, under 1 is a negative loss. e.g. 1 means no change; 1.1 means 10% increase; 0.9 means 10% decrease. */
  Model28: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
  };
  /** @description Floor sale change from X-days vs X-days ago. (e.g. 7day floor sale vs floor sale 14 days ago). A value over 1 is a positive gain, under 1 is a negative loss. e.g. 1 means no change; 1.1 means 10% increase; 0.9 means 10% decrease. */
  Model29: {
    "1day"?: number;
    "7day"?: number;
    "30day"?: number;
  };
  Model30: {
    /** @description Collection id */
    id?: string;
    /** @description Open Sea slug */
    slug?: string;
    /** @description Time when added to indexer */
    createdAt?: string;
    name?: string;
    image?: string;
    banner?: string;
    discordUrl?: string;
    externalUrl?: string;
    twitterUsername?: string;
    openseaVerificationStatus?: string;
    description?: string;
    sampleImages?: definitions["sampleImages"];
    /** @description Total tokens within the collection. */
    tokenCount?: string;
    /** @description Total tokens currently on sale. */
    onSaleCount?: string;
    primaryContract?: string;
    tokenSetId?: string;
    creator?: string;
    royalties?: definitions["Model17"];
    allRoyalties?: definitions["metadata"];
    floorAsk?: definitions["Model19"];
    topBid?: definitions["Model20"];
    rank?: definitions["Model21"];
    volume?: definitions["volume"];
    volumeChange?: definitions["Model28"];
    floorSale?: definitions["floorSale"];
    floorSaleChange?: definitions["Model29"];
    salesCount?: definitions["salesCount"];
    /** @description true or false */
    collectionBidSupported?: boolean;
    /** @description Unique number of owners. */
    ownerCount?: number;
    attributes?: definitions["Model24"];
    /** @description Returns `erc721`, `erc1155`, etc. */
    contractKind?: string;
    mintedTimestamp?: number;
    mintStages?: definitions["mintStages"];
  };
  Model31: definitions["Model30"][];
  getCollectionsV6Response: {
    continuation?: string;
    collections?: definitions["Model31"];
  };
  operatorWhitelist: string[];
  securityConfig: {
    operatorWhitelist?: definitions["operatorWhitelist"];
    receiverAllowList?: definitions["operatorWhitelist"];
    transferSecurityLevel?: number;
    transferValidator?: string;
  };
  Model32: {
    chainId: number;
    /** @description Collection id */
    id?: string;
    /** @description Open Sea slug */
    slug?: string;
    /** @description Time when added to indexer */
    createdAt?: string;
    /** @description Time when updated in indexer */
    updatedAt?: string;
    name?: string;
    symbol?: string;
    /** @description Time when contract was deployed */
    contractDeployedAt?: string;
    image?: string;
    banner?: string;
    discordUrl?: string;
    externalUrl?: string;
    twitterUsername?: string;
    twitterUrl?: string;
    openseaVerificationStatus?: string;
    description?: string;
    /** @default false */
    metadataDisabled?: boolean;
    /** @default false */
    isSpam?: boolean;
    sampleImages?: definitions["sampleImages"];
    /** @description Total tokens within the collection. */
    tokenCount?: string;
    /** @description Total tokens currently on sale. */
    onSaleCount?: string;
    primaryContract?: string;
    tokenSetId?: string;
    creator?: string;
    royalties?: definitions["Model17"];
    allRoyalties?: definitions["metadata"];
    floorAsk?: definitions["Model19"];
    topBid?: definitions["Model20"];
    rank?: definitions["Model21"];
    volume?: definitions["volume"];
    volumeChange?: definitions["Model28"];
    floorSale?: definitions["floorSale"];
    floorSaleChange?: definitions["Model29"];
    salesCount?: definitions["salesCount"];
    /** @description true or false */
    collectionBidSupported?: boolean;
    /** @description Unique number of owners. */
    ownerCount?: number;
    attributes?: definitions["Model24"];
    /** @description Returns `erc721`, `erc1155`, etc. */
    contractKind?: string;
    mintedTimestamp?: number;
    mintStages?: definitions["mintStages"];
    securityConfig?: definitions["securityConfig"];
  };
  Model33: definitions["Model32"][];
  getCollectionsV7Response: {
    continuation?: string;
    collections?: definitions["Model33"];
  };
  Model34: {
    id: number;
    orderId: string;
    orderbook: string;
    /** @description Possible values: pending - Waiting to be submitted. posted - Successfully submitted to the marketplace. posted - Failed to be submitted to the marketplace (see statusReason for detail). */
    status: string;
    statusReason: string;
    /** @description Time when added to indexer */
    createdAt: string;
    /** @description Time when updated in indexer */
    updatedAt: string;
  };
  orders: definitions["Model34"][];
  getCrossPostingOrdersV1Response: {
    orders?: definitions["orders"];
    continuation?: string;
  };
  Model35: {
    kind?: string;
    recipient?: string;
    bps?: number;
  };
  feeBreakdown: definitions["Model35"][];
  Model36: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    fillabilityStatus: string;
    approvalStatus: string;
    tokenSetId: string;
    tokenSetSchemaHash: string;
    maker: string;
    taker: string;
    price: number;
    value: number;
    validFrom: number;
    validUntil: number;
    sourceId?: string;
    feeBps?: number;
    feeBreakdown?: definitions["feeBreakdown"];
    expiration: number;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model37: definitions["Model36"][];
  getOrdersV1Response: {
    orders?: definitions["Model37"];
  };
  Model38: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    fillabilityStatus: string;
    approvalStatus: string;
    tokenSetId: string;
    tokenSetSchemaHash: string;
    maker: string;
    taker: string;
    price: number;
    value: number;
    validFrom: number;
    validUntil: number;
    source?: string;
    feeBps?: number;
    feeBreakdown?: definitions["feeBreakdown"];
    expiration: number;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model39: definitions["Model38"][];
  getOrdersV2Response: {
    orders?: definitions["Model39"];
  };
  ownership: {
    tokenCount?: string;
    onSaleCount?: string;
    floorAskPrice?: number;
    topBidValue?: number;
    totalBidValue?: number;
  };
  Model40: {
    address?: string;
    ownership?: definitions["ownership"];
  };
  owners: definitions["Model40"][];
  getOwnersV1Response: {
    owners?: definitions["owners"];
  };
  /** @description Can return `null` if there is no Floor Ask */
  floorAskPrice: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  /** @description Can return `null` if there are no bids */
  topBidValue: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  Model41: {
    tokenCount?: string;
    onSaleCount?: string;
    floorAskPrice?: definitions["floorAskPrice"];
    topBidValue?: definitions["topBidValue"];
    totalBidValue?: definitions["topBidValue"];
  };
  Model42: {
    address?: string;
    ownership?: definitions["Model41"];
  };
  Model43: definitions["Model42"][];
  getOwnersV2Response: {
    owners?: definitions["Model43"];
  };
  Model44: {
    id?: string;
    name?: string;
  };
  Model45: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
    collection?: definitions["Model44"];
  };
  Model46: {
    token?: definitions["Model45"];
    maker?: string;
    taker?: string;
    amount?: string;
    txHash?: string;
    timestamp?: number;
    price?: number;
  };
  sales: definitions["Model46"][];
  getSalesV1Response: {
    sales?: definitions["sales"];
  };
  Model47: {
    token?: definitions["Model45"];
    /** @enum {string} */
    orderSide?: "ask" | "bid";
    from?: string;
    to?: string;
    amount?: string;
    txHash?: string;
    timestamp?: number;
    price?: number;
  };
  Model48: definitions["Model47"][];
  getSalesV2Response: {
    sales?: definitions["Model48"];
  };
  Model49: {
    id?: string;
    saleId?: string;
    token?: definitions["Model45"];
    orderSource?: string;
    orderSourceDomain?: string;
    /** @enum {string} */
    orderSide?: "ask" | "bid";
    orderKind?: string;
    from?: string;
    to?: string;
    amount?: string;
    fillSource?: string;
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    timestamp?: number;
    price?: number;
    currency?: string;
    currencyPrice?: number;
    usdPrice?: number;
    washTradingScore?: number;
  };
  Model50: definitions["Model49"][];
  getSalesV3Response: {
    sales?: definitions["Model50"];
    continuation?: string;
  };
  Model51: {
    kind?: string;
    bps?: number;
    recipient?: string;
    source?: string;
    rawAmount?: string;
  };
  /** @description `kind` can be `marketplace` or `royalty` */
  Model52: definitions["Model51"][];
  Model53: {
    /** @description Deprecated. Use `saleId` instead. */
    id?: string;
    /** @description Unique identifier made from txn hash, price, etc. */
    saleId?: string;
    token?: definitions["Model45"];
    orderSource?: string;
    /**
     * @description Can be `ask` or `bid`.
     * @enum {string}
     */
    orderSide?: "ask" | "bid";
    orderKind?: string;
    orderId?: string;
    from?: string;
    to?: string;
    amount?: string;
    fillSource?: string;
    block?: number;
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    /** @description Time added on the blockchain */
    timestamp?: number;
    price?: definitions["price"];
    washTradingScore?: number;
    royaltyFeeBps?: number;
    marketplaceFeeBps?: number;
    paidFullRoyalty?: boolean;
    feeBreakdown?: definitions["Model52"];
    isDeleted?: boolean;
    /** @description Time when added to indexer */
    createdAt?: string;
    /** @description Time when updated in indexer */
    updatedAt?: string;
  };
  Model54: definitions["Model53"][];
  getSalesV4Response: {
    sales?: definitions["Model54"];
    continuation?: string;
  };
  Model55: {
    id?: string;
    name?: string;
    description?: string;
    socialImage?: string;
    twitterUsername?: string;
    icon?: string;
    tokenUrl?: string;
    domain?: string;
  };
  sources: definitions["Model55"][];
  getSourcesV1Response: {
    sources?: definitions["sources"];
    continuation?: string;
  };
  Model56: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
  };
  Model57: {
    id?: string;
    price?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    token?: definitions["Model56"];
  };
  market: {
    floorAsk?: definitions["Model57"];
    topBid?: definitions["topBid"];
  };
  stats: {
    tokenCount: number;
    onSaleCount: number;
    sampleImages?: definitions["sampleImages"];
    market?: definitions["market"];
  };
  getStatsV1Response: {
    stats?: definitions["stats"];
  };
  /** @description Can be null if no active asks. */
  Model58: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
  };
  Model59: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    token?: definitions["Model58"];
  };
  /** @description Can be null is not active bids */
  Model60: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
  };
  Model61: {
    floorAsk?: definitions["Model59"];
    topBid?: definitions["Model60"];
  };
  Model62: {
    tokenCount: number;
    onSaleCount: number;
    flaggedTokenCount: number;
    sampleImages?: definitions["sampleImages"];
    market?: definitions["Model61"];
  };
  getStatsV2Response: {
    stats?: definitions["Model62"];
  };
  Model63: {
    contract: string;
    tokenId: string;
    name?: string;
    image?: string;
    collection?: definitions["Model44"];
    topBidValue?: number;
    floorAskPrice?: number;
  };
  tokens: definitions["Model63"][];
  getTokensV1Response: {
    tokens?: definitions["tokens"];
  };
  getTokensV2Response: {
    tokens?: definitions["tokens"];
    continuation?: string;
  };
  Model64: {
    id?: string;
    name?: string;
    image?: string;
    slug?: string;
  };
  Model65: {
    contract: string;
    tokenId: string;
    name?: string;
    image?: string;
    collection?: definitions["Model64"];
    topBidValue?: number;
    floorAskPrice?: number;
  };
  Model66: definitions["Model65"][];
  getTokensV3Response: {
    tokens?: definitions["Model66"];
    continuation?: string;
  };
  Model67: {
    contract: string;
    tokenId: string;
    name?: string;
    image?: string;
    media?: string;
    collection?: definitions["Model64"];
    source?: string;
    sourceDomain?: string;
    topBidValue?: number;
    floorAskPrice?: number;
    rarity?: number;
    rarityRank?: number;
    owner?: string;
    /** @default false */
    isFlagged?: boolean;
    lastFlagUpdate?: string;
  };
  Model68: definitions["Model67"][];
  getTokensV4Response: {
    tokens?: definitions["Model68"];
    continuation?: string;
  };
  Model69: {
    key?: string;
    kind?: string;
    value: string;
    tokenCount?: number;
    onSaleCount?: number;
    floorAskPrice?: number;
    topBidValue?: number;
    createdAt?: string;
  };
  Model70: definitions["Model69"][];
  Model71: {
    contract: string;
    tokenId: string;
    name?: string;
    description?: string;
    image?: string;
    media?: string;
    kind?: string;
    /** @default false */
    isFlagged?: boolean;
    lastFlagUpdate?: string;
    lastFlagChange?: string;
    rarity?: number;
    rarityRank?: number;
    collection?: definitions["Model64"];
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    owner?: string;
    attributes?: definitions["Model70"];
  };
  dynamicPricing: {
    /** @enum {string} */
    kind?: "dutch" | "pool";
    data?: definitions["metadata"];
  };
  source: {
    id?: string;
    domain?: string;
    name?: string;
    icon?: string;
    url?: string;
  };
  Model72: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    quantityFilled?: number;
    quantityRemaining?: number;
    dynamicPricing?: definitions["dynamicPricing"];
    source?: definitions["source"];
  };
  Model73: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    source?: definitions["source"];
    feeBreakdown?: definitions["feeBreakdown"];
  };
  Model74: {
    floorAsk?: definitions["Model72"];
    topBid?: definitions["Model73"];
    /** @default false */
    royaltiesPaid?: boolean;
  };
  Model75: {
    token?: definitions["Model71"];
    market?: definitions["Model74"];
  };
  Model76: definitions["Model75"][];
  getTokensV5Response: {
    tokens?: definitions["Model76"];
    continuation?: string;
  };
  Model77: {
    id?: string;
    name?: string;
    image?: string;
    slug?: string;
    symbol?: string;
    creator?: string;
    tokenCount?: number;
    /** @default false */
    metadataDisabled?: boolean;
  };
  Model78: {
    /** @description Case sensitive. */
    key?: string;
    /** @description Can be `string`, `number`, `date`, or `range`. */
    kind?: string;
    /** @description Case sensitive. */
    value: string;
    tokenCount?: number;
    onSaleCount?: number;
    floorAskPrice?: number;
    topBidValue?: number;
    createdAt?: string;
  };
  Model79: definitions["Model78"][];
  Model80: {
    chainId: number;
    contract: string;
    tokenId: string;
    name?: string;
    description?: string;
    image?: string;
    imageSmall?: string;
    imageLarge?: string;
    metadata?: definitions["metadata"];
    media?: string;
    /** @description Can be erc721, erc115, etc. */
    kind?: string;
    /** @default false */
    isFlagged?: boolean;
    /** @default false */
    isSpam?: boolean;
    /** @default false */
    metadataDisabled?: boolean;
    lastFlagUpdate?: string;
    lastFlagChange?: string;
    /** @description Can be higher than 1 if erc1155 */
    supply?: number;
    remainingSupply?: number;
    /** @description No rarity for collections over 100k */
    rarity?: number;
    /** @description No rarity rank for collections over 100k */
    rarityRank?: number;
    collection?: definitions["Model77"];
    lastSale?: definitions["Model53"];
    owner?: string;
    attributes?: definitions["Model79"];
    mintStages?: definitions["mintStages"];
  };
  /** @description Can be null if no active ask. */
  Model81: {
    /** @enum {string} */
    kind?: "dutch" | "pool";
    data?: definitions["metadata"];
  };
  Model82: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    quantityFilled?: number;
    quantityRemaining?: number;
    dynamicPricing?: definitions["Model81"];
    source?: definitions["source"];
  };
  Model83: {
    /** @description Can be `marketplace` or `royalty`. */
    kind?: string;
    recipient?: string;
    bps?: number;
  };
  /** @description Can be null if no active bids */
  Model84: definitions["Model83"][];
  Model85: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    source?: definitions["source"];
    feeBreakdown?: definitions["Model84"];
  };
  Model86: {
    floorAsk?: definitions["Model82"];
    topBid?: definitions["Model85"];
  };
  Model87: {
    token?: definitions["Model80"];
    market?: definitions["Model86"];
    updatedAt?: string;
  };
  Model88: definitions["Model87"][];
  getTokensV6Response: {
    tokens?: definitions["Model88"];
    continuation?: string;
  };
  Model89: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    quantityFilled?: number;
    quantityRemaining?: number;
    dynamicPricing?: definitions["Model81"];
    source?: definitions["source"];
  };
  Model90: {
    floorAsk?: definitions["Model89"];
    topBid?: definitions["Model85"];
  };
  Model91: {
    token?: definitions["Model80"];
    market?: definitions["Model90"];
    updatedAt?: string;
  };
  Model92: definitions["Model91"][];
  getTokensV7Response: {
    tokens?: definitions["Model92"];
    continuation?: string;
  };
  Model93: {
    token?: definitions["Model45"];
    from?: string;
    to?: string;
    amount?: string;
    txHash?: string;
    block?: number;
    logIndex?: number;
    batchIndex?: number;
    timestamp?: number;
    price?: number;
  };
  transfers: definitions["Model93"][];
  getTransfersV2Response: {
    transfers?: definitions["transfers"];
    continuation?: string;
  };
  Model94: {
    token?: definitions["Model45"];
    from?: string;
    to?: string;
    /** @description Can be higher than 1 if erc1155. */
    amount?: string;
    txHash?: string;
    block?: number;
    logIndex?: number;
    batchIndex?: number;
    timestamp?: number;
    isDeleted?: boolean;
    /** @description Time when last updated in indexer */
    updatedAt?: string;
    price?: definitions["price"];
  };
  Model95: definitions["Model94"][];
  getTransfersV3Response: {
    transfers?: definitions["Model95"];
    continuation?: string;
  };
  getApiKeyRateLimitsResponse: {
    key?: string;
    appName?: string;
    website?: string;
    email?: string;
    active?: boolean;
    tier?: number;
    ips?: definitions["sampleImages"];
    origins?: definitions["sampleImages"];
    permissions?: definitions["metadata"];
    createdAt?: string;
    revShareBps?: number;
  };
  payload: definitions["metadata"][];
  Model96: {
    route?: string;
    method?: string;
    allowedRequests?: number;
    perSeconds?: number;
    payload?: definitions["payload"];
  };
  rateLimits: definitions["Model96"][];
  Model97: {
    rateLimits?: definitions["rateLimits"];
  };
  "1day": {
    mintCount?: number;
    saleCount?: number;
    totalCount?: number;
    mintVolume?: number;
    saleVolume?: number;
    totalVolume?: number;
  };
  Model98: {
    "1day"?: definitions["1day"];
    "7day"?: definitions["1day"];
  };
  getChainStatsV5Response: {
    stats?: definitions["Model98"];
  };
  Model99: {
    tokenId?: string;
    tokenName?: string;
    tokenImage?: string;
  };
  Model100: {
    collectionId?: string;
    collectionName?: string;
    collectionImage?: string;
  };
  data: {
    collectionId?: string;
    collectionName?: string;
    tokenName?: string;
    image?: string;
  };
  Model101: {
    /** @enum {string} */
    kind?: "token";
    data?: definitions["data"];
  };
  order: {
    id?: string;
    /** @enum {string} */
    side?: "ask" | "bid";
    source?: definitions["source"];
    metadata?: definitions["Model101"];
  };
  Model102: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    createdAt?: string;
    contract?: string;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    order?: definitions["order"];
  };
  activities: definitions["Model102"][];
  getCollectionActivityV4Response: {
    continuation?: string;
    activities?: definitions["activities"];
  };
  Model103: {
    tokenId?: string;
    name?: string;
    image?: string;
    isSpam?: boolean;
  };
  Model104: {
    id?: string;
    name?: string;
    image?: string;
    isSpam?: boolean;
  };
  Model105: {
    token?: definitions["Model103"];
    collection?: definitions["Model104"];
  };
  Model106: {
    /** @enum {string} */
    kind?: "token";
    data?: definitions["Model105"];
  };
  Model107: {
    id?: string;
    /** @enum {string} */
    side?: "ask" | "bid";
    source?: definitions["source"];
    criteria?: definitions["Model106"];
  };
  Model108: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    createdAt?: string;
    contract?: string;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    order?: definitions["Model107"];
  };
  Model109: definitions["Model108"][];
  getCollectionActivityV5Response: {
    /** @default false */
    es?: boolean;
    continuation?: string;
    activities?: definitions["Model109"];
  };
  /** @description Return native currency unless displayCurrency contract was passed. */
  Model110: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  Model111: {
    tokenId?: string;
    tokenName?: string;
    tokenImage?: string;
    isSpam?: boolean;
  };
  Model112: {
    collectionId?: string;
    collectionName?: string;
    collectionImage?: string;
    isSpam?: boolean;
  };
  Model113: {
    id?: string;
    /** @enum {string} */
    side?: "ask" | "bid";
    source?: definitions["metadata"];
    criteria?: definitions["Model106"];
  };
  Model114: {
    /** @description Possible types returned: `ask`, `ask_cancel`, `bid`, `bid_cancel`, `sale`, `mint, and `transfer`. */
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: definitions["Model110"];
    amount?: number;
    /** @description Time when added on the blockchain. */
    timestamp?: number;
    /** @description Time when added in the indexer. */
    createdAt?: string;
    contract?: string;
    token?: definitions["Model111"];
    collection?: definitions["Model112"];
    /** @description Txn hash from the blockchain. */
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    fillSource?: definitions["source"];
    order?: definitions["Model113"];
  };
  Model115: definitions["Model114"][];
  getCollectionActivityV6Response: {
    continuation?: string;
    activities?: definitions["Model115"];
  };
  Model116: {
    id?: string;
    timestamp?: number;
    volume?: number;
    rank?: number;
    /** @description Native currency to chain. */
    floor_sell_value?: number;
    sales_count?: number;
  };
  Model117: definitions["Model116"][];
  getDailyVolumesV1Response: {
    collections?: definitions["Model117"];
  };
  Model118: {
    name?: string;
    image?: string;
    id?: string;
  };
  Model119: {
    contract?: string;
    type?: string;
    timestamp?: number;
    toAddress?: string;
    price?: definitions["price"];
    collection?: definitions["Model118"];
    token?: definitions["Model118"];
  };
  recentSales: definitions["Model119"][];
  Model120: {
    /** @description Collection id */
    id?: string;
    name?: string;
    image?: string;
    primaryContract?: string;
    count?: number;
    volume?: number;
    volumePercentChange?: number;
    countPercentChange?: number;
    recentSales?: definitions["recentSales"];
  };
  Model121: definitions["Model120"][];
  getTopSellingCollectionsV1Response: {
    collections?: definitions["Model121"];
  };
  Model122: {
    /** @description Collection id */
    id?: string;
    name?: string;
    image?: string;
    banner?: string;
    description?: string;
    primaryContract?: string;
    count?: number;
    volume?: number;
    volumePercentChange?: number;
    countPercentChange?: number;
    floorAsk?: definitions["Model19"];
    /** @description Total tokens within the collection. */
    tokenCount?: number;
    /** @description Unique number of owners. */
    ownerCount?: number;
    volumeChange?: definitions["Model28"];
    recentSales?: definitions["recentSales"];
  };
  Model123: definitions["Model122"][];
  getTopSellingCollectionsV2Response: {
    collections?: definitions["Model123"];
  };
  Model124: {
    /** @description Collection id */
    id?: string;
    name?: string;
    image?: string;
    banner?: string;
    /** @default false */
    isSpam?: boolean;
    description?: string;
    primaryContract?: string;
    contract?: string;
    count?: number;
    volume?: number;
    volumePercentChange?: number;
    countPercentChange?: number;
    creator?: string;
    onSaleCount?: number;
    floorAsk?: definitions["Model19"];
    /** @description Total tokens within the collection. */
    tokenCount?: number;
    /** @description Unique number of owners. */
    ownerCount?: number;
    collectionVolume?: definitions["volume"];
    volumeChange?: definitions["Model28"];
  };
  Model125: definitions["Model124"][];
  getTrendingCollectionsV1Response: {
    collections?: definitions["Model125"];
  };
  Model126: {
    stage?: string;
    tokenId?: string;
    kind: string;
    price?: definitions["price"];
    startTime?: number;
    endTime?: number;
    maxMintsPerWallet?: number;
  };
  Model127: definitions["Model126"][];
  Model128: {
    /** @description Collection id */
    id?: string;
    name?: string;
    image?: string;
    banner?: string;
    /** @default false */
    isSpam?: boolean;
    description?: string;
    primaryContract?: string;
    contract?: string;
    count?: number;
    volume?: number;
    volumePercentChange?: number;
    countPercentChange?: number;
    creator?: string;
    onSaleCount?: number;
    floorAsk?: definitions["Model19"];
    /** @description Total tokens within the collection. */
    tokenCount?: number;
    /** @description Unique number of owners. */
    ownerCount?: number;
    /** Format: date */
    createdAt?: string;
    /** Format: date */
    startDate?: string;
    /** Format: date */
    endDate?: string;
    maxSupply?: number;
    mintPrice?: number;
    mintVolume?: string;
    mintCount?: number;
    /** @enum {string} */
    mintType?: "free" | "paid";
    mintStatus?: string;
    mintStages?: definitions["Model127"];
    collectionVolume?: definitions["volume"];
    volumeChange?: definitions["Model28"];
  };
  mints: definitions["Model128"][];
  "get-trending-mintsV1Response": {
    mints?: definitions["mints"];
  };
  Model129: {
    id?: string;
    slug?: string;
    name?: string;
    metadata?: definitions["metadata"];
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    onSaleCount?: string;
    tokenSetId?: string;
    royalties?: definitions["royalties"];
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    floorAsk?: definitions["floorAsk"];
    topBid?: definitions["topBid"];
    rank?: definitions["rank"];
    volume?: definitions["rank"];
  };
  getCollectionDeprecatedV1Response: {
    collection?: definitions["Model129"];
  };
  getCurrencyConversionV1Response: {
    conversion?: string;
    usd?: string;
  };
  Model130: {
    id?: string;
    status?: string;
    contract?: string;
    tokenId?: string;
    maker?: string;
    price?: definitions["price"];
    quantityRemaining?: number;
    nonce?: string;
    validFrom?: number;
    validUntil?: number;
    source?: string;
    isDynamic?: boolean;
  };
  event: {
    id?: number;
    /** @enum {string} */
    kind?:
      | "new-order"
      | "expiry"
      | "sale"
      | "cancel"
      | "balance-change"
      | "approval-change"
      | "bootstrap"
      | "revalidation"
      | "reprice";
    txHash?: string;
    txTimestamp?: number;
    createdAt?: string;
  };
  Model131: {
    order?: definitions["Model130"];
    event?: definitions["event"];
  };
  events: definitions["Model131"][];
  getAsksEventsV2Response: {
    events?: definitions["events"];
    continuation?: string;
  };
  Model132: {
    /** @description Order Id */
    id?: string;
    status?: string;
    contract?: string;
    maker?: string;
    price?: definitions["price"];
    /** @description With ERC1155s, quantity can be higher than 1 */
    quantityRemaining?: number;
    nonce?: string;
    validFrom?: number;
    validUntil?: number;
    rawData?: definitions["metadata"];
    kind?: string;
    source?: string;
    isDynamic?: boolean;
    criteria?: definitions["Model106"];
  };
  Model133: {
    id?: number;
    /** @enum {string} */
    kind?:
      | "new-order"
      | "expiry"
      | "sale"
      | "cancel"
      | "balance-change"
      | "approval-change"
      | "bootstrap"
      | "revalidation"
      | "reprice";
    txHash?: string;
    /** @description Time when added on the blockchain. */
    txTimestamp?: number;
    /** @description Time when added to indexer */
    createdAt?: string;
  };
  Model134: {
    order?: definitions["Model132"];
    event?: definitions["Model133"];
  };
  Model135: definitions["Model134"][];
  getAsksEventsV3Response: {
    events?: definitions["Model135"];
    continuation?: string;
  };
  bid: {
    id?: string;
    status?: string;
    contract?: string;
    tokenSetId?: string;
    maker?: string;
    price?: number;
    value?: number;
    quantityRemaining?: number;
    nonce?: string;
    validFrom?: number;
    validUntil?: number;
    source?: string;
    criteria?: definitions["Model106"];
  };
  Model136: {
    bid?: definitions["bid"];
    event?: definitions["event"];
  };
  Model137: definitions["Model136"][];
  getBidEventsV1Response: {
    events?: definitions["Model137"];
    continuation?: string;
  };
  Model138: {
    id?: string;
    status?: string;
    contract?: string;
    tokenSetId?: string;
    maker?: string;
    price?: number;
    value?: number;
    quantityRemaining?: number;
    nonce?: string;
    validFrom?: number;
    validUntil?: number;
    kind?: string;
    source?: string;
    criteria?: definitions["Model106"];
  };
  Model139: {
    bid?: definitions["Model138"];
    event?: definitions["event"];
  };
  Model140: definitions["Model139"][];
  getBidEventsV2Response: {
    events?: definitions["Model140"];
    continuation?: string;
  };
  Model141: {
    /** @description Order Id */
    id?: string;
    /** @description Can return `active`,  inactive`, `expired`, `canceled`, or `filled`. */
    status?: string;
    contract?: string;
    maker?: string;
    price?: definitions["price"];
    /** @description With ERC1155s, quantity can be higher than 1 */
    quantityRemaining?: number;
    nonce?: string;
    validFrom?: number;
    validUntil?: number;
    rawData?: definitions["metadata"];
    kind?: string;
    source?: string;
    criteria?: definitions["Model106"];
  };
  Model142: {
    bid?: definitions["Model141"];
    event?: definitions["Model133"];
  };
  Model143: definitions["Model142"][];
  getBidEventsV3Response: {
    events?: definitions["Model143"];
    continuation?: string;
  };
  Model144: {
    id?: string;
    status?: string;
    contract?: string;
    tokenId?: string;
    maker?: string;
    price?: number;
    quantityRemaining?: number;
    nonce?: string;
    validFrom?: number;
    validUntil?: number;
    source?: string;
  };
  Model145: {
    order?: definitions["Model144"];
    event?: definitions["event"];
  };
  Model146: definitions["Model145"][];
  getOrderEventsV1Response: {
    events?: definitions["Model146"];
    continuation?: string;
  };
  Model147: {
    /** @enum {string} */
    status: "complete" | "incomplete";
    data?: definitions["metadata"];
    orderIndex?: number;
  };
  items: definitions["Model147"][];
  Model148: {
    id: string;
    action: string;
    description: string;
    /** @enum {string} */
    kind: "signature" | "transaction";
    items: definitions["items"];
  };
  steps: definitions["Model148"][];
  getExecuteCancelV2Response: {
    steps?: definitions["steps"];
  };
  Model149: {
    user?: string;
    rank: number;
    tokenCount: string;
    liquidity: number;
    maxTopBuyValue: number;
    wethBalance: number;
  };
  liquidity: definitions["Model149"][];
  getUsersLiquidityV1Response: {
    liquidity?: definitions["liquidity"];
  };
  Model150: {
    kind?: string;
    recipient?: string;
    bps?: string;
  };
  Model151: definitions["Model150"][];
  Model152: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price: number;
    value: number;
    validFrom: number;
    validUntil: number;
    source?: string;
    feeBps?: number;
    feeBreakdown?: definitions["Model151"];
    status?: string;
    expiration: number;
    createdAt: string;
    updatedAt: string;
    metadata?: definitions["metadata"];
    rawData?: definitions["metadata"];
  };
  Model153: definitions["Model152"][];
  getOrdersAllV1Response: {
    orders?: definitions["Model153"];
    continuation?: string;
  };
  Model154: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price?: definitions["price"];
    validFrom: number;
    validUntil: number;
    source?: string;
    feeBps?: number;
    feeBreakdown?: definitions["Model151"];
    status?: string;
    expiration: number;
    createdAt: string;
    updatedAt: string;
    metadata?: definitions["metadata"];
    rawData?: definitions["metadata"];
  };
  Model155: definitions["Model154"][];
  getOrdersAllV2Response: {
    orders?: definitions["Model155"];
    continuation?: string;
  };
  Model156: {
    collectionName?: string;
    tokenName?: string;
    image?: string;
  };
  Model157: {
    /** @enum {string} */
    kind?: "token";
    data?: definitions["Model156"];
  };
  Model158: {
    kind?: string;
    recipient?: string;
    bps?: number;
  };
  Model159: definitions["Model158"][];
  Model160: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price: number;
    value: number;
    validFrom: number;
    validUntil: number;
    metadata?: definitions["Model157"];
    status?: string;
    source?: definitions["source"];
    feeBps?: number;
    feeBreakdown?: definitions["Model159"];
    expiration: number;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model161: definitions["Model160"][];
  getOrdersAsksV1Response: {
    orders?: definitions["Model161"];
    continuation?: string;
  };
  Model162: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price?: definitions["price"];
    validFrom: number;
    validUntil: number;
    quantityFilled?: number;
    quantityRemaining?: number;
    metadata?: definitions["Model157"];
    status?: string;
    source?: definitions["source"];
    feeBps?: number;
    feeBreakdown?: definitions["Model159"];
    expiration: number;
    isReservoir?: boolean;
    isDynamic?: boolean;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model163: definitions["Model162"][];
  getOrdersAsksV3Response: {
    orders?: definitions["Model163"];
    continuation?: string;
  };
  Model164: {
    start?: definitions["price"];
    end?: definitions["price"];
  };
  time: {
    start?: number;
    end?: number;
  };
  Model165: {
    price?: definitions["Model164"];
    time?: definitions["time"];
  };
  Model166: {
    /** @enum {string} */
    kind?: "dutch";
    data?: definitions["Model165"];
  };
  Model167: {
    /** @description Can be marketplace or royalty */
    kind?: string;
    recipient?: string;
    bps?: number;
  };
  Model168: definitions["Model167"][];
  Model169: {
    price?: number;
    quantity?: number;
  };
  depth: definitions["Model169"][];
  Model170: {
    id: string;
    /** @description This is the `orderKind`. */
    kind: string;
    /**
     * @description Either `buy` or `sell`
     * @enum {string}
     */
    side: "buy" | "sell";
    /** @description Can be `active`, `inactive`, `expired`, `canceled`, or `filled` */
    status?: string;
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    contractKind?: string;
    maker: string;
    taker: string;
    price?: definitions["Model110"];
    validFrom: number;
    validUntil: number;
    /** @description With ERC1155s, quantity can be higher than 1 */
    quantityFilled?: number;
    /** @description With ERC1155s, quantity can be higher than 1 */
    quantityRemaining?: number;
    dynamicPricing?: definitions["Model166"];
    criteria?: definitions["Model106"];
    source?: definitions["metadata"];
    feeBps?: number;
    feeBreakdown?: definitions["Model168"];
    expiration: number;
    isReservoir?: boolean;
    isDynamic?: boolean;
    /** @description Time when added to indexer */
    createdAt: string;
    /** @description Time when updated in indexer */
    updatedAt: string;
    /** @description Time when created by maker */
    originatedAt?: string;
    rawData?: definitions["metadata"];
    isNativeOffChainCancellable?: boolean;
    depth?: definitions["depth"];
  };
  /** @description `taker` will have wallet address if private listing. */
  Model171: definitions["Model170"][];
  getOrdersAsksV4Response: {
    orders?: definitions["Model171"];
    continuation?: string;
  };
  Model172: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    status?: string;
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price: number;
    value: number;
    validFrom: number;
    validUntil: number;
    metadata?: definitions["Model157"];
    source?: definitions["metadata"];
    feeBps?: number;
    feeBreakdown?: definitions["Model159"];
    expiration: number;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model173: definitions["Model172"][];
  getOrdersBidsV1Response: {
    orders?: definitions["Model173"];
    continuation?: string;
  };
  Model174: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    status?: string;
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price?: definitions["price"];
    validFrom: number;
    validUntil: number;
    quantityFilled?: number;
    quantityRemaining?: number;
    metadata?: definitions["Model157"];
    source?: definitions["metadata"];
    feeBps?: number;
    feeBreakdown?: definitions["Model159"];
    expiration: number;
    isReservoir?: boolean;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model175: definitions["Model174"][];
  getOrdersBidsV3Response: {
    orders?: definitions["Model175"];
    continuation?: string;
  };
  Model176: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    status?: string;
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price?: definitions["price"];
    validFrom: number;
    validUntil: number;
    quantityFilled?: number;
    quantityRemaining?: number;
    metadata?: definitions["Model101"];
    source?: definitions["source"];
    feeBps?: number;
    feeBreakdown?: definitions["Model159"];
    expiration: number;
    isReservoir?: boolean;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model177: definitions["Model176"][];
  getOrdersBidsV4Response: {
    orders?: definitions["Model177"];
    continuation?: string;
  };
  Model178: definitions["Model170"][];
  getOrdersBidsV5Response: {
    orders?: definitions["Model178"];
    continuation?: string;
  };
  getOrdersDepthV1Response: {
    depth?: definitions["depth"];
  };
  Model179: {
    /** @description Contract address */
    address?: string;
    /** @description Token count */
    count?: number;
    owners?: definitions["sampleImages"];
  };
  Model180: definitions["Model179"][];
  getCommonCollectionsOwnersV1Response: {
    collections?: definitions["Model180"];
  };
  Model181: {
    /** @description Wallet Address */
    address?: string;
    /** @description Token Count */
    count?: number;
    collections?: definitions["sampleImages"];
  };
  Model182: definitions["Model181"][];
  getCrossCollectionsOwnersV1Response: {
    owners?: definitions["Model182"];
  };
  Model183: {
    contract?: string;
    tokenId?: string;
  };
  Model184: {
    id?: string;
    saleId?: string;
    token?: definitions["Model183"];
    orderSource?: string;
    orderSourceDomain?: string;
    /** @enum {string} */
    orderSide?: "ask" | "bid";
    orderKind?: string;
    from?: string;
    to?: string;
    amount?: string;
    fillSource?: string;
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    timestamp?: number;
    price?: number;
  };
  Model185: definitions["Model184"][];
  getSalesBulkV1Response: {
    sales?: definitions["Model185"];
    continuation?: string;
  };
  Model186: {
    id?: string;
    name?: string;
    image?: string;
    media?: string;
  };
  Model187: {
    id?: string;
    name?: string;
    image?: string;
  };
  Model188: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: definitions["price"];
    amount?: number;
    timestamp?: number;
    createdAt?: string;
    contract?: string;
    token?: definitions["Model186"];
    collection?: definitions["Model187"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    order?: definitions["Model113"];
  };
  Model189: definitions["Model188"][];
  getSearchActivitiesV1Response: {
    continuation?: string;
    activities?: definitions["Model189"];
  };
  Model190: {
    collectionId?: string;
    contract?: string;
    image?: string;
    name?: string;
    tokenCount?: string;
    allTimeVolume?: number;
    floorAskPrice?: number;
    openseaVerificationStatus?: string;
  };
  Model191: definitions["Model190"][];
  getSearchCollectionsV1Response: {
    collections?: definitions["Model191"];
  };
  /** @description Current floor ask price. */
  Model192: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  Model193: {
    collectionId?: string;
    contract?: string;
    image?: string;
    name?: string;
    /** @default false */
    isSpam?: boolean;
    slug?: string;
    allTimeVolume?: number;
    floorAskPrice?: definitions["Model192"];
    openseaVerificationStatus?: string;
  };
  Model194: definitions["Model193"][];
  getSearchCollectionsV2Response: {
    collections?: definitions["Model194"];
  };
  Model195: {
    amount?: string;
    recipient?: string;
    bps?: number;
  };
  missingRoyalties: definitions["Model195"][];
  Model196: {
    id: string;
    kind: string;
    /** @enum {string} */
    side: "buy" | "sell";
    tokenSetId: string;
    tokenSetSchemaHash: string;
    contract?: string;
    maker: string;
    taker: string;
    price?: definitions["price"];
    normalizedPrice?: definitions["price"];
    validFrom: number;
    validUntil: number;
    quantityFilled?: number;
    quantityRemaining?: number;
    status?: string;
    source?: definitions["source"];
    feeBps?: number;
    feeBreakdown?: definitions["Model159"];
    missingRoyalties?: definitions["missingRoyalties"];
    expiration: number;
    isReservoir?: boolean;
    isDynamic?: boolean;
    createdAt: string;
    updatedAt: string;
    rawData?: definitions["metadata"];
  };
  Model197: definitions["Model196"][];
  syncOrdersAsksV1Response: {
    orders?: definitions["Model197"];
    continuation?: string;
  };
  Model198: {
    contract?: string;
    tokenId?: string;
    image?: string;
    orderId?: string;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    /** @description Native currency of chain */
    price?: number;
    source?: string;
  };
  Model199: definitions["Model198"][];
  getTokensBootstrapV1Response: {
    tokens?: definitions["Model199"];
    continuation?: string;
  };
  Model200: {
    key?: string;
    value: string;
  };
  Model201: definitions["Model200"][];
  Model202: {
    contract: string;
    tokenId: string;
    name?: string;
    description?: string;
    image?: string;
    kind?: string;
    collection?: definitions["Model44"];
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    owner?: string;
    attributes?: definitions["Model201"];
  };
  Model203: {
    id?: string;
    price?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    source?: definitions["metadata"];
  };
  Model204: {
    floorAsk?: definitions["Model203"];
    topBid?: definitions["topBid"];
  };
  Model205: {
    token?: definitions["Model202"];
    market?: definitions["Model204"];
  };
  Model206: definitions["Model205"][];
  getTokensDetailsV2Response: {
    tokens?: definitions["Model206"];
    continuation?: string;
  };
  Model207: {
    contract: string;
    tokenId: string;
    name?: string;
    description?: string;
    image?: string;
    kind?: string;
    collection?: definitions["Model64"];
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    owner?: string;
    attributes?: definitions["Model201"];
  };
  Model208: {
    token?: definitions["Model207"];
    market?: definitions["Model204"];
  };
  Model209: definitions["Model208"][];
  getTokensDetailsV3Response: {
    tokens?: definitions["Model209"];
    continuation?: string;
  };
  Model210: {
    key?: string;
    value: string;
    tokenCount?: number;
    onSaleCount?: number;
    floorAskPrice?: number;
    topBidValue?: number;
  };
  Model211: definitions["Model210"][];
  Model212: {
    contract: string;
    tokenId: string;
    name?: string;
    description?: string;
    image?: string;
    media?: string;
    kind?: string;
    /** @default false */
    isFlagged?: boolean;
    lastFlagUpdate?: string;
    collection?: definitions["Model64"];
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    owner?: string;
    attributes?: definitions["Model211"];
  };
  Model213: {
    id?: string;
    price?: number;
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    source?: definitions["source"];
  };
  Model214: {
    floorAsk?: definitions["Model213"];
    topBid?: definitions["topBid"];
  };
  Model215: {
    token?: definitions["Model212"];
    market?: definitions["Model214"];
  };
  Model216: definitions["Model215"][];
  getTokensDetailsV4Response: {
    tokens?: definitions["Model216"];
    continuation?: string;
  };
  getTokensFloorV1Response: {
    tokens?: {
      string?: number;
    };
  };
  Model217: string[];
  getTokensIdsV1Response: {
    tokens?: definitions["Model217"];
    continuation?: string;
  };
  Model218: {
    id?: string;
    token?: definitions["Model183"];
    from?: string;
    to?: string;
    /** @description Can be more than 1 if erc1155. */
    amount?: string;
    block?: number;
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    timestamp?: number;
    isDeleted?: boolean;
    /** @description Time when updated in indexer */
    updatedAt?: string;
  };
  Model219: definitions["Model218"][];
  getTransfersBulkV1Response: {
    transfers?: definitions["Model219"];
    continuation?: string;
  };
  Model220: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    source?: definitions["source"];
  };
  Model221: definitions["Model220"][];
  getUserActivityV2Response: {
    continuation?: number;
    activities?: definitions["Model221"];
  };
  Model222: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    source?: definitions["source"];
    createdAt?: string;
  };
  Model223: definitions["Model222"][];
  getUserActivityV3Response: {
    continuation?: string;
    activities?: definitions["Model223"];
  };
  Model224: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    contract?: string;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    order?: definitions["order"];
    createdAt?: string;
  };
  Model225: definitions["Model224"][];
  getUserActivityV4Response: {
    continuation?: string;
    activities?: definitions["Model225"];
  };
  Model226: {
    tokenId?: string;
    tokenName?: string;
    tokenImage?: string;
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    tokenRarityScore?: number;
    tokenRarityRank?: number;
    tokenMedia?: string;
  };
  Model227: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    contract?: string;
    token?: definitions["Model226"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    order?: definitions["Model107"];
    createdAt?: string;
  };
  Model228: definitions["Model227"][];
  getUserActivityV5Response: {
    continuation?: string;
    activities?: definitions["Model228"];
  };
  Model229: {
    tokenId?: string;
    tokenName?: string;
    tokenImage?: string;
    /** @default false */
    isSpam?: boolean;
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    /** @description No rarity for collections over 100k */
    tokenRarityScore?: number;
    /** @description No rarity rank for collections over 100k */
    tokenRarityRank?: number;
    tokenMedia?: string;
  };
  Model230: {
    collectionId?: string;
    collectionName?: string;
    collectionImage?: string;
    /** @default false */
    isSpam?: boolean;
  };
  Model231: {
    /** @description Possible types returned: `ask`, `ask_cancel`, `bid`, `bid_cancel`, `sale`, `mint, and `transfer`. */
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: definitions["Model110"];
    amount?: number;
    /** @description Time when added on the blockchain. */
    timestamp?: number;
    contract?: string;
    token?: definitions["Model229"];
    collection?: definitions["Model230"];
    /** @description Txn hash from the blockchain. */
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    fillSource?: definitions["source"];
    order?: definitions["Model113"];
    createdAt?: string;
  };
  Model232: definitions["Model231"][];
  getUserActivityV6Response: {
    continuation?: string;
    activities?: definitions["Model232"];
  };
  /** @description Marketplace Fee */
  Model233: {
    bps?: number;
  };
  Model234: {
    minBps?: number;
    maxBps?: number;
  };
  /** @description erc20 contract addresses */
  supportedBidCurrencies: string[];
  Model235: {
    address?: string;
    decimals?: number;
    name?: string;
    symbol?: string;
  };
  paymentTokens: definitions["Model235"][];
  Model236: {
    name?: string;
    domain?: string;
    imageUrl?: string;
    fee?: definitions["Model233"];
    royalties?: definitions["Model234"];
    orderbook?: string;
    orderKind?: string;
    listingEnabled?: boolean;
    customFeesSupported?: boolean;
    minimumBidExpiry?: number;
    minimumPrecision?: string;
    collectionBidSupported?: boolean;
    traitBidSupported?: boolean;
    /** @description This indicates whether or not multi quantity bidding is supported */
    partialBidSupported?: boolean;
    supportedBidCurrencies?: definitions["supportedBidCurrencies"];
    paymentTokens?: definitions["paymentTokens"];
  };
  Model237: definitions["Model236"][];
  Model238: {
    marketplaces?: definitions["Model237"];
  };
  Model239: {
    value?: number;
    quantity?: number;
  };
  topBids: definitions["Model239"][];
  getCollectionTopBidsV1Response: {
    topBids?: definitions["topBids"];
  };
  Model240: {
    value: number;
    timestamp: number;
  };
  lastBuys: definitions["Model240"][];
  floorAskPrices: number[];
  Model241: {
    key: string;
    value: string;
    tokenCount: number;
    sampleImages?: definitions["sampleImages"];
    lastBuys?: definitions["lastBuys"];
    lastSells?: definitions["lastBuys"];
    floorAskPrices?: definitions["floorAskPrices"];
    topBid?: definitions["topBid"];
  };
  Model242: definitions["Model241"][];
  getCollectionAttributesV1Response: {
    attributes?: definitions["Model242"];
  };
  Model243: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    createdAt?: string;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    source?: definitions["source"];
  };
  Model244: definitions["Model243"][];
  getCollectionActivityV2Response: {
    continuation?: string;
    activities?: definitions["Model244"];
  };
  Model245: {
    id?: string;
    /** @enum {string} */
    side?: "ask" | "bid";
    source?: definitions["source"];
  };
  Model246: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    createdAt?: string;
    contract?: string;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    order?: definitions["Model245"];
  };
  Model247: definitions["Model246"][];
  getCollectionActivityV3Response: {
    continuation?: string;
    activities?: definitions["Model247"];
  };
  Model248: {
    tokenCount?: number;
    /** @description The amount of owners that have the same `tokenCount`. */
    ownerCount?: number;
  };
  ownersDistribution: definitions["Model248"][];
  getCollectionOwnersDistributionV1Response: {
    ownersDistribution?: definitions["ownersDistribution"];
  };
  string: {
    orderKind?: string;
    enabled?: boolean;
    customFeesSupported?: boolean;
    minimumBidExpiry?: number;
    minimumPrecision?: string;
    collectionBidSupported?: boolean;
    traitBidSupported?: boolean;
    /** @description This indicates whether or not multi quantity bidding is supported */
    partialOrderSupported?: boolean;
    supportedBidCurrencies?: definitions["supportedBidCurrencies"];
    paymentTokens?: definitions["paymentTokens"];
    maxPriceRaw?: string;
    minPriceRaw?: string;
  };
  Model249: {
    name?: string;
    domain?: string;
    imageUrl?: string;
    fee?: definitions["Model233"];
    royalties?: definitions["Model234"];
    orderbook?: string;
    exchanges?: {
      string?: definitions["string"];
    };
  };
  Model250: definitions["Model249"][];
  Model251: {
    marketplaces?: definitions["Model250"];
  };
  Model252: {
    tokenCount?: number;
    /** @description The amount of owners with the same `tokenCount`. */
    ownerCount?: number;
  };
  Model253: definitions["Model252"][];
  getCollectionsSetOwnersDistributionV1Response: {
    ownersDistribution?: definitions["Model253"];
  };
  Model254: {
    id?: string;
  };
  Model255: {
    orderId?: string;
    contract?: string;
    tokenId?: string;
    maker?: string;
    price?: number;
    validUntil?: number;
    source?: string;
  };
  Model256: {
    id?: number;
    /** @enum {string} */
    kind?:
      | "new-order"
      | "expiry"
      | "sale"
      | "cancel"
      | "balance-change"
      | "approval-change"
      | "bootstrap"
      | "revalidation"
      | "reprice";
    previousPrice?: number;
    txHash?: string;
    txTimestamp?: number;
    createdAt?: string;
  };
  Model257: {
    collection?: definitions["Model254"];
    floorAsk?: definitions["Model255"];
    event?: definitions["Model256"];
  };
  Model258: definitions["Model257"][];
  getCollectionsFloorAskV1Response: {
    events?: definitions["Model258"];
    continuation?: string;
  };
  Model259: {
    orderId?: string;
    contract?: string;
    tokenId?: string;
    maker?: string;
    price?: definitions["price"];
    validUntil?: number;
    source?: string;
  };
  Model260: {
    id?: number;
    /** @enum {string} */
    kind?:
      | "new-order"
      | "expiry"
      | "sale"
      | "cancel"
      | "balance-change"
      | "approval-change"
      | "bootstrap"
      | "revalidation"
      | "reprice";
    previousPrice?: number;
    txHash?: string;
    /** @description Time when added on the blockchain. */
    txTimestamp?: number;
    /** @description Time when added to indexer */
    createdAt?: string;
  };
  Model261: {
    collection?: definitions["Model254"];
    floorAsk?: definitions["Model259"];
    event?: definitions["Model260"];
  };
  Model262: definitions["Model261"][];
  getCollectionsFloorAskV2Response: {
    events?: definitions["Model262"];
    continuation?: string;
  };
  Model263: {
    orderId?: string;
    contract?: string;
    tokenSetId?: string;
    maker?: string;
    price?: number;
    validUntil?: number;
    source?: string;
  };
  Model264: {
    collection?: definitions["Model254"];
    topBid?: definitions["Model263"];
    event?: definitions["Model256"];
  };
  Model265: definitions["Model264"][];
  getCollectionsTopbidV1Response: {
    events?: definitions["Model265"];
    continuation?: string;
  };
  Model266: {
    orderId?: string;
    contract?: string;
    tokenSetId?: string;
    maker?: string;
    price?: definitions["price"];
    validUntil?: number;
    source?: string;
  };
  Model267: {
    collection?: definitions["Model254"];
    topBid?: definitions["Model266"];
    event?: definitions["Model260"];
  };
  Model268: definitions["Model267"][];
  getCollectionsTopbidV2Response: {
    events?: definitions["Model268"];
    continuation?: string;
  };
  Model269: {
    orderId?: string;
    maker?: string;
    nonce?: string;
    price?: number;
    validFrom?: number;
    validUntil?: number;
    source?: string;
  };
  Model270: {
    token?: definitions["Model183"];
    floorAsk?: definitions["Model269"];
    event?: definitions["Model256"];
  };
  Model271: definitions["Model270"][];
  getTokensFloorAskV2Response: {
    events?: definitions["Model271"];
    continuation?: string;
  };
  Model272: {
    orderId?: string;
    maker?: string;
    nonce?: string;
    price?: definitions["price"];
    validFrom?: number;
    validUntil?: number;
    source?: string;
    isDynamic?: boolean;
  };
  Model273: {
    token?: definitions["Model183"];
    floorAsk?: definitions["Model272"];
    event?: definitions["Model256"];
  };
  Model274: definitions["Model273"][];
  getTokensFloorAskV3Response: {
    events?: definitions["Model274"];
    continuation?: string;
  };
  Model275: {
    orderId?: string;
    maker?: string;
    nonce?: string;
    price?: definitions["price"];
    validFrom?: number;
    validUntil?: number;
    source?: definitions["source"];
    dynamicPricing?: definitions["dynamicPricing"];
    isDynamic?: boolean;
  };
  Model276: {
    token?: definitions["Model183"];
    floorAsk?: definitions["Model275"];
    event?: definitions["Model260"];
  };
  Model277: definitions["Model276"][];
  getTokensFloorAskV4Response: {
    events?: definitions["Model277"];
    continuation?: string;
  };
  message: {
    id: string;
    payload: string;
    timestamp: number;
    chainId: string;
    signature: string;
  };
  getCollectionBidAskMidpointOracleV1Response: {
    price: number;
    message?: definitions["message"];
  };
  Model278: {
    id: string;
    payload: string;
    timestamp: number;
    signature: string;
  };
  getCollectionFloorAskOracleV4Response: {
    price: number;
    message?: definitions["Model278"];
    data?: string;
  };
  getCollectionFloorAskOracleV6Response: {
    price: number;
    message?: definitions["message"];
    data?: string;
  };
  getCollectionTopBidOracleV2Response: {
    price: number;
    message?: definitions["Model278"];
  };
  Model279: {
    token: string;
    isFlagged: boolean;
    lastTransferTime: number;
    message?: definitions["Model278"];
  };
  messages: definitions["Model279"][];
  getTokenStatusOracleV2Response: {
    messages?: definitions["messages"];
  };
  Model280: {
    token: string;
    isFlagged: boolean;
    lastTransferTime: number;
    message?: definitions["message"];
  };
  Model281: definitions["Model280"][];
  getTokenStatusOracleV3Response: {
    messages?: definitions["Model281"];
  };
  Model282: {
    tokenId: string;
    lastFlagChange?: string;
    /** @default false */
    isFlagged?: boolean;
    contract: string;
  };
  Model283: definitions["Model282"][];
  getFlaggedTokensV1Response: {
    tokens?: definitions["Model283"];
    continuation?: string;
  };
  getTokenActivityV4Response: {
    continuation?: string;
    activities?: definitions["Model109"];
  };
  Model284: {
    tokenId?: string;
    tokenName?: string;
    tokenImage?: string;
    /** @default false */
    isSpam?: boolean;
  };
  Model285: {
    /** @description Possible types returned: `ask`, `ask_cancel`, `bid`, `bid_cancel`, `sale`, `mint, and `transfer`. */
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: definitions["Model110"];
    amount?: number;
    /** @description Time when added on the blockchain. */
    timestamp?: number;
    /** @description Time when added in the indexer. */
    createdAt?: string;
    contract?: string;
    token?: definitions["Model284"];
    collection?: definitions["Model230"];
    /** @description Txn hash from the blockchain. */
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
    fillSource?: definitions["source"];
    order?: definitions["Model113"];
  };
  Model286: definitions["Model285"][];
  getTokenActivityV5Response: {
    continuation?: string;
    activities?: definitions["Model286"];
  };
  getTransactionSyncedV1Response: {
    synced: boolean;
  };
  Model287: {
    id?: string;
    name?: string;
    imageUrl?: string;
    floorAskPrice?: number;
  };
  Model288: {
    id?: string;
    price?: definitions["price"];
  };
  Model289: {
    contract?: string;
    tokenId?: string;
    kind?: string;
    name?: string;
    image?: string;
    lastBuy?: definitions["lastBuy"];
    lastSell?: definitions["lastBuy"];
    rarityScore?: number;
    rarityRank?: number;
    media?: string;
    collection?: definitions["Model287"];
    topBid?: definitions["Model288"];
    lastAppraisalValue?: number;
  };
  Model290: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    dynamicPricing?: definitions["Model166"];
    source?: definitions["source"];
  };
  Model291: {
    tokenCount?: string;
    onSaleCount?: string;
    floorAsk?: definitions["Model290"];
    acquiredAt?: string;
  };
  Model292: {
    token?: definitions["Model289"];
    ownership?: definitions["Model291"];
  };
  Model293: definitions["Model292"][];
  getUserTokensV6Response: {
    tokens?: definitions["Model293"];
    continuation?: string;
  };
  Model294: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
    collection?: definitions["Model287"];
    topBid?: definitions["Model288"];
  };
  Model295: {
    tokenCount?: string;
    onSaleCount?: string;
    floorAskPrice?: definitions["price"];
    acquiredAt?: string;
  };
  Model296: {
    token?: definitions["Model294"];
    ownership?: definitions["Model295"];
  };
  Model297: definitions["Model296"][];
  getUserTokensV4Response: {
    tokens?: definitions["Model297"];
  };
  Model298: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
    collection?: definitions["Model287"];
  };
  Model299: {
    tokenCount?: string;
    onSaleCount?: string;
    floorAskPrice?: number;
    acquiredAt?: string;
  };
  Model300: {
    token?: definitions["Model298"];
    ownership?: definitions["Model299"];
  };
  Model301: definitions["Model300"][];
  getUserTokensV2Response: {
    tokens?: definitions["Model301"];
  };
  Model302: {
    id?: string;
    slug?: string;
    createdAt?: string;
    name?: string;
    image?: string;
    banner?: string;
    discordUrl?: string;
    externalUrl?: string;
    twitterUsername?: string;
    openseaVerificationStatus?: string;
    description?: string;
    sampleImages?: definitions["sampleImages"];
    tokenCount?: string;
    tokenSetId?: string;
    primaryContract?: string;
    floorAskPrice?: number;
    topBidValue?: number;
    topBidMaker?: string;
    topBidSourceDomain?: string;
    rank?: definitions["rank"];
    volume?: definitions["rank"];
    volumeChange?: definitions["volumeChange"];
    floorSale?: definitions["volumeChange"];
  };
  Model303: {
    tokenCount?: string;
    onSaleCount?: string;
    liquidCount?: string;
  };
  Model304: {
    collection?: definitions["Model302"];
    ownership?: definitions["Model303"];
  };
  Model305: definitions["Model304"][];
  getUserCollectionsV2Response: {
    collections?: definitions["Model305"];
  };
  Model306: {
    type?: string;
    fromAddress?: string;
    toAddress?: string;
    price?: number;
    amount?: number;
    timestamp?: number;
    token?: definitions["Model99"];
    collection?: definitions["Model100"];
    txHash?: string;
    logIndex?: number;
    batchIndex?: number;
  };
  Model307: definitions["Model306"][];
  getUserActivityV1Response: {
    continuation?: number;
    activities?: definitions["Model307"];
  };
  Model308: {
    imageUrl?: string;
    discordUrl?: string;
    description?: string;
    externalUrl?: string;
    bannerImageUrl?: string;
    twitterUsername?: string;
  };
  Model309: {
    id?: string;
    name?: string;
    metadata?: definitions["Model308"];
    floorAskPrice?: number;
    topBidValue?: number;
  };
  Model310: {
    collection?: definitions["Model309"];
    ownership?: definitions["Model303"];
  };
  Model311: definitions["Model310"][];
  getUserCollectionsV1Response: {
    collections?: definitions["Model311"];
  };
  /** @description Current floor ask price */
  Model312: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  /** @description Top bid offer currently if offer is valid */
  Model313: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  Model314: {
    /** @description Collection Id */
    id?: string;
    slug?: string;
    name?: string;
    image?: string;
    /** @default false */
    isSpam?: boolean;
    banner?: string;
    discordUrl?: string;
    externalUrl?: string;
    twitterUsername?: string;
    twitterUrl?: string;
    openseaVerificationStatus?: string;
    description?: string;
    /** @default false */
    metadataDisabled?: boolean;
    sampleImages?: definitions["sampleImages"];
    /** @description Total token count */
    tokenCount?: string;
    tokenSetId?: string;
    primaryContract?: string;
    floorAskPrice?: definitions["Model312"];
    topBidValue?: definitions["Model313"];
    topBidMaker?: string;
    topBidSourceDomain?: string;
    rank?: definitions["Model21"];
    volume?: definitions["volume"];
    volumeChange?: definitions["Model28"];
    floorSale?: definitions["floorSale"];
    /** @description Returns `erc721`, `erc1155`, etc. */
    contractKind?: string;
  };
  Model315: {
    collection?: definitions["Model314"];
    ownership?: definitions["Model303"];
  };
  Model316: definitions["Model315"][];
  getUserCollectionsV3Response: {
    collections?: definitions["Model316"];
  };
  set: {
    id?: string;
    metadata?: definitions["Model157"];
    sampleImages?: definitions["sampleImages"];
    image?: string;
    floorAskPrice?: number;
    topBidValue?: number;
  };
  primaryOrder: {
    id?: string;
    value?: number;
    expiration?: number;
  };
  Model317: {
    set?: definitions["set"];
    primaryOrder?: definitions["primaryOrder"];
    totalValid?: number;
  };
  positions: definitions["Model317"][];
  getUserPositionsV1Response: {
    positions?: definitions["positions"];
  };
  Model318: {
    id?: string;
    value?: number;
    schema?: definitions["metadata"];
  };
  Model319: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
    collection?: definitions["Model44"];
    topBid?: definitions["Model318"];
  };
  Model320: {
    tokenCount?: string;
    onSaleCount?: string;
    floorSellValue?: number;
    acquiredAt?: number;
  };
  Model321: {
    token?: definitions["Model319"];
    ownership?: definitions["Model320"];
  };
  Model322: definitions["Model321"][];
  getUserTokensV1Response: {
    tokens?: definitions["Model322"];
  };
  Model323: {
    id?: string;
    value?: number;
  };
  Model324: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
    collection?: definitions["Model287"];
    topBid?: definitions["Model323"];
  };
  Model325: {
    token?: definitions["Model324"];
    ownership?: definitions["Model299"];
  };
  Model326: definitions["Model325"][];
  getUserTokensV3Response: {
    tokens?: definitions["Model326"];
  };
  Model327: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    validFrom?: number;
    validUntil?: number;
    source?: definitions["source"];
  };
  Model328: {
    tokenCount?: string;
    onSaleCount?: string;
    floorAsk?: definitions["Model327"];
    acquiredAt?: string;
  };
  Model329: {
    token?: definitions["Model294"];
    ownership?: definitions["Model328"];
  };
  Model330: definitions["Model329"][];
  getUserTokensV5Response: {
    tokens?: definitions["Model330"];
  };
  /** @description Can be null if no active asks. */
  Model331: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  Model332: {
    bps?: number;
    recipient?: string;
  };
  Model333: definitions["Model332"][];
  Model334: {
    id?: string;
    name?: string;
    /** @description Open Sea slug */
    slug?: string;
    symbol?: string;
    imageUrl?: string;
    /** @default false */
    isSpam?: boolean;
    /** @default false */
    metadataDisabled?: boolean;
    openseaVerificationStatus?: string;
    floorAskPrice?: definitions["Model331"];
    royaltiesBps?: number;
    royalties?: definitions["Model333"];
  };
  /** @description Can be null if not active bids. */
  Model335: {
    id?: string;
    price?: definitions["price"];
    source?: definitions["source"];
  };
  Model336: {
    /** @description Case sensitive */
    key?: string;
    /** @description Can be `string`, `number, `date, or `range`. */
    kind?: string;
    /** @description Case sensitive. */
    value: string;
    tokenCount?: number;
    onSaleCount?: number;
    /** @description Can be null. */
    floorAskPrice?: number;
    /** @description Can be null. */
    topBidValue?: number;
    createdAt?: string;
  };
  Model337: definitions["Model336"][];
  Model338: {
    chainId: number;
    contract?: string;
    tokenId?: string;
    /** @description Can be erc721, erc115, etc. */
    kind?: string;
    name?: string;
    image?: string;
    imageSmall?: string;
    imageLarge?: string;
    metadata?: definitions["metadata"];
    description?: string;
    /** @description Can be higher than one if erc1155. */
    supply?: number;
    remainingSupply?: number;
    /** @description No rarity for collections over 100k */
    rarityScore?: number;
    /** @description No rarity rank for collections over 100k */
    rarityRank?: number;
    media?: string;
    /** @default false */
    isFlagged?: boolean;
    /** @default false */
    isSpam?: boolean;
    /** @default false */
    metadataDisabled?: boolean;
    lastFlagUpdate?: string;
    lastFlagChange?: string;
    collection?: definitions["Model334"];
    lastSale?: definitions["Model53"];
    topBid?: definitions["Model335"];
    /** @description The value of the last sale.Can be null. */
    lastAppraisalValue?: number;
    attributes?: definitions["Model337"];
  };
  /** @description Can be null if no asks. */
  Model339: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    kind?: string;
    validFrom?: number;
    validUntil?: number;
    source?: definitions["source"];
    rawData?: definitions["metadata"];
    isNativeOffChainCancellable?: boolean;
  };
  Model340: {
    tokenCount?: string;
    onSaleCount?: string;
    floorAsk?: definitions["Model339"];
    acquiredAt?: string;
  };
  Model341: {
    token?: definitions["Model338"];
    ownership?: definitions["Model340"];
  };
  Model342: definitions["Model341"][];
  getUserTokensV7Response: {
    tokens?: definitions["Model342"];
    continuation?: string;
  };
  /** @description Current floor price ask. */
  Model343: number[];
  Model344: {
    tokenId: string;
    value: number;
    timestamp: number;
  };
  Model345: definitions["Model344"][];
  Model346: {
    /** @description Case sensitive */
    key: string;
    /** @description Case sensitive */
    value: string;
    /** @description Total token count with this attribute. */
    tokenCount: number;
    /** @description Token count with this attribute on sale. */
    onSaleCount: number;
    sampleImages?: definitions["sampleImages"];
    floorAskPrices?: definitions["Model343"];
    lastBuys?: definitions["Model345"];
    lastSells?: definitions["Model345"];
    topBid?: definitions["topBid"];
  };
  Model347: definitions["Model346"][];
  getAttributesExploreV4Response: {
    attributes?: definitions["Model347"];
    continuation?: string;
  };
  Model348: {
    key: string;
    value: string;
    tokenCount: number;
    onSaleCount: number;
    sampleImages?: definitions["sampleImages"];
    floorAskPrices?: definitions["floorAskPrices"];
    lastSells?: definitions["Model345"];
    topBid?: definitions["topBid"];
  };
  Model349: definitions["Model348"][];
  getAttributesExploreV2Response: {
    attributes?: definitions["Model349"];
  };
  /** @description Returned only for attributes with less than 10k tokens */
  Model350: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  Model351: {
    /** @description Case sensitive */
    value: string;
    count?: number;
    floorAskPrice?: definitions["Model350"];
  };
  Model352: definitions["Model351"][];
  Model353: {
    /** @description Case sensitive */
    key: string;
    /** @description Number of possible attribute kinds */
    attributeCount?: number;
    /** @enum {string} */
    kind: "string" | "number" | "date" | "range";
    minRange?: number;
    maxRange?: number;
    values?: definitions["Model352"];
  };
  Model354: definitions["Model353"][];
  getAttributesAllV4Response: {
    attributes?: definitions["Model354"];
  };
  Model355: {
    value: string;
    count?: number;
    floorAskPrice?: number;
  };
  Model356: definitions["Model355"][];
  Model357: {
    key: string;
    attributeCount?: number;
    /** @enum {string} */
    kind: "string" | "number" | "date" | "range";
    minRange?: number;
    maxRange?: number;
    values?: definitions["Model356"];
  };
  Model358: definitions["Model357"][];
  getAttributesAllV2Response: {
    attributes?: definitions["Model358"];
  };
  Model359: {
    value: string;
    count?: number;
    /** @description Returned only for attributes with less than 10k tokens */
    floorAskPrice?: number;
  };
  Model360: definitions["Model359"][];
  Model361: {
    key: string;
    attributeCount?: number;
    /** @enum {string} */
    kind: "string" | "number" | "date" | "range";
    minRange?: number;
    maxRange?: number;
    values?: definitions["Model360"];
  };
  Model362: definitions["Model361"][];
  getAttributesAllV3Response: {
    attributes?: definitions["Model362"];
  };
  Model363: {
    value: string;
    count?: number;
    tokens?: definitions["sampleImages"];
  };
  Model364: definitions["Model363"][];
  Model365: {
    key: string;
    /** @enum {string} */
    kind: "string" | "number" | "date" | "range";
    values?: definitions["Model364"];
  };
  Model366: definitions["Model365"][];
  getAttributesStaticV1Response: {
    attributes?: definitions["Model366"];
  };
  Model367: {
    key: string;
    value: string;
    tokenCount: number;
    onSaleCount: number;
    sampleImages?: definitions["sampleImages"];
    floorAskPrices?: definitions["floorAskPrices"];
    lastBuys?: definitions["Model345"];
    lastSells?: definitions["Model345"];
    topBid?: definitions["topBid"];
  };
  Model368: definitions["Model367"][];
  getAttributesExploreV3Response: {
    attributes?: definitions["Model368"];
  };
  getAttributesExploreV5Response: {
    attributes?: definitions["Model368"];
    continuation?: string;
  };
  Model369: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
    floorAskPrice?: number;
    lastSalePrice?: number;
    collection?: definitions["Model287"];
  };
  Model370: {
    id?: string;
    price?: definitions["price"];
    maker?: string;
    createdAt?: string;
    validFrom?: number;
    validUntil?: number;
    floorDifferencePercentage?: number;
    source?: definitions["source"];
    feeBreakdown?: definitions["Model159"];
    criteria?: definitions["Model106"];
    token?: definitions["Model369"];
  };
  Model371: definitions["Model370"][];
  getUserTopBidsV3Response: {
    totalTokensWithBids?: number;
    totalAmount?: number;
    topBids?: definitions["Model371"];
    continuation?: string;
  };
  Model372: {
    id?: string;
    price?: number;
    value?: number;
    maker?: string;
    createdAt?: string;
    validFrom?: number;
    validUntil?: number;
    floorDifferencePercentage?: number;
    source?: definitions["source"];
    feeBreakdown?: definitions["Model159"];
    context?: definitions["Model157"];
    token?: definitions["Model369"];
  };
  Model373: definitions["Model372"][];
  getUserTopBidsV1Response: {
    totalTokensWithBids?: number;
    topBids?: definitions["Model373"];
    continuation?: string;
  };
  Model374: {
    id?: string;
    price?: number;
    value?: number;
    maker?: string;
    createdAt?: string;
    validFrom?: number;
    validUntil?: number;
    floorDifferencePercentage?: number;
    source?: definitions["source"];
    feeBreakdown?: definitions["Model159"];
    criteria?: definitions["Model106"];
    token?: definitions["Model369"];
  };
  Model375: definitions["Model374"][];
  getUserTopBidsV2Response: {
    totalTokensWithBids?: number;
    topBids?: definitions["Model375"];
    continuation?: string;
  };
  /** @description Native currency to chain unless displayCurrency is passed. */
  Model376: {
    currency?: definitions["currency"];
    amount?: definitions["amount"];
    netAmount?: definitions["netAmount"];
  };
  Model377: {
    id?: string;
    name?: string;
    imageUrl?: string;
    floorAskPrice?: definitions["Model376"];
  };
  Model378: {
    contract?: string;
    tokenId?: string;
    name?: string;
    image?: string;
    floorAskPrice?: definitions["price"];
    lastSalePrice?: definitions["price"];
    collection?: definitions["Model377"];
  };
  Model379: {
    id?: string;
    price?: definitions["Model110"];
    maker?: string;
    /** @description Time when added to indexer */
    createdAt?: string;
    validFrom?: number;
    validUntil?: number;
    /** @description Percentage difference between this bid and the current floor price. */
    floorDifferencePercentage?: number;
    source?: definitions["source"];
    feeBreakdown?: definitions["Model168"];
    criteria?: definitions["Model106"];
    token?: definitions["Model378"];
  };
  Model380: definitions["Model379"][];
  getUserTopBidsV4Response: {
    /** @description Amount of token with bids. */
    totalTokensWithBids?: number;
    /** @description Amount of currency from all token bids; native currency unless `displayCurrency` passed */
    totalAmount?: number;
    topBids?: definitions["Model380"];
    continuation?: string;
  };
  Model381: {
    community: string;
  };
  putSetCollectionCommunityV1Response: {
    message?: string;
  };
  getNewApiKeyResponse: {
    key: string;
  };
  Model382: {
    /** @description The collection for which to calculate the rarity, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    collection: string;
  };
  Model383: {
    key?: string;
    value?: string;
  };
  Model384: definitions["Model383"][];
  Model385: {
    /** @description The route for which the rule is created */
    route: string;
    points?: number;
    duration?: number;
    pointsToConsume?: number;
    tier?: number;
    /** @default */
    apiKey?: string;
    /**
     * @default
     * @enum {string}
     */
    method?: "get" | "post" | "delete" | "put";
    payload?: definitions["Model384"];
  };
  Model386: {
    /** @description The rule ID to delete */
    ruleId: number;
  };
  Model387: {
    fromBlock: number;
    toBlock: number;
  };
  Model388: {
    /** @enum {string} */
    kind: "tokens-floor-sell" | "tokens-top-buy";
    contracts?: definitions["operatorWhitelist"];
  };
  Model389: {
    /** @enum {string} */
    by: "id" | "maker" | "token" | "contract";
    id: string;
    token: string;
    maker: string;
    contract: string;
  };
  Model390: {
    /** @enum {string} */
    kind: "tokens-floor-sell" | "tokens-top-buy";
    token: string;
  };
  Model391: {
    token: string;
  };
  Model392: {
    /** @description The queue name to pause */
    queueName: string;
  };
  Model393: {
    /** @description Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    collection: string;
    /**
     * @default full-collection
     * @enum {string}
     */
    refreshKind?: "full-collection" | "full-collection-by-slug";
    /**
     * @description If true, will only refresh the collection cache.
     * @default false
     */
    cacheOnly?: boolean;
  };
  Model394: {
    /** @enum {string} */
    method?: "opensea" | "simplehash" | "centerdev" | "soundxyz";
    /** @description Refresh the given token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token: string;
  };
  Model395: {
    /** @description The queue name to resume */
    queueName: string;
  };
  Model396: {
    collection?: string;
    token?: string;
  };
  Model397: {
    fromBlock: number;
    toBlock: number;
    blockRange?: number;
  };
  Model398: {
    /** @enum {string} */
    kind?: "all";
    data?: definitions["Model397"];
  };
  Model399: {
    /** @description The source domain to sync. Example: `reservoir.market` */
    source?: string;
  };
  Model400: {
    /** @description The queue name to retry */
    queueName: string;
  };
  Model401: {
    id: string;
    /** @enum {string} */
    status: "active" | "inactive";
  };
  Model402: {
    address: string;
    domain: string;
    deploymentBlock: number;
  };
  routers: definitions["Model402"][];
  Model403: {
    routers: definitions["routers"];
  };
  Model404: {
    /** @description Update community for a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    collection: string;
    community: string;
    /** @default false */
    doRetries?: boolean;
  };
  Model405: {
    /**
     * @description If no days are passed, will automatically resync from beginning of time.
     * @default 0
     */
    days?: number;
  };
  Model406: {
    /** @enum {string} */
    method?: "events";
    events?: definitions["sampleImages"];
  };
  Model407: {
    syncDetails?: definitions["Model406"];
    fromBlock: number;
    toBlock: number;
    blocksPerBatch?: number;
    /** @default false */
    skipNonFillWrites?: boolean;
    /** @default true */
    backfill?: boolean;
  };
  Model408: {
    path?: string;
    params?: string;
  };
  /** @description Should be passed in array [{"contract": "...", "tokenId": "..."}] */
  Model409: {
    path?: string;
    params?: string;
  };
  ips: string[];
  origins: string[];
  permissions: {
    override_collection_refresh_cool_down?: boolean;
    assign_collection_to_community?: boolean;
    update_metadata_disabled?: boolean;
    update_spam_status?: boolean;
    entity_data_override?: boolean;
  };
  Model410: {
    /** @description The api key to update */
    apiKey?: string;
    tier?: number;
    active?: boolean;
    ips?: definitions["ips"];
    origins?: definitions["origins"];
    permissions?: definitions["permissions"];
    revShareBps?: number;
  };
  Model411: {
    /** @description Refresh the given token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token: string;
  };
  Model412: {
    /** @description The rule ID to update */
    ruleId: number;
    tier?: number;
    points?: number;
    pointsToConsume?: number;
    duration?: number;
    apiKey?: string;
    /** @enum {string} */
    method?: "get" | "post" | "delete" | "put";
    payload?: definitions["Model384"];
  };
  Model413: {
    /** @description The source domain to sync. Example: `reservoir.market` */
    source?: string;
    icon?: string;
    title?: string;
    optimized?: boolean;
  };
  Model414: string[];
  Model415: {
    collections: definitions["Model414"];
  };
  postCreateCollectionsSetV1Response: {
    collectionsSetId?: string;
  };
  contracts: string[];
  Model416: {
    contracts: definitions["contracts"];
  };
  postCreateContractsSetV1Response: {
    contractsSetId?: string;
  };
  Model417: {
    /** @enum {string} */
    kind: "opensea" | "zeroex-v4" | "seaport" | "x2y2";
    data: definitions["metadata"];
  };
  attribute: {
    collection: string;
    key: string;
    value: string;
  };
  Model418: {
    order?: definitions["Model417"];
    /**
     * @default reservoir
     * @enum {string}
     */
    orderbook?: "reservoir" | "opensea";
    orderbookApiKey?: string;
    /** @description The name of the source */
    source?: string;
    attribute?: definitions["attribute"];
    collection?: string;
    tokenSetId?: string;
    isNonFlagged?: boolean;
  };
  postOrderV2Response: {
    message?: string;
    orderId?: string;
    /** @description Only available when posting to external orderbook. Can be used to retrieve the status of a cross-post order. */
    crossPostingOrderId?: string;
    crossPostingOrderStatus?: string;
  };
  Model419: {
    /** @enum {string} */
    kind:
      | "opensea"
      | "blur"
      | "looks-rare-v2"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2"
      | "alienswap";
    data: definitions["metadata"];
  };
  Model420: {
    order?: definitions["Model419"];
    /**
     * @default reservoir
     * @enum {string}
     */
    orderbook?: "reservoir" | "opensea" | "looks-rare" | "x2y2";
    /** @description Optional API key for the target orderbook */
    orderbookApiKey?: string;
    /** @description The source domain */
    source?: string;
    attribute?: definitions["attribute"];
    collection?: string;
    tokenSetId?: string;
    isNonFlagged?: boolean;
    permitId?: string;
    permitIndex?: number;
  };
  Model421: {
    /** @enum {string} */
    kind:
      | "blur"
      | "opensea"
      | "looks-rare-v2"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2"
      | "alienswap"
      | "payment-processor"
      | "payment-processor-v2";
    data: definitions["metadata"];
  };
  Model422: {
    orderIndex: number;
    merkleProof: definitions["sampleImages"];
  };
  bulkData: {
    /**
     * @default seaport-v1.5
     * @enum {string}
     */
    kind?: "seaport-v1.4" | "seaport-v1.5" | "alienswap";
    data?: definitions["Model422"];
  };
  Model423: {
    order?: definitions["Model421"];
    /**
     * @default reservoir
     * @enum {string}
     */
    orderbook?: "blur" | "reservoir" | "opensea" | "looks-rare" | "x2y2";
    /** @description Optional API key for the target orderbook */
    orderbookApiKey?: string;
    attribute?: definitions["attribute"];
    collection?: string;
    tokenSetId?: string;
    isNonFlagged?: boolean;
    permitId?: string;
    permitIndex?: number;
    bulkData?: definitions["bulkData"];
  };
  Model424: definitions["Model423"][];
  Model425: {
    items?: definitions["Model424"];
    /** @description The source domain */
    source?: string;
  };
  Model426: {
    message?: string;
    orderId?: string;
    orderIndex?: number;
    /** @description Only available when posting to external orderbook. Can be used to retrieve the status of a cross-post order. */
    crossPostingOrderId?: string;
    /** @description Current cross-post order status. Responses are `pending`, `posted`, or `failed`. */
    crossPostingOrderStatus?: string;
  };
  results: definitions["Model426"][];
  postOrderV4Response: {
    results?: definitions["results"];
  };
  Model427: {
    /** @enum {string} */
    kind:
      | "blur"
      | "zeroex-v4"
      | "x2y2"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "element"
      | "rarible"
      | "manifold"
      | "looks-rare-v2";
    data: definitions["metadata"];
    originatedAt?: string;
    source?: string;
  };
  Model428: definitions["Model427"][];
  Model429: {
    orders?: definitions["Model428"];
  };
  protocol_data: {
    parameters?: string;
    signature?: string;
  };
  Model430: {
    protocol_data?: definitions["protocol_data"];
  };
  seaport_offers: definitions["Model430"][];
  Model431: {
    seaport_offers?: definitions["seaport_offers"];
  };
  tokenIds: string[];
  Model432: {
    /** @description Contract address. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    contract: string;
    tokenIds: definitions["tokenIds"];
  };
  Model433: string[];
  Model434: {
    tokens: definitions["Model433"];
  };
  Model435: {
    time?: string;
    apiCallsCount?: number;
    pointsConsumed?: number;
    key?: string;
    route?: string;
    statusCode?: number;
  };
  metrics: definitions["Model435"][];
  postApiKeyMetricsResponse: {
    metrics?: definitions["metrics"];
  };
  /** @description Array of collection ids to disable metadata for. Max limit is 50. Example: `collections[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63 collections[1]: 0x521f9c7505005cfa19a8e5786a9c3c9c9f5e6f42` */
  Model436: string[];
  Model437: {
    collections: definitions["Model436"];
    /**
     * @description Whether to disable or reenable the metadata. Defaults to true (disable)
     * @default true
     */
    disable?: boolean;
  };
  Model438: {
    /** @description Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    collection: string;
    /**
     * @description If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.
     * @default false
     */
    overrideCoolDown?: boolean;
    /**
     * @description If true, will only refresh the collection metadata.
     * @default false
     */
    metadataOnly?: boolean;
  };
  Model439: {
    /** @description Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    collection: string;
    /**
     * @description If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.
     * @default false
     */
    overrideCoolDown?: boolean;
    /**
     * @description If true, will refresh the metadata for the tokens in the collection.
     * @default true
     */
    refreshTokens?: boolean;
  };
  /** @description Update to one or more collections. Max limit is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
  Model440: string[];
  Model441: {
    collections: definitions["Model440"];
    /**
     * @description API to update the spam status of a collection
     * @default true
     */
    spam?: boolean;
  };
  Model442: {
    /**
     * @description Type of auth
     * @enum {string}
     */
    kind: "blur" | "erc721c" | "opensea";
    /** @description Id of the auth challenge */
    id: string;
  };
  postAuthSignatureV1Response: {
    auth?: string;
  };
  /** @description List of fees (formatted as `feeRecipient:feeBps`) to be bundled within the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100` */
  fees: string[];
  Model443: {
    /** @description Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token?: string;
    /** @description Bid on a particular token set. */
    tokenSetId?: string;
    /** @description Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    collection?: string;
    /** @description Bid on a particular attribute key. Example: `Composition` */
    attributeKey?: string;
    /** @description Bid on a particular attribute value. Example: `Teddy (#33)` */
    attributeValue?: string;
    /** @description Quantity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5` */
    quantity?: number;
    /** @description Amount bidder is willing to offer in wei. Example: `1000000000000000000` */
    weiPrice: string;
    /**
     * @description Exchange protocol used to create order. Example: `seaport-v1.5`
     * @default seaport-v1.5
     * @enum {string}
     */
    orderKind?:
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "looks-rare"
      | "looks-rare-v2"
      | "x2y2";
    /**
     * @description Orderbook where order is placed. Example: `Reservoir`
     * @default reservoir
     * @enum {string}
     */
    orderbook?: "reservoir" | "opensea" | "looks-rare" | "x2y2";
    /** @description Optional API key for the target orderbook */
    orderbookApiKey?: string;
    /**
     * @description If true, royalties will be automatically included.
     * @default true
     */
    automatedRoyalties?: boolean;
    /** @description The royalty percentage to pay. Only relevant when using automated royalties. */
    royaltyBps?: number;
    fees?: definitions["fees"];
    /**
     * @description If true flagged tokens will be excluded
     * @default false
     */
    excludeFlaggedTokens?: boolean;
    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */
    listingTime?: string;
    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */
    expirationTime?: string;
    /** @description Optional. Random string to make the order unique */
    salt?: string;
    /** @description Optional. Set a custom nonce */
    nonce?: string;
    /** @default 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 */
    currency?: string;
  };
  params: definitions["Model443"][];
  Model444: {
    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    maker: string;
    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the "order source" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */
    source?: string;
    params?: definitions["params"];
  };
  Model445: {
    id: string;
    /** @enum {string} */
    kind: "request" | "signature" | "transaction";
    action: string;
    description: string;
    items: definitions["items"];
  };
  Model446: definitions["Model445"][];
  getExecuteBidV4Response: {
    steps?: definitions["Model446"];
    query?: definitions["metadata"];
  };
  "seaport-v1.4": {
    conduitKey?: string;
    useOffChainCancellation: boolean;
    replaceOrderId?: string;
  };
  "payment-processor-v2": {
    useOffChainCancellation: boolean;
  };
  /** @description Additional options. */
  options: {
    "seaport-v1.4"?: definitions["seaport-v1.4"];
    "seaport-v1.5"?: definitions["seaport-v1.4"];
    "payment-processor-v2"?: definitions["payment-processor-v2"];
  };
  /** @description Deprecated, use `marketplaceFees` and/or `customRoyalties` */
  Model447: string[];
  /** @description List of marketplace fees (formatted as `feeRecipient:feeBps`) to be bundled within the order. 1 BPS = 0.01% Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100` */
  marketplaceFees: string[];
  /** @description List of custom royalties (formatted as `feeRecipient:feeBps`) to be bundled within the order. 1 BPS = 0.01% Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100` */
  customRoyalties: string[];
  Model448: {
    /** @description Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token?: string;
    /** @description Bid on a particular token set. Cannot be used with cross-posting to OpenSea. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract. */
    tokenSetId?: string;
    /** @description Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
    collection?: string;
    /** @description Bid on a particular attribute key. This is case sensitive. Example: `Composition` */
    attributeKey?: string;
    /** @description Bid on a particular attribute value. This is case sensitive. Example: `Teddy (#33)` */
    attributeValue?: string;
    /** @description Quantity of tokens to bid on. */
    quantity?: number;
    /** @description Amount bidder is willing to offer in the smallest denomination for the specific currency. Example: `1000000000000000000` */
    weiPrice: string;
    /**
     * @description Exchange protocol used to create order. Example: `seaport-v1.5`
     * @default seaport-v1.5
     * @enum {string}
     */
    orderKind?:
      | "blur"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "looks-rare"
      | "looks-rare-v2"
      | "x2y2"
      | "alienswap"
      | "payment-processor"
      | "payment-processor-v2";
    options?: definitions["options"];
    /**
     * @description Orderbook where order is placed. Example: `Reservoir`
     * @default reservoir
     * @enum {string}
     */
    orderbook?: "blur" | "reservoir" | "opensea" | "looks-rare" | "x2y2";
    /** @description Optional API key for the target orderbook */
    orderbookApiKey?: string;
    /**
     * @description If true, royalty amounts and recipients will be set automatically.
     * @default true
     */
    automatedRoyalties?: boolean;
    /** @description Set a maximum amount of royalties to pay, rather than the full amount. Only relevant when using automated royalties. 1 BPS = 0.01% Note: OpenSea does not support values below 50 bps. */
    royaltyBps?: number;
    fees?: definitions["Model447"];
    marketplaceFees?: definitions["marketplaceFees"];
    customRoyalties?: definitions["customRoyalties"];
    /**
     * @description If true flagged tokens will be excluded
     * @default false
     */
    excludeFlaggedTokens?: boolean;
    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */
    listingTime?: string;
    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */
    expirationTime?: string;
    /** @description Optional. Random string to make the order unique */
    salt?: string;
    /** @description Optional. Set a custom nonce */
    nonce?: string;
    /** @default 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 */
    currency?: string;
    /** @description When true, will use permit to avoid approvals. */
    usePermit?: boolean;
  };
  Model449: definitions["Model448"][];
  Model450: {
    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    maker: string;
    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the "order source" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */
    source?: string;
    /** @description Advanced use case to pass personal blurAuthToken; the API will generate one if left empty. */
    blurAuth?: string;
    params?: definitions["Model449"];
  };
  Model451: {
    /**
     * @description Returns `complete` or `incomplete`
     * @enum {string}
     */
    status: "complete" | "incomplete";
    tip?: string;
    data?: definitions["metadata"];
    orderIndexes?: definitions["floorAskPrices"];
  };
  Model452: definitions["Model451"][];
  Model453: {
    /** @description Returns `currency-wrapping`, `currency-approval`, or `order-signature`. */
    id: string;
    /**
     * @description Returns `request`, `signature`, or `transaction`.
     * @enum {string}
     */
    kind: "request" | "signature" | "transaction";
    action: string;
    description: string;
    items: definitions["Model452"];
  };
  Model454: definitions["Model453"][];
  Model455: {
    message?: string;
    orderIndex?: number;
  };
  errors: definitions["Model455"][];
  getExecuteBidV5Response: {
    steps?: definitions["Model454"];
    errors?: definitions["errors"];
  };
  orderIds: string[];
  Model456: {
    /** @enum {string} */
    kind: "opensea" | "looks-rare" | "zeroex-v4" | "seaport" | "x2y2";
    data: definitions["metadata"];
  };
  rawOrders: definitions["Model456"][];
  /** @description Array of tokens user is buying. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
  Model457: string[];
  /** @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000` */
  feesOnTop: string[];
  Model458: {
    orderIds?: definitions["orderIds"];
    rawOrders?: definitions["rawOrders"];
    tokens?: definitions["Model457"];
    /** @description Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5` */
    quantity?: number;
    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    taker: string;
    /** @description Address of wallet relaying the filling transaction */
    relayer?: string;
    /**
     * @description If true, only the path will be returned.
     * @default false
     */
    onlyPath?: boolean;
    /** @description If true, all fills will be executed through the router. */
    forceRouter?: boolean;
    /** @default 0x0000000000000000000000000000000000000000 */
    currency?: string;
    /** @default true */
    normalizeRoyalties?: boolean;
    /**
     * @description If there are multiple listings with equal best price, prefer this source over others.
     * NOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.
     */
    preferredOrderSource?: string;
    /** @description Filling source used for attribution. Example: `reservoir.market` */
    source?: string;
    feesOnTop?: definitions["feesOnTop"];
    /**
     * @description If true, any off-chain or on-chain errors will be skipped.
     * @default false
     */
    partial?: boolean;
    /** @description Optional. Set custom gas price. */
    maxFeePerGas?: string;
    /** @description Optional. Set custom gas price. */
    maxPriorityFeePerGas?: string;
    /**
     * @description If true, balance check will be skipped.
     * @default false
     */
    skipBalanceCheck?: boolean;
    /** @description Override the X2Y2 API key used for filling. */
    x2y2ApiKey?: string;
  };
  Model459: {
    /** @enum {string} */
    status: "complete" | "incomplete";
    data?: definitions["metadata"];
  };
  Model460: definitions["Model459"][];
  Model461: {
    action: string;
    description: string;
    /** @enum {string} */
    kind: "transaction";
    items: definitions["Model460"];
  };
  Model462: definitions["Model461"][];
  Model463: {
    orderId?: string;
    contract?: string;
    tokenId?: string;
    quantity?: number;
    source?: string;
    currency?: string;
    quote?: number;
    rawQuote?: string;
  };
  path: definitions["Model463"][];
  getExecuteBuyV5Response: {
    steps?: definitions["Model462"];
    path?: definitions["path"];
  };
  Model464: {
    /** @enum {string} */
    kind:
      | "opensea"
      | "looks-rare"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2"
      | "rarible"
      | "sudoswap"
      | "nftx";
    data: definitions["metadata"];
  };
  Model465: definitions["Model464"][];
  /**
   * @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling.
   * Unless overridden via the `currency` param, the currency used for any fees on top matches the buy-in currency detected by the backend.
   * Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`
   */
  Model466: string[];
  Model467: {
    orderIds?: definitions["orderIds"];
    rawOrders?: definitions["Model465"];
    tokens?: definitions["Model457"];
    /** @description Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5` */
    quantity?: number;
    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    taker: string;
    /** @description Address of wallet relaying the filling transaction */
    relayer?: string;
    /**
     * @description If true, only the path will be returned.
     * @default false
     */
    onlyPath?: boolean;
    /** @description If true, all fills will be executed through the router. */
    forceRouter?: boolean;
    /**
     * @description Currency to buy all listings in.
     * @enum {string}
     */
    currency?: "0x0000000000000000000000000000000000000000";
    /** @default false */
    normalizeRoyalties?: boolean;
    /**
     * @description If there are multiple listings with equal best price, prefer this source over others.
     * NOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.
     */
    preferredOrderSource?: string;
    /** @description Filling source used for attribution. Example: `reservoir.market` */
    source?: string;
    feesOnTop?: definitions["Model466"];
    /**
     * @description If true, any off-chain or on-chain errors will be skipped.
     * @default false
     */
    partial?: boolean;
    /** @description Optional. Set custom gas price. */
    maxFeePerGas?: string;
    /** @description Optional. Set custom gas price. */
    maxPriorityFeePerGas?: string;
    /**
     * @description If true, balance check will be skipped.
     * @default false
     */
    skipBalanceCheck?: boolean;
    /**
     * @description If true, do not filter out inactive orders (only relevant for order id filtering).
     * @default false
     */
    allowInactiveOrderIds?: boolean;
    /**
     * @description Exclude orders that can only be filled by EOAs, to support filling with smart contracts.
     * @default false
     */
    excludeEOA?: boolean;
    /** @description Override the X2Y2 API key used for filling. */
    x2y2ApiKey?: string;
  };
  Model468: {
    id: string;
    action: string;
    description: string;
    /** @enum {string} */
    kind: "signature" | "transaction";
    items: definitions["Model460"];
  };
  Model469: definitions["Model468"][];
  Model470: {
    message?: string;
    orderId?: number;
  };
  Model471: definitions["Model470"][];
  getExecuteBuyV6Response: {
    steps?: definitions["Model469"];
    errors?: definitions["Model471"];
    path?: definitions["path"];
  };
  /** @description Optional raw order to fill. */
  rawOrder: {
    /** @enum {string} */
    kind?:
      | "opensea"
      | "blur-partial"
      | "looks-rare"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2"
      | "rarible"
      | "sudoswap"
      | "nftx"
      | "alienswap"
      | "mint";
    data?: definitions["metadata"];
  };
  Model472: {
    orderId: string;
    price?: string;
  };
  /** @description Items to exclude */
  exclusions: definitions["Model472"][];
  Model473: {
    /** @description Collection to buy. */
    collection?: string;
    /** @description Token to buy. */
    token?: string;
    /** @description Quantity of tokens to buy. */
    quantity?: number;
    /** @description Optional order id to fill. */
    orderId?: string;
    rawOrder?: definitions["rawOrder"];
    /**
     * @description Optionally specify a particular fill method. Only relevant when filling via `collection`.
     * @default preferMint
     * @enum {string}
     */
    fillType?: "trade" | "mint" | "preferMint";
    /**
     * @description If there are multiple listings with equal best price, prefer this source over others.
     * NOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order id or use `exactOrderSource`.
     */
    preferredOrderSource?: string;
    /** @description Only consider orders from this source. */
    exactOrderSource?: string;
    exclusions?: definitions["exclusions"];
  };
  /** @description List of items to buy. */
  Model474: definitions["Model473"][];
  /** @description Alternative currencies to return the quote in. */
  alternativeCurrencies: string[];
  Model475: {
    items: definitions["Model474"];
    /** @description Address of wallet filling (receiver of the NFT). */
    taker: string;
    /** @description Address of wallet relaying the fill transaction (paying for the NFT). */
    relayer?: string;
    /**
     * @description If true, only the path will be returned.
     * @default false
     */
    onlyPath?: boolean;
    /** @description If true, all fills will be executed through the router (where possible) */
    forceRouter?: boolean;
    alternativeCurrencies?: definitions["alternativeCurrencies"];
    /** @description Currency to be used for purchases. */
    currency?: string;
    /** @description The chain id of the purchase currency */
    currencyChainId?: number;
    /**
     * @description Charge any missing royalties.
     * @default false
     */
    normalizeRoyalties?: boolean;
    /**
     * @description If true, inactive orders will not be skipped over (only relevant when filling via a specific order id).
     * @default false
     */
    allowInactiveOrderIds?: boolean;
    /** @description Filling source used for attribution. Example: `reservoir.market` */
    source?: string;
    feesOnTop?: definitions["Model466"];
    /**
     * @description If true, any off-chain or on-chain errors will be skipped.
     * @default false
     */
    partial?: boolean;
    /**
     * @description If true, balance check will be skipped.
     * @default false
     */
    skipBalanceCheck?: boolean;
    /**
     * @description Exclude orders that can only be filled by EOAs, to support filling with smart contracts. If marked `true`, blur will be excluded.
     * @default false
     */
    excludeEOA?: boolean;
    /** @description Optional custom gas settings. Includes base fee & priority fee in this limit. */
    maxFeePerGas?: string;
    /** @description Optional custom gas settings. */
    maxPriorityFeePerGas?: string;
    /** @description When true, will use permit to avoid approvals. */
    usePermit?: boolean;
    /**
     * @description Choose a specific swapping provider when buying in a different currency (defaults to `uniswap`)
     * @default uniswap
     * @enum {string}
     */
    swapProvider?: "uniswap" | "1inch";
    /** @enum {string} */
    executionMethod?: "seaport-intent";
    /** @description Referrer address (where supported) */
    referrer?: string;
    /** @description Mint comment (where suported) */
    comment?: string;
    /** @description Optional X2Y2 API key used for filling. */
    x2y2ApiKey?: string;
    /** @description Optional OpenSea API key used for filling. You don't need to pass your own key, but if you don't, you are more likely to be rate-limited. */
    openseaApiKey?: string;
    /** @description Advanced use case to pass personal blurAuthToken; the API will generate one if left empty. */
    blurAuth?: string;
  };
  /** @description The details of the endpoint for checking the status of the step */
  check: {
    endpoint: string;
    /** @enum {string} */
    method: "POST";
    body?: string;
  };
  Model476: {
    /**
     * @description Response is `complete` or `incomplete`.
     * @enum {string}
     */
    status: "complete" | "incomplete";
    tip?: string;
    orderIds?: definitions["sampleImages"];
    data?: definitions["metadata"];
    /** @description Approximation of gas used (only applies to `transaction` items) */
    gasEstimate?: number;
    check?: definitions["check"];
  };
  Model477: definitions["Model476"][];
  Model478: {
    id: string;
    action: string;
    description: string;
    /** @enum {string} */
    kind: "signature" | "transaction";
    items: definitions["Model477"];
  };
  Model479: definitions["Model478"][];
  Model480: {
    message?: string;
    orderId?: string;
  };
  Model481: definitions["Model480"][];
  buyIn: definitions["price"][];
  Model482: {
    kind?: string;
    recipient?: string;
    bps?: number;
    amount?: number;
    rawAmount?: string;
  };
  /** @description Can be marketplace fees or royalties */
  builtInFees: definitions["Model482"][];
  /** @description Can be referral fees. */
  Model483: definitions["Model482"][];
  Model484: {
    orderId?: string;
    contract?: string;
    tokenId?: string;
    quantity?: number;
    source?: string;
    currency?: string;
    currencySymbol?: string;
    currencyDecimals?: number;
    quote?: number;
    rawQuote?: string;
    buyInCurrency?: string;
    buyInCurrencySymbol?: string;
    buyInCurrencyDecimals?: number;
    buyInQuote?: number;
    buyInRawQuote?: string;
    buyIn?: definitions["buyIn"];
    totalPrice?: number;
    totalRawPrice?: string;
    gasCost?: string;
    builtInFees?: definitions["builtInFees"];
    feesOnTop?: definitions["Model483"];
    /** @description Chain id buying from */
    fromChainId?: number;
  };
  Model485: definitions["Model484"][];
  Model486: {
    itemIndex: number;
    maxQuantity?: string;
  };
  maxQuantities: definitions["Model486"][];
  getExecuteBuyV7Response: {
    requestId?: string;
    steps?: definitions["Model479"];
    errors?: definitions["Model481"];
    path?: definitions["Model485"];
    maxQuantities?: definitions["maxQuantities"];
    gasEstimate?: number;
  };
  Model487: string[];
  Model488: {
    orderIds?: definitions["Model487"];
    maker?: string;
    /** @enum {string} */
    orderKind?:
      | "blur"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "looks-rare-v2"
      | "zeroex-v4-erc721"
      | "zeroex-v4-erc1155"
      | "payment-processor-v2"
      | "rarible"
      | "alienswap";
    token?: string;
    blurAuth?: string;
    /** @description Optional. Set custom gas price */
    maxFeePerGas?: string;
    /** @description Optional. Set custom gas price */
    maxPriorityFeePerGas?: string;
  };
  Model489: {
    /** @enum {string} */
    status: "complete" | "incomplete";
    tip?: string;
    data?: definitions["metadata"];
  };
  Model490: definitions["Model489"][];
  Model491: {
    id: string;
    action: string;
    description: string;
    /** @enum {string} */
    kind: "signature" | "transaction";
    items: definitions["Model490"];
  };
  Model492: definitions["Model491"][];
  getExecuteCancelV3Response: {
    steps?: definitions["Model492"];
  };
  /** @description Ids of the orders to cancel */
  Model493: string[];
  Model494: {
    orderIds: definitions["Model493"];
    /**
     * @description Exchange protocol used to bulk cancel order. Example: `seaport-v1.5`
     * @enum {string}
     */
    orderKind:
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "alienswap"
      | "blur-bid"
      | "payment-processor-v2";
  };
  Model495: {
    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token: string;
    /** @description Quantity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5` */
    quantity?: number;
    /** @description Amount seller is willing to sell for in wei. Example: `1000000000000000000` */
    weiPrice: string;
    /**
     * @description Exchange protocol used to create order. Example: `seaport-v1.5`
     * @default seaport-v1.5
     * @enum {string}
     */
    orderKind?:
      | "looks-rare"
      | "looks-rare-v2"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2";
    /**
     * @description Orderbook where order is placed. Example: `Reservoir`
     * @default reservoir
     * @enum {string}
     */
    orderbook?: "opensea" | "looks-rare" | "reservoir" | "x2y2";
    /** @description Optional API key for the target orderbook */
    orderbookApiKey?: string;
    /**
     * @description If true, royalties will be automatically included.
     * @default true
     */
    automatedRoyalties?: boolean;
    /** @description The royalty percentage to pay. Only relevant when using automated royalties. */
    royaltyBps?: number;
    fees?: definitions["fees"];
    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */
    listingTime?: string;
    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */
    expirationTime?: string;
    /** @description Optional. Random string to make the order unique */
    salt?: string;
    /** @description Optional. Set a custom nonce */
    nonce?: string;
    /** @default 0x0000000000000000000000000000000000000000 */
    currency?: string;
  };
  Model496: definitions["Model495"][];
  Model497: {
    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    maker: string;
    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the "order source" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */
    source?: string;
    params?: definitions["Model496"];
  };
  getExecuteListV4Response: {
    steps?: definitions["Model446"];
  };
  alienswap: {
    useOffChainCancellation: boolean;
    replaceOrderId?: string;
  };
  /** @description Additional options. */
  Model498: {
    "seaport-v1.4"?: definitions["seaport-v1.4"];
    "seaport-v1.5"?: definitions["seaport-v1.4"];
    "payment-processor-v2"?: definitions["payment-processor-v2"];
    alienswap?: definitions["alienswap"];
  };
  Model499: {
    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token: string;
    /** @description Quantity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5` */
    quantity?: number;
    /** @description Amount seller is willing to sell for in the smallest denomination for the specific currency. Example: `1000000000000000000` */
    weiPrice: string;
    /** @description Amount seller is willing to sell for Dutch auction in the largest denomination for the specific currency. Example: `2000000000000000000` */
    endWeiPrice?: string;
    /**
     * @description Exchange protocol used to create order. Example: `seaport-v1.5`
     * @default seaport-v1.5
     * @enum {string}
     */
    orderKind?:
      | "blur"
      | "looks-rare"
      | "looks-rare-v2"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2"
      | "alienswap"
      | "payment-processor"
      | "payment-processor-v2";
    options?: definitions["Model498"];
    /**
     * @description Orderbook where order is placed. Example: `Reservoir`
     * @default reservoir
     * @enum {string}
     */
    orderbook?: "blur" | "opensea" | "looks-rare" | "reservoir" | "x2y2";
    /** @description Optional API key for the target orderbook */
    orderbookApiKey?: string;
    /**
     * @description If true, royalty amounts and recipients will be set automatically.
     * @default true
     */
    automatedRoyalties?: boolean;
    /** @description Set a maximum amount of royalties to pay, rather than the full amount. Only relevant when using automated royalties. 1 BPS = 0.01% Note: OpenSea does not support values below 50 bps. */
    royaltyBps?: number;
    fees?: definitions["Model447"];
    marketplaceFees?: definitions["marketplaceFees"];
    customRoyalties?: definitions["customRoyalties"];
    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */
    listingTime?: string;
    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */
    expirationTime?: string;
    /** @description Optional. Random string to make the order unique */
    salt?: string;
    /** @description Optional. Set a custom nonce */
    nonce?: string;
    /** @default 0x0000000000000000000000000000000000000000 */
    currency?: string;
    /** @description Address of wallet taking the private order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    taker?: string;
  };
  Model500: definitions["Model499"][];
  Model501: {
    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    maker: string;
    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the "order source" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */
    source?: string;
    /** @description Advanced use case to pass personal blurAuthToken; the API will generate one if left empty. */
    blurAuth?: string;
    params?: definitions["Model500"];
  };
  Model502: {
    /**
     * @description Returns `complete` or `incomplete`.
     * @enum {string}
     */
    status: "complete" | "incomplete";
    tip?: string;
    data?: definitions["metadata"];
    orderIndexes?: definitions["floorAskPrices"];
  };
  Model503: definitions["Model502"][];
  Model504: {
    /** @description Returns `nft-approval` or `order-signature` */
    id: string;
    /**
     * @description Returns `request`, `signature`, or `transaction`.
     * @enum {string}
     */
    kind: "request" | "signature" | "transaction";
    action: string;
    description: string;
    items: definitions["Model503"];
  };
  Model505: definitions["Model504"][];
  getExecuteListV5Response: {
    steps?: definitions["Model505"];
    errors?: definitions["errors"];
  };
  Model506: {
    abiType: string;
    abiValue: string;
  };
  Model507: definitions["Model506"][];
  Model508: {
    signature: string;
    params?: definitions["Model507"];
  };
  tx: {
    to: string;
    data?: definitions["Model508"];
  };
  details: {
    tx?: definitions["tx"];
  };
  /** @description Optional custom details to use for minting. */
  custom: {
    contract: string;
    price: string;
    details: definitions["details"];
  };
  Model509: {
    /** @description Collection to mint. */
    collection?: string;
    /** @description Token to mint. */
    token?: string;
    custom?: definitions["custom"];
    /** @description Quantity of tokens to mint. */
    quantity?: number;
  };
  /** @description List of items to mint. */
  Model510: definitions["Model509"][];
  /**
   * @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when minting.
   * Unless overridden via the `currency` param, the currency used for any fees on top matches the buy-in currency detected by the backend.
   * Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`
   */
  Model511: string[];
  Model512: {
    items: definitions["Model510"];
    /** @description Address of wallet minting (receiver of the NFT). */
    taker: string;
    /** @description Address of wallet relaying the mint transaction(s) (paying for the NFT). */
    relayer?: string;
    /**
     * @description If true, only the path will be returned.
     * @default false
     */
    onlyPath?: boolean;
    alternativeCurrencies?: definitions["alternativeCurrencies"];
    /** @description The chain id of the purchase currency. */
    currencyChainId?: number;
    /** @description Filling source used for attribution. Example: `reservoir.market` */
    source?: string;
    feesOnTop?: definitions["Model511"];
    /**
     * @description If true, any off-chain or on-chain errors will be skipped.
     * @default false
     */
    partial?: boolean;
    /**
     * @description If true, balance checks will be skipped.
     * @default false
     */
    skipBalanceCheck?: boolean;
    /** @description Referrer address (where supported). */
    referrer?: string;
    /** @description Mint comment (where suported). */
    comment?: string;
  };
  Model513: {
    orderId?: string;
    contract?: string;
    tokenId?: string;
    quantity?: number;
    source?: string;
    currency?: string;
    currencySymbol?: string;
    currencyDecimals?: number;
    quote?: number;
    rawQuote?: string;
    totalPrice?: number;
    totalRawPrice?: string;
    buyIn?: definitions["buyIn"];
    gasCost?: string;
    feesOnTop?: definitions["Model483"];
    /** @description Chain id buying from */
    fromChainId?: number;
  };
  Model514: definitions["Model513"][];
  postExecuteMintV1Response: {
    requestId?: string;
    steps?: definitions["Model479"];
    errors?: definitions["Model481"];
    path?: definitions["Model514"];
    maxQuantities?: definitions["maxQuantities"];
    gasEstimate?: number;
  };
  Model515: {
    /** @description Id of the permit */
    id: string;
    /** @description Whether to persist the permit or not */
    persist?: boolean;
  };
  Model516: {
    /** @description Id of the pre-signature */
    id: string;
  };
  Model517: {
    /** @description Request id of the associate execute API request */
    requestId: string;
    /** @description Step id of the relevant execute item */
    stepId: string;
    /** @description Associated transaction hash */
    txHash?: string;
    /** @description Associated error message */
    errorMessage?: string;
  };
  postExecuteResultsV1Response: {
    message: string;
  };
  Model518: {
    /** @enum {string} */
    kind:
      | "opensea"
      | "looks-rare"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2";
    data: definitions["metadata"];
  };
  /**
   * @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling.
   * The currency used for any fees on top matches the accepted bid's currency.
   * Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`
   */
  Model519: string[];
  Model520: {
    orderId?: string;
    rawOrder?: definitions["Model518"];
    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token: string;
    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
    taker: string;
    /** @description Quantity of tokens user is selling. Only compatible when selling a single ERC1155 token. Example: `5` */
    quantity?: number;
    /** @description Filling source used for attribution. Example: `reservoir.market` */
    source?: string;
    feesOnTop?: definitions["Model519"];
    /**
     * @description If true, only the path will be returned.
     * @default false
     */
    onlyPath?: boolean;
    /** @default false */
    normalizeRoyalties?: boolean;
    /**
     * @description If true, do not filter out inactive orders (only relevant for order id filtering).
     * @default false
     */
    allowInactiveOrderIds?: boolean;
    /**
     * @description Exclude orders that can only be filled by EOAs, to support filling with smart contracts.
     * @default false
     */
    excludeEOA?: boolean;
    /** @description Optional. Set custom gas price. */
    maxFeePerGas?: string;
    /** @description Optional. Set custom gas price. */
    maxPriorityFeePerGas?: string;
    /** @description Override the X2Y2 API key used for filling. */
    x2y2ApiKey?: string;
  };
  /** @description Optional raw order to sell into. */
  Model521: {
    /** @enum {string} */
    kind?:
      | "blur-partial"
      | "opensea"
      | "looks-rare"
      | "zeroex-v4"
      | "seaport"
      | "seaport-v1.4"
      | "seaport-v1.5"
      | "x2y2"
      | "rarible"
      | "sudoswap"
      | "nftx";
    data?: definitions["metadata"];
  };
  Model522: {
    /** @description Token to sell. */
    token: string;
    /**
     * @description Quantity of tokens to sell.
     * @default 1
     */
    quantity?: number;
    /** @description Optional order id to sell into. */
    orderId?: string;
    rawOrder?: definitions["Model521"];
    /** @description Only consider orders from this source. */
    exactOrderSource?: string;
    exclusions?: definitions["exclusions"];
  };
  /** @description List of items to sell. */
  Model523: definitions["Model522"][];
  /**
   * @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling.
   * The currency used for any fees on top is always the wrapped native currency of the chain.
   * Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`
   */
  Model524: string[];
  Model525: {
    items: definitions["Model523"];
    /** @description Address of wallet filling. */
    taker: string;
    /** @description Filling source used for attribution. */
    source?: string;
    feesOnTop?: definitions["Model524"];
    /**
     * @description If true, only the filling path will be returned.
     * @default false
     */
    onlyPath?: boolean;
    /**
     * @description Charge any missing royalties.
     * @default false
     */
    normalizeRoyalties?: boolean;
    /**
     * @description Exclude orders that can only be filled by EOAs, to support filling with smart contracts.
     * @default false
     */
    excludeEOA?: boolean;
    /**
     * @description If true, inactive orders will not be skipped over (only relevant when filling via a specific order id).
     * @default false
     */
    allowInactiveOrderIds?: boolean;
    /**
     * @description If true, any off-chain or on-chain errors will be skipped.
     * @default false
     */
    partial?: boolean;
    /**
     * @description If true, filling will be forced to use the common 'approval + transfer' method instead of the approval-less 'on-received hook' method
     * @default false
     */
    forceRouter?: boolean;
    /** @description Optional custom gas settings. Includes base fee & priority fee in this limit. */
    maxFeePerGas?: string;
    /** @description Optional custom gas settings. */
    maxPriorityFeePerGas?: string;
    /** @description Optional X2Y2 API key used for filling. */
    x2y2ApiKey?: string;
    /** @description Optional OpenSea API key used for filling. You don't need to pass your own key, but if you don't, you are more likely to be rate-limited. */
    openseaApiKey?: string;
    /** @description Optional Blur auth used for filling */
    blurAuth?: string;
  };
  Model526: {
    /**
     * @description Returns `complete` or `incomplete`.
     * @enum {string}
     */
    status: "complete" | "incomplete";
    tip?: string;
    orderIds?: definitions["sampleImages"];
    data?: definitions["metadata"];
    /** @description Approximation of gas used (only applies to `transaction` items) */
    gasEstimate?: number;
  };
  Model527: definitions["Model526"][];
  Model528: {
    /** @description Returns `auth` or `nft-approval` */
    id: string;
    action: string;
    description: string;
    /**
     * @description Returns `signature` or `transaction`.
     * @enum {string}
     */
    kind: "signature" | "transaction";
    items: definitions["Model527"];
  };
  Model529: definitions["Model528"][];
  Model530: {
    orderId?: string;
    contract?: string;
    tokenId?: string;
    quantity?: number;
    source?: string;
    currency?: string;
    currencySymbol?: string;
    currencyDecimals?: number;
    quote?: number;
    rawQuote?: string;
    totalPrice?: number;
    totalRawPrice?: string;
    builtInFees?: definitions["builtInFees"];
    feesOnTop?: definitions["Model483"];
  };
  Model531: definitions["Model530"][];
  getExecuteSellV7Response: {
    requestId?: string;
    steps?: definitions["Model529"];
    errors?: definitions["Model481"];
    path?: definitions["Model531"];
  };
  Model532: {
    /** @enum {string} */
    kind: "seaport-intent";
    order: string;
  };
  status: {
    endpoint: string;
    /** @enum {string} */
    method: "POST";
    body?: string;
  };
  postExecuteSolveV1Response: {
    status?: definitions["status"];
  };
  Model533: {
    /**
     * @description Execution kind
     * @enum {string}
     */
    kind:
      | "cross-chain-intent"
      | "cross-chain-transaction"
      | "seaport-intent"
      | "transaction";
    /** @description The id of the execution (eg. transaction / order / intent hash) */
    id: string;
    /** @description Chain id where the action is happening (only relevant for 'cross-chain-transaction' actions) */
    chainId?: number;
  };
  txHashes: string[];
  postExecuteStatusV1Response: {
    /** @enum {string} */
    status: "unknown" | "pending" | "received" | "success" | "failure";
    details?: string;
    txHashes?: definitions["txHashes"];
    time?: number;
  };
  Model534: {
    token: string;
    /** @default 1 */
    quantity?: number;
  };
  Model535: definitions["Model534"][];
  Model536: {
    from: string;
    to: string;
    items?: definitions["Model535"];
  };
  Model537: {
    /**
     * @description Returns `complete` or `incomplete`.
     * @enum {string}
     */
    status: "complete" | "incomplete";
    data?: definitions["metadata"];
  };
  Model538: definitions["Model537"][];
  Model539: {
    /** @description Returns `nft-approval` or `transfer` */
    id: string;
    /**
     * @description Returns `transaction`
     * @enum {string}
     */
    kind: "transaction";
    action: string;
    description: string;
    items: definitions["Model538"];
  };
  Model540: definitions["Model539"][];
  postExecuteTransferV1Response: {
    steps?: definitions["Model540"];
  };
  /** @description Array of tokens to disable or reenable metadata for. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
  Model541: string[];
  Model542: {
    tokens: definitions["Model541"];
    /**
     * @description Whether to disable or reenable the metadata. Defaults to true (disable)
     * @default true
     */
    disable?: boolean;
  };
  Model543: {
    /** @description The token to update the flag status for. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token: string;
    /**
     * @description 0 - Token is not flagged, 1 - Token is flagged
     * @enum {number}
     */
    flag: 0 | 1;
  };
  Model544: {
    /** @description Refresh the given token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
    token: string;
    /**
     * @description If true, only liquidity data will be refreshed.
     * @default false
     */
    liquidityOnly?: boolean;
    /**
     * @description If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.
     * @default false
     */
    overrideCoolDown?: boolean;
  };
  Model545: {
    token?: string;
    /**
     * @default v6
     * @enum {string}
     */
    router?: "v5" | "v6";
  };
  Model546: {
    token?: string;
  };
  /** @description Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
  Model547: string[];
  Model548: {
    tokens: definitions["Model547"];
    /**
     * @description API to update the spam status of a token
     * @default true
     */
    spam?: boolean;
  };
  Model549: {
    bps?: number;
    recipient?: string;
  };
  Model550: definitions["Model549"][];
  /** @description Params that can be passed in order to override existing ones, to disable override pass null */
  Model551: {
    name?: string;
    description?: string;
    imageUrl?: string;
    twitterUrl?: string;
    discordUrl?: string;
    externalUrl?: string;
    royalties?: definitions["Model550"];
  };
  Model552: {
    /** @enum {string} */
    kind: "seaport-intent";
  };
  postExecuteSolveCapacityV1Response: {
    maxPricePerItem: string;
    maxItems: number;
  };
  Model553: {
    id: string;
    /** @default false */
    skipRevalidation?: boolean;
  };
}

export interface operations {
  getAdminGetmarketplaces: {
    responses: {
      /** Successful */
      200: {
        schema: definitions["getMarketplacesv1Resp"];
      };
    };
  };
  getAdminOpenapi: {
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getAdminRatelimitrules: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      query: {
        /** The route to get rules for */
        route?: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getAssetsV1: {
    parameters: {
      query: {
        asset: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getAttributesV1: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesV1Response"];
      };
    };
  };
  /** Get detailed information about a single collection, including real-time stats. */
  getCollectionV1: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id?: string;
        /** Filter to a particular slug, e.g. `boredapeyachtclub` */
        slug?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionV1Response"];
      };
    };
  };
  /** Get detailed information about a single collection, including real-time stats. */
  getCollectionV2: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id?: string;
        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */
        slug?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionV2Response"];
      };
    };
  };
  /** Get detailed information about a single collection, including real-time stats. */
  getCollectionV3: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id?: string;
        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */
        slug?: string;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionV3Response"];
      };
    };
  };
  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
  getCollectionsV1: {
    parameters: {
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Search for collections that match a string, e.g. `bored` */
        name?: string;
        /** Filter to a particular slug, e.g. `boredapeyachtclub` */
        slug?: string;
        sortBy?: "1DayVolume" | "allTimeVolume";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsV1Response"];
      };
    };
  };
  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
  getCollectionsV2: {
    parameters: {
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Search for collections that match a string, e.g. `bored` */
        name?: string;
        /** Filter to a particular slug, e.g. `boredapeyachtclub` */
        slug?: string;
        sortBy?: "1DayVolume" | "7DayVolume" | "30DayVolume" | "allTimeVolume";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsV2Response"];
      };
    };
  };
  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
  getCollectionsV3: {
    parameters: {
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Search for collections that match a string, e.g. `bored` */
        name?: string;
        /** Filter to a particular slug, e.g. `boredapeyachtclub` */
        slug?: string;
        sortBy?: "1DayVolume" | "7DayVolume" | "30DayVolume" | "allTimeVolume";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsV3Response"];
      };
    };
  };
  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */
  getCollectionsV4: {
    parameters: {
      query: {
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        contract?: string[] | string;
        /** Search for collections that match a string. Example: `bored` */
        name?: string;
        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */
        slug?: string;
        /** Order the items are returned in the response. */
        sortBy?: "1DayVolume" | "7DayVolume" | "30DayVolume" | "allTimeVolume";
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsV4Response"];
      };
    };
  };
  /** Use this API to explore a collectionâ€™s metadata and statistics (sales, volume, etc). */
  getCollectionsV5: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id?: string;
        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */
        slug?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        contract?: string[] | string;
        /** Search for collections that match a string. Example: `bored` */
        name?: string;
        /** Maximum floor price of the collection */
        maxFloorAskPrice?: number;
        /** Minumum floor price of the collection */
        minFloorAskPrice?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, attributes will be included in the response. Must filter by `id` or `slug` to a particular collection. */
        includeAttributes?: boolean;
        /** If true, sales count (1 day, 7 day, 30 day, all time) will be included in the response. Must filter by `id` or `slug` to a particular collection. */
        includeSalesCount?: boolean;
        /** If true, mint data for the collection will be included in the response. */
        includeMintStages?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, return the non flagged floor ask. Supported only when `normalizeRoyalties` is false. */
        useNonFlaggedFloorAsk?: boolean;
        /** Order the items are returned in the response. Options are `#DayVolume`, `createdAt`, or `floorAskPrice` */
        sortBy?:
          | "1DayVolume"
          | "7DayVolume"
          | "30DayVolume"
          | "allTimeVolume"
          | "createdAt"
          | "floorAskPrice";
        /** Amount of items returned in response. Default and max limit is 20. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsV5Response"];
      };
    };
  };
  /** Use this API to explore a collection's metadata and statistics (sales, volume, etc). */
  getCollectionsV6: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id?: string;
        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */
        slug?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        contract?: string[] | string;
        /** Filter by creator */
        creator?: string;
        /** Search for collections that match a string. Example: `bored` */
        name?: string;
        /** Maximum floor price of the collection */
        maxFloorAskPrice?: number;
        /** Minumum floor price of the collection */
        minFloorAskPrice?: number;
        /** If true, attributes will be included in the response. Must filter by `id` or `slug` to a particular collection. */
        includeAttributes?: boolean;
        /** If true, sales count (1 day, 7 day, 30 day, all time) will be included in the response. Must filter by `id` or `slug` to a particular collection. */
        includeSalesCount?: boolean;
        /** If true, mint data for the collection will be included in the response. */
        includeMintStages?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, return the non flagged floor ask. Supported only when `normalizeRoyalties` is false. */
        useNonFlaggedFloorAsk?: boolean;
        /** Order the items are returned in the response. Options are `#DayVolume`, `createdAt`, or `floorAskPrice` */
        sortBy?:
          | "1DayVolume"
          | "7DayVolume"
          | "30DayVolume"
          | "allTimeVolume"
          | "createdAt"
          | "floorAskPrice";
        /** Amount of items returned in response. Default and max limit is 20. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsV6Response"];
      };
    };
  };
  /** Use this API to explore a collection's metadata and statistics (sales, volume, etc). */
  getCollectionsV7: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id?: string;
        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */
        slug?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        contract?: string[] | string;
        /** Filter by creator */
        creator?: string;
        /** Search for collections that match a string. Example: `bored` */
        name?: string;
        /** Maximum floor price of the collection */
        maxFloorAskPrice?: number;
        /** Minumum floor price of the collection */
        minFloorAskPrice?: number;
        /** If true, attributes will be included in the response. Must filter by `id` or `slug` to a particular collection. */
        includeAttributes?: boolean;
        /** If true, sales count (1 day, 7 day, 30 day, all time) will be included in the response. Must filter by `id` or `slug` to a particular collection. */
        includeSalesCount?: boolean;
        /** If true, mint data for the collection will be included in the response. */
        includeMintStages?: boolean;
        /** If true, security configuration data (e.g. ERC721C configuration) will be included in the response. */
        includeSecurityConfigs?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, return the non flagged floor ask. Supported only when `normalizeRoyalties` is false. */
        useNonFlaggedFloorAsk?: boolean;
        /** Order the items are returned in the response. Options are `#DayVolume`, `createdAt`, `updatedAt`, or `floorAskPrice` */
        sortBy?:
          | "1DayVolume"
          | "7DayVolume"
          | "30DayVolume"
          | "allTimeVolume"
          | "createdAt"
          | "updatedAt"
          | "floorAskPrice";
        sortDirection?: string;
        /** Amount of items returned in response. Default and max limit is 20, unless sorting by `updatedAt` which has a max limit of 1000. */
        limit?: number;
        /** If true, will filter any collections marked as spam. */
        excludeSpam?: boolean;
        /** When sorting by `updatedAt`, the start timestamp you want to filter on (UTC). */
        startTimestamp?: number;
        /** When sorting by `updatedAt`, the end timestamp you want to filter on (UTC). */
        endTimestamp?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Input any ERC20 address to return result in given currency. Applies to `topBid` and `floorAsk`. */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsV7Response"];
      };
    };
  };
  /**
   * This API can be used to check the status of cross posted listings and bids.
   *
   *  Input your `crossPostingOrderId` into the `ids` param and submit for the status.
   *
   *  The `crossPostingOrderId` is returned in the `execute/bids` and `execute/asks` response as well as the `onProgess` callback for the SDK.
   *
   *  Note: ReservoirKit does not return a `crossPostingOrderId`.
   */
  getCrosspostingordersV1: {
    parameters: {
      query: {
        ids?: number[] | string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCrossPostingOrdersV1Response"];
      };
    };
  };
  /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */
  getOrdersV1: {
    parameters: {
      query: {
        id?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersV1Response"];
      };
    };
  };
  postOrdersV1: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model429"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */
  getOrdersV2: {
    parameters: {
      query: {
        id?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract. */
        tokenSetId?: string;
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersV2Response"];
      };
    };
  };
  /** Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute. */
  getOwnersV1: {
    parameters: {
      query: {
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOwnersV1Response"];
      };
    };
  };
  /** Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute. */
  getOwnersV2: {
    parameters: {
      query: {
        /** Filter to a particular collection set id. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. Max limit is 500. */
        limit?: number;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOwnersV2Response"];
      };
    };
  };
  /** Get recent sales for a contract or token. */
  getSalesV1: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSalesV1Response"];
      };
    };
  };
  /** Get recent sales for a contract or token. */
  getSalesV2: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSalesV2Response"];
      };
    };
  };
  /** Get recent sales for a contract or token. Note: this API is returns rich metadata, and has advanced filters, so is only designed for small amounts of recent sales. If you want access to sales in bulk, use the `Aggregator > Bulk Sales` API. */
  getSalesV3: {
    parameters: {
      query: {
        contract?: string[] | string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSalesV3Response"];
      };
    };
  };
  /** Get recent sales for a contract or token. */
  getSalesV4: {
    parameters: {
      query: {
        contract?: string[] | string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** If enabled, also include token metadata in the response. */
        includeTokenMetadata?: boolean;
        /** If enabled, include sales that have been deleted. In some cases the backfilling process deletes sales that are no longer relevant or have been reverted. */
        includeDeleted?: boolean;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Order the items are returned in the response. */
        orderBy?: "price" | "time" | "updated_at";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        /** Get events after a particular unix timestamp (inclusive). Relative to the orderBy time filters. */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive). Relative to the orderBy time filters. */
        endTimestamp?: number;
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSalesV4Response"];
      };
    };
  };
  /** Get recent sales for a contract or token. Paid mints are returned in this `sales` endpoint, free mints can be found in the `/activities/` endpoints. Array of contracts max limit is 20. */
  getSalesV5: {
    parameters: {
      query: {
        contract?: string[] | string;
        /** Array of tokens. Max limit is 20. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** If enabled, also include token metadata in the response. Default is false. */
        includeTokenMetadata?: boolean;
        /** If enabled, include sales that have been deleted. In some cases the backfilling process deletes sales that are no longer relevant or have been reverted. */
        includeDeleted?: boolean;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Order the items are returned in the response. Options are `price`, `time`, and `updated_at`. Default is `time`. */
        orderBy?: "price" | "time" | "updated_at";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        /** Get events after a particular unix timestamp (inclusive). Relative to the orderBy time filters. */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive). Relative to the orderBy time filters. */
        endTimestamp?: number;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSalesV4Response"];
      };
    };
  };
  /** Get recent sales for a contract or token. Paid mints are returned in this `sales` endpoint, free mints can be found in the `/activities/` endpoints. Array of contracts max limit is 20. */
  getSalesV6: {
    parameters: {
      query: {
        contract?: string[] | string;
        /** Array of tokens. Max limit is 20. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** If enabled, also include token metadata in the response. Default is false. */
        includeTokenMetadata?: boolean;
        /** If enabled, include sales that have been deleted. In some cases the backfilling process deletes sales that are no longer relevant or have been reverted. */
        includeDeleted?: boolean;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/sales/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/sales/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Order the items are returned in the response. Options are `price`, `time`, and `updatedAt`. Default is `time`. */
        sortBy?: "price" | "time" | "updatedAt";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        /** Get events after a particular unix timestamp (inclusive). Relative to the sortBy time filters. */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive). Relative to the sortBy time filters. */
        endTimestamp?: number;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSalesV4Response"];
      };
    };
  };
  /** This API returns a list of sources */
  getSourcesV1: {
    parameters: {
      query: {
        /** Order of the items are returned in the response. */
        sortBy?: "domain" | "createdAt";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Filter to a particular domain. Example: `x2y2.io` */
        domain?: string;
        /** Amount of items returned in response. */
        limit?: number;
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSourcesV1Response"];
      };
    };
  };
  /** Get aggregate stats for a particular set (collection, attribute or single token) */
  getStatsV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getStatsV1Response"];
      };
    };
  };
  /** Get aggregate stats for a particular set (collection, attribute or single token) */
  getStatsV2: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/stats/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/stats/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getStatsV2Response"];
      };
    };
  };
  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */
  getTokensV1: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Limit to tokens that are listed for sale */
        onSale?: boolean;
        sortBy?: "tokenId" | "floorAskPrice" | "topBidValue";
        sortDirection?: "asc" | "desc";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensV1Response"];
      };
    };
  };
  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */
  getTokensV2: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        sortBy?: "floorAskPrice" | "topBidValue";
        limit?: number;
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensV2Response"];
      };
    };
  };
  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */
  getTokensV3: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        tokens?: string[] | string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        sortBy?: "floorAskPrice" | "topBidValue";
        limit?: number;
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensV3Response"];
      };
    };
  };
  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the tokens/details API */
  getTokensV4: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** Filter to a particular token set. Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685 */
        tokenSetId?: string;
        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Domain of the order source. Example `opensea.io` */
        source?: string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** Order the items are returned in the response, by default sorted by `floorAskPrice`. Not supported when filtering by `contract`. When filtering by `contract` the results are sorted by `tokenId` by default. */
        sortBy?: "floorAskPrice" | "tokenId" | "rarity";
        sortDirection?: "asc" | "desc";
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensV4Response"];
      };
    };
  };
  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */
  getTokensV5: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token by name. Example: `token #1` */
        tokenName?: string;
        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** Filter to a particular token set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract. */
        tokenSetId?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/tokens/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/tokens/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Domain of the order source. Example `opensea.io` (Only listed tokens are returned when filtering by source) */
        source?: string;
        /** Domain of the order source. Example `www.apecoinmarketplace.com`. For a native marketplace, return all tokens listed on this marketplace, even if better prices are available on other marketplaces. */
        nativeSource?: string;
        /** Get tokens with a min rarity rank (inclusive) */
        minRarityRank?: number;
        /** Get tokens with a max rarity rank (inclusive) */
        maxRarityRank?: number;
        /** Get tokens with a min floor ask price (inclusive) */
        minFloorAskPrice?: number;
        /** Get tokens with a max floor ask price (inclusive) */
        maxFloorAskPrice?: number;
        /**
         * Allowed only with collection and tokens filtering!
         * -1 = All tokens (default)
         * 0 = Non flagged tokens
         * 1 = Flagged tokens
         */
        flagStatus?: -1 | 0 | 1;
        /** Order the items are returned in the response. */
        sortBy?: "floorAskPrice" | "tokenId" | "rarity";
        sortDirection?: "asc" | "desc";
        /** Filter to tokens with a listing in a particular currency. `Example: currencies[0]: 0x0000000000000000000000000000000000000000` */
        currencies?: string[] | string;
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, attributes will be returned in the response. */
        includeAttributes?: boolean;
        /** If true, quantity filled and quantity remaining will be returned in the response. */
        includeQuantity?: boolean;
        /** If true, dynamic pricing data will be returned in the response. */
        includeDynamicPricing?: boolean;
        /** If true, a boolean indicating whether royalties were paid on a token's last sale will be returned in the response. */
        includeRoyaltiesPaid?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensV5Response"];
      };
    };
  };
  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */
  getTokensV6: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular token by name. This is case sensitive. Example: `token #1` */
        tokenName?: string;
        /** Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/tokens/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/tokens/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Domain of the order source. Example `opensea.io` (Only listed tokens are returned when filtering by source) */
        source?: string;
        /** Domain of the order source. Example `www.apecoinmarketplace.com`. For a native marketplace, return all tokens listed on this marketplace, even if better prices are available on other marketplaces. */
        nativeSource?: string;
        /** Get tokens with a min rarity rank (inclusive), no rarity rank for collections over 100k */
        minRarityRank?: number;
        /** Get tokens with a max rarity rank (inclusive), no rarity rank for collections over 100k */
        maxRarityRank?: number;
        /** Get tokens with a min floor ask price (inclusive); use native currency */
        minFloorAskPrice?: number;
        /** Get tokens with a max floor ask price (inclusive); use native currency */
        maxFloorAskPrice?: number;
        /**
         * Allowed only with collection and tokens filtering!
         * -1 = All tokens (default)
         * 0 = Non flagged tokens
         * 1 = Flagged tokens
         */
        flagStatus?: -1 | 0 | 1;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        contract?: string[] | string;
        /** Filter to a particular token set. `Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685` */
        tokenSetId?: string;
        /** Order the items are returned in the response. Options are `floorAskPrice`, `tokenId`, `rarity`, and `updatedAt`. No rarity rank for collections over 100k. */
        sortBy?: "floorAskPrice" | "tokenId" | "rarity" | "updatedAt";
        sortDirection?: "asc" | "desc";
        /** Filter to tokens with a listing in a particular currency. Max limit is 50. `Example: currencies[0]: 0x0000000000000000000000000000000000000000` */
        currencies?: string[] | string;
        /** Amount of items returned in response. Max limit is 100, except when sorting by `updatedAt` which has a limit of 1000. */
        limit?: number;
        /** When sorting by `updatedAt`, the start timestamp you want to filter on (UTC). */
        startTimestamp?: number;
        /** When sorting by `updatedAt`, the end timestamp you want to filter on (UTC). */
        endTimestamp?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, mint data for the tokens will be included in the response. */
        includeMintStages?: boolean;
        /** Exclude orders that can only be filled by EOAs, to support filling with smart contracts. defaults to false */
        excludeEOA?: boolean;
        /** If true, will filter any tokens marked as spam. */
        excludeSpam?: boolean;
        /** If true, attributes will be returned in the response. */
        includeAttributes?: boolean;
        /** If true, quantity filled and quantity remaining will be returned in the response. */
        includeQuantity?: boolean;
        /** If true, dynamic pricing data will be returned in the response. */
        includeDynamicPricing?: boolean;
        /** If true, last sale data including royalties paid will be returned in the response. */
        includeLastSale?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Input any ERC20 address to return result in given currency. Applies to `topBid` and `floorAsk`. */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensV6Response"];
      };
    };
  };
  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */
  getTokensV7: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular token by name. This is case sensitive. Example: `token #1` */
        tokenName?: string;
        /** Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/tokens/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/tokens/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Domain of the order source. Example `opensea.io` (Only listed tokens are returned when filtering by source) */
        source?: string;
        /** Domain of the order source. Example `www.apecoinmarketplace.com`. For a native marketplace, return all tokens listed on this marketplace, even if better prices are available on other marketplaces. */
        nativeSource?: string;
        /** Get tokens with a min rarity rank (inclusive), no rarity rank for collections over 100k */
        minRarityRank?: number;
        /** Get tokens with a max rarity rank (inclusive), no rarity rank for collections over 100k */
        maxRarityRank?: number;
        /** Get tokens with a min floor ask price (inclusive); use native currency */
        minFloorAskPrice?: number;
        /** Get tokens with a max floor ask price (inclusive); use native currency */
        maxFloorAskPrice?: number;
        /**
         * Allowed only with collection and tokens filtering!
         * -1 = All tokens (default)
         * 0 = Non flagged tokens
         * 1 = Flagged tokens
         */
        flagStatus?: -1 | 0 | 1;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        contract?: string[] | string;
        /** Filter to a particular token set. `Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685` */
        tokenSetId?: string;
        /** Order the items are returned in the response. Options are `floorAskPrice`, `tokenId`, `rarity`, and `updatedAt`. No rarity rank for collections over 100k. */
        sortBy?: "floorAskPrice" | "tokenId" | "rarity" | "updatedAt";
        sortDirection?: "asc" | "desc";
        /** Filter to tokens with a listing in a particular currency. Max limit is 50. `Example: currencies[0]: 0x0000000000000000000000000000000000000000` */
        currencies?: string[] | string;
        /** Amount of items returned in response. Max limit is 100, except when sorting by `updatedAt` which has a limit of 1000. */
        limit?: number;
        /** When sorting by `updatedAt`, the start timestamp you want to filter on (UTC). */
        startTimestamp?: number;
        /** When sorting by `updatedAt`, the end timestamp you want to filter on (UTC). */
        endTimestamp?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, mint data for the tokens will be included in the response. */
        includeMintStages?: boolean;
        /** Exclude orders that can only be filled by EOAs, to support filling with smart contracts. defaults to false */
        excludeEOA?: boolean;
        /** If true, will filter any tokens marked as spam. */
        excludeSpam?: boolean;
        /** If true, attributes will be returned in the response. */
        includeAttributes?: boolean;
        /** If true, quantity filled and quantity remaining will be returned in the response. */
        includeQuantity?: boolean;
        /** If true, dynamic pricing data will be returned in the response. */
        includeDynamicPricing?: boolean;
        /** If true, last sale data including royalties paid will be returned in the response. */
        includeLastSale?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Input any ERC20 address to return result in given currency. Applies to `topBid` and `floorAsk`. */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensV7Response"];
      };
    };
  };
  /** Get recent transfers for a contract or token. */
  getTransfersV2: {
    parameters: {
      query: {
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        limit?: number;
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTransfersV2Response"];
      };
    };
  };
  /** Get recent transfers for a contract or token. */
  getTransfersV3: {
    parameters: {
      query: {
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        /** Order the items are returned in the response. Options are `timestamp`, and `updated_at`. Default is `timestamp`. */
        orderBy?: "timestamp" | "updated_at";
        /** Max limit is 100. */
        limit?: number;
        continuation?: string;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTransfersV3Response"];
      };
    };
  };
  /** Get recent transfers for a contract or token. */
  getTransfersV4: {
    parameters: {
      query: {
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        /** Order the items are returned in the response. Options are `timestamp`, and `updatedAt`. Default is `timestamp`. */
        sortBy?: "timestamp" | "updatedAt";
        sortDirection?: string;
        /** Max limit is 100. */
        limit?: number;
        continuation?: string;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTransfersV3Response"];
      };
    };
  };
  getAdminGetapikeyKey: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      path: {
        /** The API key */
        key: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getApiKeyRateLimitsResponse"];
      };
    };
  };
  getAdminProvidermetadataType: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      path: {
        /** Fetch metadata for a token or collection */
        type: "token" | "collection";
      };
      query: {
        /** Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens: string[] | string;
        /** The indexing method to use */
        method?: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  /** Get the rate limits for the given API key. Note: API keys are not universal across all available chains; please make a different key for every chain. */
  getApikeysKeyRatelimits: {
    parameters: {
      path: {
        /** The API key */
        key: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["Model97"];
      };
    };
  };
  /** Get chain mint and sales stats for 1 and 7 days */
  getChainStatsV1: {
    responses: {
      /** Successful */
      200: {
        schema: definitions["getChainStatsV5Response"];
      };
    };
  };
  /** This API can be used to build a feed for a collection */
  getCollectionsActivityV4: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionActivityV4Response"];
      };
    };
  };
  /** This API can be used to build a feed for a collection */
  getCollectionsActivityV5: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Amount of items returned in response. If `includeMetadata=true` max limit is 50, otherwise max limit is 1,000. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionActivityV5Response"];
      };
    };
  };
  /** This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
  getCollectionsActivityV6: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** If true, will filter any activities marked as spam. */
        excludeSpam?: boolean;
        /** Amount of items returned. Max limit is 50 when `includedMetadata=true` otherwise max limit is 1000. */
        limit?: number;
        /** Order the items are returned in the response. The blockchain event time is `eventTimestamp`. The event time recorded is `createdAt`. */
        sortBy?: "eventTimestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** If true, metadata is included in the response. If true, max limit is 50. */
        includeMetadata?: boolean;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionActivityV6Response"];
      };
    };
  };
  /** Get date, volume, rank and sales count for each collection */
  getCollectionsDailyvolumesV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** The start timestamp you want to filter on (UTC) */
        startTimestamp?: number;
        /** The end timestamp you want to filter on (UTC) */
        endTimestamp?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getDailyVolumesV1Response"];
      };
    };
  };
  /** Get top selling and minting collections */
  getCollectionsTopsellingV1: {
    parameters: {
      query: {
        /** Start time in unix timestamp. Must be less than 2 weeks ago. defaults to 24 hours */
        startTime?: number;
        /** End time in unix timestamp. defaults to now */
        endTime?: number;
        /** Fill types to aggregate from (sale, mint, any) */
        fillType?: "sale" | "mint" | "any";
        /** Amount of items returned in response. Default is 25 and max is 50 */
        limit?: number;
        /** If true, 8 recent sales will be included in the response */
        includeRecentSales?: boolean;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTopSellingCollectionsV1Response"];
      };
    };
  };
  /** Get top selling and minting collections */
  getCollectionsTopsellingV2: {
    parameters: {
      query: {
        /** Time window to aggregate. */
        period?: "5m" | "10m" | "30m" | "1h" | "6h" | "1d" | "24h";
        /** Fill types to aggregate from (sale, mint, any) */
        fillType?: "sale" | "mint" | "any";
        /** Amount of items returned in response. Default is 25 and max is 50 */
        limit?: number;
        sortBy?: "volume" | "sales";
        /** If true, 8 recent sales will be included in the response */
        includeRecentSales?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, return the non flagged floor ask. Supported only when `normalizeRoyalties` is false. */
        useNonFlaggedFloorAsk?: boolean;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTopSellingCollectionsV2Response"];
      };
    };
  };
  /** Get top selling and minting collections */
  getCollectionsTrendingV1: {
    parameters: {
      query: {
        /** Time window to aggregate. */
        period?:
          | "5m"
          | "10m"
          | "30m"
          | "1h"
          | "6h"
          | "1d"
          | "24h"
          | "7d"
          | "30d";
        /** Amount of items returned in response. Default is 50 and max is 1000. Expected to be sorted and filtered on client side. */
        limit?: number;
        sortBy?: "volume" | "sales";
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, return the non flagged floor ask. Supported only when `normalizeRoyalties` is false. */
        useNonFlaggedFloorAsk?: boolean;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTrendingCollectionsV1Response"];
      };
    };
  };
  /** Get top trending mints */
  getCollectionsTrendingmintsV1: {
    parameters: {
      query: {
        /** Time window to aggregate. */
        period?: "5m" | "10m" | "30m" | "1h" | "2h" | "6h" | "24h";
        /** The type of the mint (free/paid). */
        type?: "free" | "paid" | "any";
        /** Amount of items returned in response. Default is 50 and max is 50. Expected to be sorted and filtered on client side. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["get-trending-mintsV1Response"];
      };
    };
  };
  /** Get detailed information about a single collection, including real-time stats. */
  getCollectionsCollectionorslugV1: {
    parameters: {
      path: {
        collectionOrSlug: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionDeprecatedV1Response"];
      };
    };
  };
  /** Convert an amount in one currency to another */
  getCurrenciesConversionV1: {
    parameters: {
      query: {
        /** Currency address or fiat symbol to convert from */
        from?: string;
        /** Currency address or fiat symbol to convert to */
        to?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCurrencyConversionV1Response"];
      };
    };
  };
  /** Get updates any time an asks status changes */
  getEventsAsksV2: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAsksEventsV2Response"];
      };
    };
  };
  /**
   * Every time an ask status changes, an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new listing at a lower price
   *
   * - `expiry` > the previous best listing expired
   *
   * - `sale` > the previous best listing was filled
   *
   * - `cancel` > the previous best listing was canceled
   *
   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
   *
   * - `approval-change` > the best listing was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Note: Private listings (asks) will not appear in the results.
   */
  getEventsAsksV3: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Max is 1000 */
        limit?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAsksEventsV3Response"];
      };
    };
  };
  /** Get updates any time a bid status changes */
  getEventsBidsV1: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, bid criteria is included in the response. */
        includeCriteria?: boolean;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getBidEventsV1Response"];
      };
    };
  };
  /** Get updates any time a bid status changes */
  getEventsBidsV2: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getBidEventsV2Response"];
      };
    };
  };
  /**
   * Every time a bid status changes, an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new offer at a lower price
   *
   * - `expiry` > the previous best offer expired
   *
   * - `sale` > the previous best offer was filled
   *
   * - `cancel` > the previous best offer was canceled
   *
   * - `balance-change` > the best offer was invalidated due to no longer owning the NFT
   *
   * - `approval-change` > the best offer was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Some considerations to keep in mind
   *
   * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
   *
   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
   */
  getEventsBidsV3: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getBidEventsV3Response"];
      };
    };
  };
  /** Get updates any time an order status changes */
  getEventsOrdersV1: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrderEventsV1Response"];
      };
    };
  };
  /** Cancel an existing order on any marketplace */
  getExecuteCancelV2: {
    parameters: {
      query: {
        /** Order Id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        id: string;
        /** Optional. Set custom gas price */
        maxFeePerGas?: string;
        /** Optional. Set custom gas price */
        maxPriorityFeePerGas?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteCancelV2Response"];
      };
    };
  };
  /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */
  getLiquidityUsersV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user?: string;
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUsersLiquidityV1Response"];
      };
    };
  };
  /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */
  getLiquidityUsersV2: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUsersLiquidityV1Response"];
      };
    };
  };
  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersAllV1: {
    parameters: {
      query: {
        id?: string;
        /** Filter to a source by domain. Example: `opensea.io` */
        source?: string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** Sell or buy side. */
        side?: "sell" | "buy";
        /** If true, metadata will be included in the response. */
        includeMetadata?: boolean;
        /** If true, raw data will be included in the response. */
        includeRawData?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersAllV1Response"];
      };
    };
  };
  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersAllV2: {
    parameters: {
      query: {
        id?: string;
        /** Filter to a source by domain. Example: `opensea.io` */
        source?: string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** Sell or buy side. */
        side?: "sell" | "buy";
        /** If true, metadata will be included in the response. */
        includeMetadata?: boolean;
        /** If true, raw data will be included in the response. */
        includeRawData?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersAllV2Response"];
      };
    };
  };
  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersAsksV1: {
    parameters: {
      query: {
        /** Filter to a token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487` */
        maker?: string;
        /** Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487` */
        contract?: string;
        /**
         * `active` = currently valid, `inactive` = temporarily invalid
         *
         * Available when filtering by maker, otherwise only valid orders will be returned
         */
        status?: "active" | "inactive";
        sortBy?: "price" | "createdAt";
        continuation?: string;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersAsksV1Response"];
      };
    };
  };
  /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersAsksV2: {
    parameters: {
      query: {
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        contracts?: string[] | string;
        /**
         * active = currently valid, inactive = temporarily invalid
         *
         * Available when filtering by maker, otherwise only valid orders will be returned
         */
        status?: string;
        /** When true, private orders are included in the response. */
        includePrivate?: boolean;
        /** Order the items are returned in the response. */
        sortBy?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersAsksV1Response"];
      };
    };
  };
  /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersAsksV3: {
    parameters: {
      query: {
        ids?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        contracts?: string[] | string;
        /**
         * active = currently valid
         * inactive = temporarily invalid
         * expired, cancelled, filled = permanently invalid
         *
         * Available when filtering by maker, otherwise only valid orders will be returned
         */
        status?: string;
        source?: string[] | string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** If true, private orders are included in the response. */
        includePrivate?: boolean;
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** If true, raw data is included in the response. */
        includeRawData?: boolean;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */
        sortBy?: "createdAt" | "price";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersAsksV3Response"];
      };
    };
  };
  /**
   * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
   *
   *  Please mark `excludeEOA` as `true` to exclude Blur orders.
   */
  getOrdersAsksV4: {
    parameters: {
      query: {
        ids?: string[] | string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        contracts?: string[] | string;
        /**
         * activeÂª^Âº = currently valid
         * inactiveÂª^ = temporarily invalid
         * expiredÂª^, canceledÂª^, filledÂª^ = permanently invalid
         * anyÂªÂº = any status
         * Âª when an `id` is passed
         * ^ when a `maker` is passed
         * Âº when a `contract` is passed
         */
        status?: string;
        /** Filter to a source by domain. Only active listed will be returned. Example: `opensea.io` */
        source?: string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** If true, private orders are included in the response. */
        includePrivate?: boolean;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** If true, raw data is included in the response. */
        includeRawData?: boolean;
        /** If true, dynamic pricing data will be returned in the response. */
        includeDynamicPricing?: boolean;
        /** Exclude orders that can only be filled by EOAs, to support filling with smart contracts. */
        excludeEOA?: boolean;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */
        sortBy?: "createdAt" | "price" | "updatedAt";
        sortDirection?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersAsksV4Response"];
      };
    };
  };
  /**
   * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
   *
   *  To get all orders unflitered, select `sortBy` to `updatedAt`. No need to pass any other param. This will return any orders for any collections, token, attribute, etc.
   *
   *  Please mark `excludeEOA` as `true` to exclude Blur orders.
   */
  getOrdersAsksV5: {
    parameters: {
      query: {
        ids?: string[] | string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        contracts?: string[] | string;
        /**
         * activeÂª^Âº = currently valid
         * inactiveÂª^ = temporarily invalid
         * expiredÂª^, cancelledÂª^, filledÂª^ = permanently invalid
         * anyÂªÂº = any status
         * Âª when an `id` is passed
         * ^ when a `maker` is passed
         * Âº when a `contract` is passed
         */
        status?: string;
        sources?: string[] | string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** If true, private orders are included in the response. */
        includePrivate?: boolean;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** If true, raw data is included in the response. */
        includeRawData?: boolean;
        /** If true, dynamic pricing data will be returned in the response. */
        includeDynamicPricing?: boolean;
        /** Exclude orders that can only be filled by EOAs, to support filling with smart contracts. */
        excludeEOA?: boolean;
        excludeSources?: string[] | string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response. Sorting by `price` is ascending order only. */
        sortBy?: "createdAt" | "price" | "updatedAt";
        sortDirection?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersAsksV4Response"];
      };
    };
  };
  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersBidsV1: {
    parameters: {
      query: {
        /** Filter to a token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487` */
        maker?: string;
        /**
         * `active` = currently valid, `inactive` = temporarily invalid, `expired` = permanently invalid
         *
         * Available when filtering by maker, otherwise only valid orders will be returned
         */
        status?: "active" | "inactive" | "expired";
        sortBy?: "price" | "createdAt";
        continuation?: string;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersBidsV1Response"];
      };
    };
  };
  /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersBidsV2: {
    parameters: {
      query: {
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contracts?: string[] | string;
        /**
         * active = currently valid, inactive = temporarily invalid, expired = permanently invalid
         *
         * Available when filtering by maker, otherwise only valid orders will be returned
         */
        status?: string;
        /** Order the items are returned in the response. */
        sortBy?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersBidsV1Response"];
      };
    };
  };
  /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersBidsV3: {
    parameters: {
      query: {
        ids?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contracts?: string[] | string;
        /**
         * active = currently valid, inactive = temporarily invalid, expired = permanently invalid
         *
         * Available when filtering by maker, otherwise only valid orders will be returned
         */
        status?: string;
        /** Filter to a source by domain. Example: `opensea.io` */
        source?: string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** If true, raw data is included in the response. */
        includeRawData?: boolean;
        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */
        sortBy?: "createdAt" | "price";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersBidsV3Response"];
      };
    };
  };
  /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */
  getOrdersBidsV4: {
    parameters: {
      query: {
        ids?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set. Example: `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` or `token:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:1` */
        tokenSetId?: string;
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute within a collection. Example: `attribute[Mouth]=Bored` (Collection must be passed as well when filtering by attribute) */
        attribute?: `attribute[${string}]` | `attribute[${string}]`[];
        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contracts?: string[] | string;
        /**
         * active = currently valid
         * inactive = temporarily invalid
         * expired, cancelled, filled = permanently invalid
         *
         * Available when filtering by maker, otherwise only valid orders will be returned
         */
        status?: string;
        /** Filter to a source by domain. Example: `opensea.io` */
        source?: string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** If true, raw data is included in the response. */
        includeRawData?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */
        sortBy?: "createdAt" | "price";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersBidsV4Response"];
      };
    };
  };
  /**
   * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
   *
   *  There are a different kind of bids than can be returned:
   *
   * - Inputting a 'contract' will return token and attribute bids.
   *
   * - Inputting a 'collection-id' will return collection wide bids./n/n Please mark `excludeEOA` as `true` to exclude Blur orders.
   */
  getOrdersBidsV5: {
    parameters: {
      query: {
        ids?: string[] | string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract. */
        tokenSetId?: string;
        /** Filter to a particular user. Must set `source=blur.io` to reveal maker's blur bids. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        /** Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling`(Collection must be passed as well when filtering by attribute) */
        attribute?: `attribute[${string}]` | `attribute[${string}]`[];
        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contracts?: string[] | string;
        /**
         * activeÂª^Âº = currently valid
         * inactiveÂª^ = temporarily invalid
         * expiredÂª^, canceledÂª^, filledÂª^ = permanently invalid
         * anyÂªÂº = any status
         * Âª when an `id` is passed
         * ^ when a `maker` is passed
         * Âº when a `contract` is passed
         */
        status?: string;
        /** Filter to a source by domain. Only active listed will be returned. Must set `rawData=true` to reveal individual bids when `source=blur.io`. Example: `opensea.io` */
        source?: string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** If true, raw data is included in the response. Set `source=blur.io` and make this `true` to reveal individual blur bids. */
        includeRawData?: boolean;
        /** If true, the depth of each order is included in the response. */
        includeDepth?: boolean;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Exclude orders that can only be filled by EOAs, to support filling with smart contracts. */
        excludeEOA?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response. */
        sortBy?: "createdAt" | "price" | "updatedAt";
        sortDirection?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersBidsV5Response"];
      };
    };
  };
  /**
   * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.
   *
   *  There are a different kind of bids than can be returned:
   *
   * - To get all orders unfiltered, select `sortBy` to `updatedAt`. No need to pass any other param. This will return any orders for any collections, token, attribute, etc.
   *
   * - Inputting a 'contract' will return token and attribute bids.
   *
   * - Inputting a 'collection-id' will return collection wide bids.
   *
   * - Please mark `excludeEOA` as `true` to exclude Blur orders.
   */
  getOrdersBidsV6: {
    parameters: {
      query: {
        ids?: string[] | string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract. */
        tokenSetId?: string;
        /** Filter to a particular user. Must set `sources=blur.io` to reveal maker's blur bids. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        maker?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        /** Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling`(Collection must be passed as well when filtering by attribute) */
        attribute?: `attribute[${string}]` | `attribute[${string}]`[];
        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contracts?: string[] | string;
        /**
         * activeÂª^Âº = currently valid
         * inactiveÂª^ = temporarily invalid
         * expiredÂª^, cancelledÂª^, filledÂª^ = permanently invalid
         * anyÂªÂº = any status
         * Âª when an `id` is passed
         * ^ when a `maker` is passed
         * Âº when a `contract` is passed
         */
        status?: string;
        sources?: string[] | string;
        /** If true, results will filter only Reservoir orders. */
        native?: boolean;
        /** If true, private orders are included in the response. */
        includePrivate?: boolean;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** If true, raw data is included in the response. Set `sources=blur.io` and make this `true` to reveal individual blur bids. */
        includeRawData?: boolean;
        /** If true, the depth of each order is included in the response. */
        includeDepth?: boolean;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Exclude orders that can only be filled by EOAs, to support filling with smart contracts. */
        excludeEOA?: boolean;
        excludeSources?: string[] | string;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response. Sorting by `price` defaults sorting direction to descending. */
        sortBy?: "createdAt" | "price" | "updatedAt";
        sortDirection?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersBidsV5Response"];
      };
    };
  };
  /** Get the depth of a token or collection. */
  getOrdersDepthV1: {
    parameters: {
      query: {
        side: "buy" | "sell";
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`. */
        token?: string;
        /** Filter to a particular collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`. */
        collection?: string;
        /** Return all prices in this currency. */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getOrdersDepthV1Response"];
      };
    };
  };
  getOrdersExecutedV1: {
    parameters: {
      query: {
        ids: string[] | string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  /** This API can be used to find top common collections from an array of owners. */
  getOwnersCommoncollectionsV1: {
    parameters: {
      query: {
        /** Array of owner addresses. Max limit is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        owners: string[] | string;
        /** Amount of collections returned in response. Max limit is 100. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCommonCollectionsOwnersV1Response"];
      };
    };
  };
  /** Find which addresses own the most of a group of collections. */
  getOwnersCrosscollectionsV1: {
    parameters: {
      query: {
        /** Filter to one or more collections. Max limit is 5. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collections: string[] | string;
        /** Amount of owners returned in response. Max limit is 50. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCrossCollectionsOwnersV1Response"];
      };
    };
  };
  getRedirectLogoV1: {
    parameters: {
      query: {
        source: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getRedirectTokenV1: {
    parameters: {
      query: {
        source: string;
        /** Redirect to the given token page, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Sales` endpoint */
  getSalesBulkV1: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSalesBulkV1Response"];
      };
    };
  };
  /** This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
  getSearchActivitiesV1: {
    parameters: {
      query: {
        /** Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** Array of collections. Max limit is 50. Example: `collections[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collections?: string[] | string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Array of source domains. Max limit is 50. Example: `sources[0]: opensea.io` */
        sources?: string[] | string;
        /** Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        users?: string[] | string;
        /** Amount of items returned. Max limit is 50 when `includedMetadata=true` otherwise max limit is 1000. */
        limit?: number;
        /** Order the items are returned in the response. The blockchain event time is `timestamp`. The event time recorded is `createdAt`. */
        sortBy?: "timestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSearchActivitiesV1Response"];
      };
    };
  };
  getSearchCollectionsV1: {
    parameters: {
      query: {
        /** Lightweight search for collections that match a string. Example: `bored` */
        name?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Return result in given currency */
        displayCurrency?: string;
        /** Filter to a particular collection set */
        collectionsSetId?: string;
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSearchCollectionsV1Response"];
      };
    };
  };
  getSearchCollectionsV2: {
    parameters: {
      query: {
        /** Lightweight search for collections that match a string. Example: `bored` */
        name?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Return result in given currency */
        displayCurrency?: string;
        /** Filter to a particular collection set */
        collectionsSetId?: string;
        /** If true, will filter any collections marked as spam. */
        excludeSpam?: boolean;
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getSearchCollectionsV2Response"];
      };
    };
  };
  /** This API is optimized for bulk access to asks (listings) for syncing a remote database. Thus it offers minimal filters/metadata. */
  getSyncAsksV1: {
    parameters: {
      query: {
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["syncOrdersAsksV1Response"];
      };
    };
  };
  /** Get the latest price event per token in a collection, so that you can listen to future events and keep track of prices */
  getTokensBootstrapV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensBootstrapV1Response"];
      };
    };
  };
  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */
  getTokensDetailsV2: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Filter to a particular source, e.g. `0x5b3256965e7c3cf26e11fcaf296dfc8807c01073` */
        source?: string;
        sortBy?: "floorAskPrice" | "topBidValue";
        limit?: number;
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensDetailsV2Response"];
      };
    };
  };
  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */
  getTokensDetailsV3: {
    parameters: {
      query: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        tokens?: string[] | string;
        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        tokenSetId?: string;
        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Filter to a particular source, e.g. `0x5b3256965e7c3cf26e11fcaf296dfc8807c01073` */
        source?: string;
        sortBy?: "floorAskPrice" | "topBidValue";
        limit?: number;
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensDetailsV3Response"];
      };
    };
  };
  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */
  getTokensDetailsV4: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** Filter to a particular token set. `Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685` */
        tokenSetId?: string;
        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */
        attributes?: `attributes[${string}]` | `attributes[${string}]`[];
        /** Domain of the order source. Example `opensea.io` */
        source?: string;
        /** Order the items are returned in the response. */
        sortBy?: "floorAskPrice" | "tokenId";
        sortDirection?: "asc" | "desc";
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensDetailsV4Response"];
      };
    };
  };
  /** This API will return the best price of every token in a collection that is currently on sale. Note: Prices are returned in the native currency of the network. */
  getTokensFloorV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensFloorV1Response"];
      };
    };
  };
  /** This API is optimized for quickly fetching a list of tokens ids in by collection, contract, token set id. */
  getTokensIdsV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract. */
        tokenSetId?: string;
        /**
         * -1 = All tokens (default)
         * 0 = Non flagged tokens
         * 1 = Flagged tokens
         */
        flagStatus?: -1 | 0 | 1;
        /** Amount of items returned in response. Max limit is 10,000. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensIdsV1Response"];
      };
    };
  };
  /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint */
  getTransfersBulkV1: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */
        txHash?: string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Order the items are returned in the response. Options are `timestamp`, and `updated_at`. Default is `timestamp`. */
        orderBy?: "timestamp" | "updated_at";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTransfersBulkV1Response"];
      };
    };
  };
  /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint */
  getTransfersBulkV2: {
    parameters: {
      query: {
        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        txHash?: string[] | string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Order the items are returned in the response. Options are `timestamp`, and `updatedAt`. Default is `timestamp`. */
        sortBy?: "timestamp" | "updatedAt";
        sortDirection?: string;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTransfersBulkV1Response"];
      };
    };
  };
  /** This API can be used to build a feed for a user */
  getUsersActivityV2: {
    parameters: {
      query: {
        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        users: string[] | string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: number;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV2Response"];
      };
    };
  };
  /** This API can be used to build a feed for a user */
  getUsersActivityV3: {
    parameters: {
      query: {
        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        users: string[] | string;
        /** Amount of items returned in response. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV3Response"];
      };
    };
  };
  /** This API can be used to build a feed for a user */
  getUsersActivityV4: {
    parameters: {
      query: {
        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        users: string[] | string;
        collection?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV4Response"];
      };
    };
  };
  /** This API can be used to build a feed for a user */
  getUsersActivityV5: {
    parameters: {
      query: {
        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        users: string[] | string;
        collection?: string[] | string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV5Response"];
      };
    };
  };
  /** This API can be used to build a feed for a user including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
  getUsersActivityV6: {
    parameters: {
      query: {
        /** Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        users: string[] | string;
        collection?: string[] | string;
        /** If true, will filter any activities marked as spam. */
        excludeSpam?: boolean;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */
        limit?: number;
        /** Order the items are returned in the response. The blockchain event time is `eventTimestamp`. The event time recorded is `createdAt`. */
        sortBy?: "eventTimestamp" | "createdAt";
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
        /** Input any ERC20 address to return result in given currency. */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV6Response"];
      };
    };
  };
  /** The ReservoirKit `ListModal` client utilizes this API to identify the marketplace(s) it can list on. */
  getCollectionsCollectionSupportedmarketplacesV1: {
    parameters: {
      path: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** When set, token-level royalties will be returned in the response */
        tokenId?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["Model238"];
      };
    };
  };
  /** When users are placing collection or trait bids, this API can be used to show them where the bid is in the context of other bids, and how many tokens it will be the top bid for. */
  getCollectionsCollectionTopbidsV1: {
    parameters: {
      path: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionTopBidsV1Response"];
      };
    };
  };
  getCollectionsCollectionAttributesV1: {
    parameters: {
      path: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        attributeKey?: string;
        sortBy?: "floorAskPrice" | "topBidValue";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionAttributesV1Response"];
      };
    };
  };
  /** This API can be used to build a feed for a collection */
  getCollectionsCollectionActivityV2: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionActivityV2Response"];
      };
    };
  };
  /** This API can be used to build a feed for a collection */
  getCollectionsCollectionActivityV1: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: number;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV2Response"];
      };
    };
  };
  /** This API can be used to build a feed for a collection */
  getCollectionsCollectionActivityV3: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionActivityV3Response"];
      };
    };
  };
  /** This API can be used to show what the distribution of owners in a collection looks like. */
  getCollectionsCollectionOwnersdistributionV1: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionOwnersDistributionV1Response"];
      };
    };
  };
  /** This API returns recommended marketplace configurations given a collection id */
  getCollectionsCollectionMarketplaceconfigurationsV1: {
    parameters: {
      path: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** When set, token-level royalties will be returned in the response */
        tokenId?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["Model251"];
      };
    };
  };
  /** This API can be used to show what the distribution of owners in a collections set id looks like. */
  getCollectionssetsCollectionssetidOwnersdistributionV1: {
    parameters: {
      path: {
        /** Filter to a particular collections set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsSetOwnersDistributionV1Response"];
      };
    };
  };
  /**
   * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new listing at a lower price
   *
   * - `expiry` > the previous best listing expired
   *
   * - `sale` > the previous best listing was filled
   *
   * - `cancel` > the previous best listing was cancelled
   *
   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
   *
   * - `approval-change` > the best listing was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Some considerations to keep in mind
   *
   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
   *
   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
   */
  getEventsCollectionsFlooraskV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, will exclude floor asks on flagged tokens. (only supported when `normalizeRoyalties` is false) */
        excludeFlaggedTokens?: boolean;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsFloorAskV1Response"];
      };
    };
  };
  /**
   * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new listing at a lower price
   *
   * - `expiry` > the previous best listing expired
   *
   * - `sale` > the previous best listing was filled
   *
   * - `cancel` > the previous best listing was cancelled
   *
   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
   *
   * - `approval-change` > the best listing was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Some considerations to keep in mind
   *
   * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
   *
   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
   *
   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
   */
  getEventsCollectionsFlooraskV2: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, will exclude floor asks on flagged tokens. (only supported when `normalizeRoyalties` is false) */
        excludeFlaggedTokens?: boolean;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsFloorAskV2Response"];
      };
    };
  };
  /** Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency. */
  getEventsCollectionsTopbidV1: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsTopbidV1Response"];
      };
    };
  };
  /**
   * Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new bid at a higher price
   *
   * - `expiry` > the previous top bid expired
   *
   * - `sale` > the previous top bid was accepted
   *
   * - `cancel` > the previous top bid was cancelled
   *
   * - `balance-change` > the top bid was invalidated due NFT no longer available
   *
   * - `approval-change` > the top bid was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Some considerations to keep in mind
   *
   * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
   *
   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
   *
   * - Events are only generated if the top bid changes. So if a new order or sale happens without changing the top bid, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
   */
  getEventsCollectionsTopbidV2: {
    parameters: {
      query: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionsTopbidV2Response"];
      };
    };
  };
  /**
   * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new listing at a lower price
   *
   * - `expiry` > the previous best listing expired
   *
   * - `sale` > the previous best listing was filled
   *
   * - `cancel` > the previous best listing was cancelled
   *
   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
   *
   * - `approval-change` > the best listing was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Some considerations to keep in mind
   *
   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
   *
   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
   */
  getEventsTokensFlooraskV2: {
    parameters: {
      query: {
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        sortDirection?: "asc" | "desc";
        continuation?: string;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensFloorAskV2Response"];
      };
    };
  };
  /**
   * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new listing at a lower price
   *
   * - `expiry` > the previous best listing expired
   *
   * - `sale` > the previous best listing was filled
   *
   * - `cancel` > the previous best listing was cancelled
   *
   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
   *
   * - `approval-change` > the best listing was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Some considerations to keep in mind
   *
   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
   *
   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
   */
  getEventsTokensFlooraskV3: {
    parameters: {
      query: {
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        sortDirection?: "asc" | "desc";
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        continuation?: string;
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensFloorAskV3Response"];
      };
    };
  };
  /**
   * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.
   *
   * There are multiple event types, which describe what caused the change in price:
   *
   * - `new-order` > new listing at a lower price
   *
   * - `expiry` > the previous best listing expired
   *
   * - `sale` > the previous best listing was filled
   *
   * - `cancel` > the previous best listing was cancelled
   *
   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT
   *
   * - `approval-change` > the best listing was invalidated due to revoked approval
   *
   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)
   *
   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)
   *
   * - `bootstrap` > initial loading of data, so that all tokens have a price associated
   *
   * Some considerations to keep in mind
   *
   * - Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.
   *
   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
   *
   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
   */
  getEventsTokensFlooraskV4: {
    parameters: {
      query: {
        contract?: string;
        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token?: string;
        /** Get events after a particular unix timestamp (inclusive) */
        startTimestamp?: number;
        /** Get events before a particular unix timestamp (inclusive) */
        endTimestamp?: number;
        sortDirection?: "asc" | "desc";
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        continuation?: string;
        /** Amount of items returned in response. Max limit is 1000. */
        limit?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokensFloorAskV4Response"];
      };
    };
  };
  /** Get a signed message of any collection's bid-ask midpoint (spot or twap). This is approximation of the colletion price. The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
  getOracleCollectionsBidaskmidpointV1: {
    parameters: {
      query: {
        kind?: "spot" | "twap" | "lower" | "upper";
        currency?: string;
        twapSeconds?: number;
        collection?: string;
        token?: string;
        signer?:
          | "0x32da57e736e05f75aa4fae2e9be60fd904492726"
          | "0xaeb1d03929bf87f69888f381e73fbf75753d75af";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionBidAskMidpointOracleV1Response"];
      };
    };
  };
  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */
  getOracleCollectionsFlooraskV4: {
    parameters: {
      query: {
        kind?: "spot" | "twap" | "lower" | "upper";
        currency?: string;
        twapSeconds?: number;
        eip3668Calldata?: string;
        collection?: string;
        token?: string;
        /** If true, will use the collection non flagged floor ask events. */
        useNonFlaggedFloorAsk?: boolean;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionFloorAskOracleV4Response"];
      };
    };
  };
  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
  getOracleCollectionsFlooraskV5: {
    parameters: {
      query: {
        kind?: "spot" | "twap" | "lower" | "upper";
        currency?: string;
        twapSeconds?: number;
        eip3668Calldata?: string;
        collection?: string;
        token?: string;
        /** If true, will use the collection non flagged floor ask events. */
        useNonFlaggedFloorAsk?: boolean;
        signer?:
          | "0x32da57e736e05f75aa4fae2e9be60fd904492726"
          | "0xaeb1d03929bf87f69888f381e73fbf75753d75af";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionFloorAskOracleV4Response"];
      };
    };
  };
  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
  getOracleCollectionsFlooraskV6: {
    parameters: {
      query: {
        kind?: "spot" | "twap" | "lower" | "upper";
        currency?: string;
        twapSeconds?: number;
        eip3668Calldata?: string;
        collection?: string;
        token?: string;
        /** If true, will use the collection non flagged floor ask events. */
        useNonFlaggedFloorAsk?: boolean;
        signer?:
          | "0x32da57e736e05f75aa4fae2e9be60fd904492726"
          | "0xaeb1d03929bf87f69888f381e73fbf75753d75af";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionFloorAskOracleV6Response"];
      };
    };
  };
  /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
  getOracleCollectionsTopbidV2: {
    parameters: {
      query: {
        kind?: "spot" | "twap" | "lower" | "upper";
        currency?: string;
        twapSeconds?: number;
        collection?: string;
        token?: string;
        signer?:
          | "0x32da57e736e05f75aa4fae2e9be60fd904492726"
          | "0xaeb1d03929bf87f69888f381e73fbf75753d75af";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionTopBidOracleV2Response"];
      };
    };
  };
  /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
  getOracleCollectionsTopbidV3: {
    parameters: {
      query: {
        kind?: "spot" | "twap" | "lower" | "upper";
        currency?: string;
        twapSeconds?: number;
        collection?: string;
        token?: string;
        signer?:
          | "0x32da57e736e05f75aa4fae2e9be60fd904492726"
          | "0xaeb1d03929bf87f69888f381e73fbf75753d75af";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionBidAskMidpointOracleV1Response"];
      };
    };
  };
  /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
  getOracleTokensStatusV2: {
    parameters: {
      query: {
        tokens: string[] | string;
        signer?:
          | "0x32da57e736e05f75aa4fae2e9be60fd904492726"
          | "0xaeb1d03929bf87f69888f381e73fbf75753d75af";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokenStatusOracleV2Response"];
      };
    };
  };
  /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains. */
  getOracleTokensStatusV3: {
    parameters: {
      query: {
        tokens: string[] | string;
        signer?:
          | "0x32da57e736e05f75aa4fae2e9be60fd904492726"
          | "0xaeb1d03929bf87f69888f381e73fbf75753d75af";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokenStatusOracleV3Response"];
      };
    };
  };
  /** This API return the recent flagged/un-flagged tokens across all collections sorted by change time */
  getTokensFlagChangesV1: {
    parameters: {
      query: {
        /**
         * -1 = All tokens (default)
         * 0 = Non flagged tokens
         * 1 = Flagged tokens
         */
        flagStatus?: -1 | 0 | 1;
        /** Amount of items returned in response. Max is 200. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getFlaggedTokensV1Response"];
      };
    };
  };
  /** This API can be used to build a feed for a token */
  getTokensTokenActivityV4: {
    parameters: {
      path: {
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
      query: {
        /** Amount of items returned in response. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokenActivityV4Response"];
      };
    };
  };
  /** This API can be used to build a feed for a token */
  getTokensTokenActivityV2: {
    parameters: {
      path: {
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
      query: {
        /** Amount of items returned in response. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionActivityV2Response"];
      };
    };
  };
  /** This API can be used to build a feed for a token */
  getTokensTokenActivityV1: {
    parameters: {
      path: {
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
      query: {
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: number;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV2Response"];
      };
    };
  };
  /** This API can be used to build a feed for a token */
  getTokensTokenActivityV3: {
    parameters: {
      path: {
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
      query: {
        /** Amount of items returned in response. */
        limit?: number;
        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */
        sortBy?: "eventTimestamp" | "createdAt";
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionActivityV4Response"];
      };
    };
  };
  /** This API can be used to build a feed for a token activity including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types. */
  getTokensTokenActivityV5: {
    parameters: {
      path: {
        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
      query: {
        /** Amount of items returned. Default and max is 20. */
        limit?: number;
        /** Order the items are returned in the response. The blockchain event time is `eventTimestamp`. The event time recorded is `createdAt`. */
        sortBy?: "eventTimestamp" | "createdAt";
        /** If true, metadata is included in the response. */
        includeMetadata?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** If true, will filter any activities marked as spam. */
        excludeSpam?: boolean;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTokenActivityV5Response"];
      };
    };
  };
  /** Get a boolean response on whether a particular transaction was synced or not. */
  getTransactionsTxhashSyncedV1: {
    parameters: {
      path: {
        txHash: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getTransactionSyncedV1Response"];
      };
    };
  };
  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
  getUsersUserTokensV6: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response. */
        sortBy?: "acquiredAt" | "lastAppraisalValue";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, dynamic pricing data will be returned in the response. */
        includeDynamicPricing?: boolean;
        /** If true, will return the collection non flagged floor ask. */
        useNonFlaggedFloorAsk?: boolean;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensV6Response"];
      };
    };
  };
  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
  getUsersUserTokensV4: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Order the items are returned in the response. */
        sortBy?: "acquiredAt";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensV4Response"];
      };
    };
  };
  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
  getUsersUserTokensV2: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Order the items are returned in the response. */
        sortBy?: "acquiredAt";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensV2Response"];
      };
    };
  };
  /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */
  getUsersUserCollectionsV2: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, number of tokens with bids will be returned in the response. */
        includeLiquidCount?: boolean;
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
        /** Order the items are returned in the response. Defaults to allTimeVolume */
        sortBy?: "allTimeVolume" | "1DayVolume" | "7DayVolume" | "30DayVolume";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserCollectionsV2Response"];
      };
    };
  };
  /** This API can be used to build a feed for a user */
  getUsersUserActivityV1: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Amount of items returned in response. */
        limit?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: number;
        types?:
          | (
              | "sale"
              | "ask"
              | "transfer"
              | "mint"
              | "bid"
              | "bid_cancel"
              | "ask_cancel"
            )[]
          | string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserActivityV1Response"];
      };
    };
  };
  /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */
  getUsersUserCollectionsV1: {
    parameters: {
      path: {
        /** Wallet to see results for e.g. `0xf296178d553c8ec21a2fbd2c5dda8ca9ac905a00` */
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserCollectionsV1Response"];
      };
    };
  };
  /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */
  getUsersUserCollectionsV3: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, number of tokens with bids will be returned in the response. */
        includeLiquidCount?: boolean;
        /** If true, will filter any collections marked as spam. */
        excludeSpam?: boolean;
        /** Use offset to request the next batch of items. Max is 10,000. */
        offset?: number;
        /** Amount of items returned in response. max limit is 100. */
        limit?: number;
        /** Input any ERC20 address to return result in given currency. Applies to `topBid` and `floorAsk`. */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserCollectionsV3Response"];
      };
    };
  };
  /** Get aggregate user liquidity, grouped by collection. Useful for showing a summary of liquidity being provided (orders made). */
  getUsersUserPositionsV1: {
    parameters: {
      path: {
        /** Wallet to see results for e.g. `0xf296178d553c8ec21a2fbd2c5dda8ca9ac905a00` */
        user: string;
      };
      query: {
        side: "buy" | "sell";
        status: "valid" | "invalid";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserPositionsV1Response"];
      };
    };
  };
  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
  getUsersUserTokensV1: {
    parameters: {
      path: {
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        hasOffer?: boolean;
        sortBy?: "topBuyValue";
        sortDirection?: "asc" | "desc";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensV1Response"];
      };
    };
  };
  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
  getUsersUserTokensV3: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Order the items are returned in the response. */
        sortBy?: "acquiredAt";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensV3Response"];
      };
    };
  };
  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
  getUsersUserTokensV5: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response. */
        sortBy?: "acquiredAt";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensV5Response"];
      };
    };
  };
  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */
  getUsersUserTokensV7: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        /** Filter to a particular community, e.g. `artblocks` */
        community?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection?: string;
        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        contract?: string;
        /** Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */
        tokens?: string[] | string;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Order the items are returned in the response. Options are `acquiredAt` and `lastAppraisalValue`. `lastAppraisalValue` is the value of the last sale. */
        sortBy?: "acquiredAt" | "lastAppraisalValue";
        /** Order the items are returned in the response. */
        sortDirection?: "asc" | "desc";
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Max limit is 200. */
        limit?: number;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, attributes will be returned in the response. */
        includeAttributes?: boolean;
        /** If true, last sale data including royalties paid will be returned in the response. */
        includeLastSale?: boolean;
        /** If true, raw data is included in the response. */
        includeRawData?: boolean;
        /** If true, will filter any tokens marked as spam. */
        excludeSpam?: boolean;
        /** If true, will return the collection non flagged floor ask. */
        useNonFlaggedFloorAsk?: boolean;
        /** Input any ERC20 address to return result in given currency. Applies to `topBid` and `floorAsk`. */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTokensV7Response"];
      };
    };
  };
  /** Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAsk` by default. */
  getCollectionsCollectionAttributesExploreV4: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Filter to a particular token-id. Example: `1` */
        tokenId?: string;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, range traits will be excluded from the response. */
        excludeRangeTraits?: boolean;
        /** If true, number traits will be excluded from the response. */
        excludeNumberTraits?: boolean;
        /** Filter to a particular attribute key. Example: `Composition` */
        attributeKey?: string;
        /** Max number of items returned in the response. */
        maxFloorAskPrices?: number;
        /** Max number of items returned in the response. */
        maxLastSells?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Default limit is 20. Max limit is 5000. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesExploreV4Response"];
      };
    };
  };
  /** Get detailed aggregate about attributes in a collection, attribute floors */
  getCollectionsCollectionAttributesExploreV2: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Filter to a particular attribute key. Example: `Composition` */
        attributeKey?: string;
        /** Max number of items returned in the response. */
        maxFloorAskPrices?: number;
        /** Max number of items returned in the response. */
        maxLastSells?: number;
        /** Order the items are returned in the response. */
        sortBy?: "floorAskPrice" | "topBidValue";
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesExploreV2Response"];
      };
    };
  };
  /**
   * Use this API to see all possible attributes within a collection.
   *
   * - `floorAskPrice` for all attributes might not be returned on collections with more than 10k tokens.
   *
   * - Attributes are case sensitive.
   *
   * - Attributes will return a maximum of 500 values.
   */
  getCollectionsCollectionAttributesAllV4: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesAllV4Response"];
      };
    };
  };
  getCollectionsCollectionAttributesAllV2: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesAllV2Response"];
      };
    };
  };
  getCollectionsCollectionAttributesAllV1: {
    parameters: {
      path: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesV1Response"];
      };
    };
  };
  getCollectionsCollectionAttributesAllV3: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesAllV3Response"];
      };
    };
  };
  getCollectionsCollectionAttributesStaticV1: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesStaticV1Response"];
      };
    };
  };
  getCollectionsCollectionAttributesExploreV1: {
    parameters: {
      path: {
        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Filter to a particular attribute key, e.g. `Composition` */
        attributeKey?: string;
        sortBy?: "floorAskPrice" | "topBidValue";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getCollectionAttributesV1Response"];
      };
    };
  };
  /** Get detailed aggregate about attributes in a collection, attribute floors */
  getCollectionsCollectionAttributesExploreV3: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** Filter to a particular attribute key. Example: `Composition` */
        attributeKey?: string;
        /** Max number of items returned in the response. */
        maxFloorAskPrices?: number;
        /** Max number of items returned in the response. */
        maxLastSells?: number;
        /** Order the items are returned in the response. */
        sortBy?: "floorAskPrice" | "topBidValue";
        /** Use offset to request the next batch of items. */
        offset?: number;
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesExploreV3Response"];
      };
    };
  };
  /**
   * Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAskPrices` by default.
   *
   * - `floorAskPrices` will not be returned on attributes with more than 10k tokens.
   */
  getCollectionsCollectionAttributesExploreV5: {
    parameters: {
      path: {
        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      query: {
        /** Filter to a particular token-id. Example: `1` */
        tokenId?: string;
        /** If true, top bid will be returned in the response. */
        includeTopBid?: boolean;
        /** If true, range traits will be excluded from the response. */
        excludeRangeTraits?: boolean;
        /** If true, number traits will be excluded from the response. */
        excludeNumberTraits?: boolean;
        /** Filter to a particular attribute key. Example: `Composition` */
        attributeKey?: string;
        /** Max number of items returned in the response. */
        maxFloorAskPrices?: number;
        /** Max number of items returned in the response. */
        maxLastSells?: number;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Amount of items returned in response. Default limit is 20. Max limit is 5000. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getAttributesExploreV5Response"];
      };
    };
  };
  /** Return the top bids for the given user tokens */
  getOrdersUsersUserTopbidsV3: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        collection?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. */
        collectionsSetId?: string;
        /** If true, urls will only be returned for optimized sources that support royalties. */
        optimizeCheckoutURL?: boolean;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, will return the collection non flagged floor ask events. */
        useNonFlaggedFloorAsk?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Order of the items are returned in the response. */
        sortBy?:
          | "topBidValue"
          | "dateCreated"
          | "orderExpiry"
          | "floorDifferencePercentage";
        sortDirection?: "asc" | "desc";
        /** Amount of items returned in response. */
        limit?: number;
        /** Amount of tokens considered. */
        sampleSize?: number;
        /** Return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTopBidsV3Response"];
      };
    };
  };
  /** Return the top bids for the given user tokens */
  getOrdersUsersUserTopbidsV1: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        collection?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** If true, urls will only be returned for optimized sources that support royalties. */
        optimizeCheckoutURL?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Order of the items are returned in the response. */
        sortBy?:
          | "topBidValue"
          | "dateCreated"
          | "orderExpiry"
          | "floorDifferencePercentage";
        sortDirection?: "asc" | "desc";
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTopBidsV1Response"];
      };
    };
  };
  /** Return the top bids for the given user tokens */
  getOrdersUsersUserTopbidsV2: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        collection?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** If true, urls will only be returned for optimized sources that support royalties. */
        optimizeCheckoutURL?: boolean;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, will return the collection non flagged floor ask events. */
        useNonFlaggedFloorAsk?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Order of the items are returned in the response. */
        sortBy?:
          | "topBidValue"
          | "dateCreated"
          | "orderExpiry"
          | "floorDifferencePercentage";
        sortDirection?: "asc" | "desc";
        /** Amount of items returned in response. */
        limit?: number;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTopBidsV2Response"];
      };
    };
  };
  /** Return the top bids for the given user tokens. Please mark `excludeEOA` as `true` to exclude Blur orders. */
  getOrdersUsersUserTopbidsV4: {
    parameters: {
      path: {
        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */
        user: string;
      };
      query: {
        collection?: string;
        /** Filter to a particular contracts set. */
        contractsSetId?: string;
        /** Filter to a particular community. Example: `artblocks` */
        community?: string;
        /** Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65` */
        collectionsSetId?: string;
        /** If true, urls will only be returned for optimized sources that support royalties. */
        optimizeCheckoutURL?: boolean;
        /** If true, criteria metadata is included in the response. */
        includeCriteriaMetadata?: boolean;
        /** Exclude orders that can only be filled by EOAs, to support filling with smart contracts. */
        excludeEOA?: boolean;
        /** If true, prices will include missing royalties to be added on-top. */
        normalizeRoyalties?: boolean;
        /** If true, will return the collection non flagged floor ask events. */
        useNonFlaggedFloorAsk?: boolean;
        /** Use continuation token to request next offset of items. */
        continuation?: string;
        /** Order of the items are returned in the response. Options are `topBidValue`, `dateCreated`, `orderExpiry`, and `floorDifferencePercentage`. */
        sortBy?:
          | "topBidValue"
          | "dateCreated"
          | "orderExpiry"
          | "floorDifferencePercentage";
        sortDirection?: "asc" | "desc";
        /** Amount of items returned in response. Max limit is 100 */
        limit?: number;
        /** Amount of tokens considered. Min is 1000, max is default. */
        sampleSize?: number;
        /** Input any ERC20 address to return result in given currency */
        displayCurrency?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getUserTopBidsV4Response"];
      };
    };
  };
  getRedirectCollectionsCollectionImageV1: {
    parameters: {
      path: {
        /** Redirect to the given collection image. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getRedirectCurrencyAddressIconV1: {
    parameters: {
      path: {
        /** Redirect to the given currency address icon. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        address: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getRedirectSourcesSourceLogoV2: {
    parameters: {
      path: {
        /** Domain of the source. Example `opensea.io` */
        source: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getRedirectTokensTokenImageV1: {
    parameters: {
      path: {
        /** Redirect to the given token image. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
      query: {
        /** Image size: 'small', 'medium', or 'large'. */
        imageSize?: "small" | "medium" | "large";
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  getRedirectSourcesSourceTokensTokenLinkV2: {
    parameters: {
      path: {
        /** Domain of the source. Example `opensea.io` */
        source: string;
        /** Redirect to the given token page. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */
        token: string;
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  /** This API requires an administrator API for execution. Explore and try the `/collections-sets/v1` or `/contracts-sets/v1` endpoints. Please contact technical support with more questions. */
  putCollectionsCollectionCommunityV1: {
    parameters: {
      header: {
        "x-api-key": string;
      };
      path: {
        /** Update community for a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`. Requires an authorized api key to be passed. */
        collection: string;
      };
      body: {
        body?: definitions["Model381"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  /**
   * The API key can be used in every route, by setting it as a request header **x-api-key**.
   *
   * <a href='https://docs.reservoir.tools/reference/getting-started'>Learn more</a> about API Keys and Rate Limiting
   */
  postApikeys: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      formData: {
        /** The name of your app */
        appName: string;
        /** An e-mail address where you can be reached, in case of issues, to avoid service disruption */
        email: string;
        /** The website of your project */
        website: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getNewApiKeyResponse"];
      };
    };
  };
  postAdminCalcrarity: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model382"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminCreateratelimitrule: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model385"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminDeleteratelimitrule: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model386"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminFixblocks: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model387"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminFixcache: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model388"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminFixorders: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model389"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminFixtokencache: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model390"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminIndexmetadata: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model391"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminPauserabbitqueue: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model392"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminRefreshcollection: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model393"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminRefreshtoken: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model394"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminResumerabbitqueue: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model395"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminResyncfloorevents: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model396"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminResyncnftbalances: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model387"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminResyncsaleroyalties: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model398"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminResyncsource: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model399"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminRetryrabbitqueue: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model400"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminRevalidateorder: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model401"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminRouters: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model403"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminSetcommunity: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model404"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminSyncdailyvolumes: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model405"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminSyncevents: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model407"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminTriggerjob: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model408"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminTriggerrabbitjob: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model409"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminUpdateapikey: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model410"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminUpdateimageversion: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model411"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminUpdateratelimitrule: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model412"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postAdminUpdatesource: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      body: {
        body?: definitions["Model413"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  /**
   * Array of collections to gather in a set. Adding or removing a collection will change the response. You may use this set when `collectionSetId` is an available param. An example is below.
   *
   * `"collections": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623", "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"`
   *
   * `"collectionsSetId": "8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65"`
   */
  postCollectionssetsV1: {
    parameters: {
      body: {
        body?: definitions["Model415"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postCreateCollectionsSetV1Response"];
      };
    };
  };
  /** Array of contracts to gather in a set. Adding or removing a contract will change the response. You may use this set when contractSetId is an available param. */
  postContractssetsV1: {
    parameters: {
      body: {
        body?: definitions["Model416"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postCreateContractsSetV1Response"];
      };
    };
  };
  postOrderV2: {
    parameters: {
      query: {
        signature?: string;
      };
      body: {
        body?: definitions["Model418"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postOrderV2Response"];
      };
    };
  };
  postOrderV3: {
    parameters: {
      query: {
        signature?: string;
      };
      body: {
        body?: definitions["Model420"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postOrderV2Response"];
      };
    };
  };
  postOrderV4: {
    parameters: {
      query: {
        signature?: string;
      };
      body: {
        body?: definitions["Model425"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postOrderV4Response"];
      };
    };
  };
  postSeaportOffers: {
    parameters: {
      body: {
        body?: definitions["Model431"];
      };
    };
    responses: {
      /** Successful */
      default: {
        schema: string;
      };
    };
  };
  postTokensetsV1: {
    parameters: {
      body: {
        body?: definitions["Model432"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["Model254"];
      };
    };
  };
  /**
   * Use this API to create a `tokenSetId` to call specific tokens from a collection. Adding or removing a tokenId will change the response. See an example below.
   *
   *  Input of `0xd774557b647330c91bf44cfeab205095f7e6c367:1` and `0xd774557b647330c91bf44cfeab205095f7e6c367:2`
   *
   *  Output of `list:0xd774557b647330c91bf44cfeab205095f7e6c367:0xb6fd98eeb7e08fc521f11511289afe4d8e873fd7a3fb76ab757fa47c23f596e9`
   *
   *  Notes:
   *
   * - Include `list:` when using this `tokenSetId` for it to work successfully.
   *
   * - You cannot adjust tokens within a `tokenSetId`. Please create a new set.
   *
   * - Use the `/tokens/ids` endpoint to get a list of tokens within a set.
   */
  postTokensetsV2: {
    parameters: {
      body: {
        body?: definitions["Model434"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["Model254"];
      };
    };
  };
  /** Get API usage metrics for the given API key */
  postAdminApikeysMetrics: {
    parameters: {
      header: {
        "x-admin-api-key": string;
      };
      formData: {
        /** Array API keys */
        keys: string[] | string;
        /** Return results by either hourly/daily/monthly granularity.<br>Hourly will return time in format YYYY-MM-DDTHH:00:000Z<br>Daily will return time in format YYYY-MM-DDT00:00:000Z<br>Monthly will return time in format YYYY-MM-01T00:00:000Z<br> */
        granularity?: "hourly" | "daily" | "monthly";
        /** 1 - All calls per hour/day/month<br>2 - All calls per key per hour/day/month<br>3 - All calls per key per route per hour/day/month<br>4 - All calls per key per route per status code per hour/day/month<br> */
        groupBy?: 1 | 2 | 3 | 4;
        /** Get metrics after a particular time (allowed format YYYY-MM-DD HH:00)<br>Hourly default to last 24 hours<br>Daily default to last 7 days<br>Monthly default to last 12 months */
        startTime?: string;
        /** Get metrics before a particular time (allowed format YYYY-MM-DD HH:00) */
        endTime?: string;
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postApiKeyMetricsResponse"];
      };
    };
  };
  /** This API requires an allowed API key for execution. Please contact technical support with more questions. */
  postCollectionsDisablemetadataV1: {
    parameters: {
      header: {
        "x-api-key": string;
      };
      body: {
        body?: definitions["Model437"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postCollectionsRefreshV1: {
    parameters: {
      header: {
        "x-api-key"?: string;
      };
      body: {
        body?: definitions["Model438"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  /**
   * Use this API to refresh a collection metadata. Only use this endpoint when you notice multiple tokens with incorrect metadata. Otherwise, refresh single token metadata. Collections with over 30,000 tokens require admin key override, so please contact technical support for assistance.
   *
   *  Collection metadata is automatically updated at 23:30 UTC daily for:
   *
   * - Top 500 Collection by 24hr Volume
   *
   * - Collections Minted 1 Day Ago
   *
   * - Collections Minted 7 Days Ago
   *
   *  Caution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.
   */
  postCollectionsRefreshV2: {
    parameters: {
      header: {
        "x-api-key"?: string;
      };
      body: {
        body?: definitions["Model439"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  /** This API can be used by allowed API keys to update the spam status of a collection. */
  postCollectionsSpamstatusV1: {
    parameters: {
      header: {
        "x-api-key": string;
      };
      body: {
        body?: definitions["Model441"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postExecuteAuthsignatureV1: {
    parameters: {
      query: {
        /** Signature to attach to the auth challenge */
        signature: string;
      };
      body: {
        body?: definitions["Model442"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postAuthSignatureV1Response"];
      };
    };
  };
  /** Generate a bid and submit it to multiple marketplaces */
  postExecuteBidV4: {
    parameters: {
      body: {
        body?: definitions["Model444"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteBidV4Response"];
      };
    };
  };
  /**
   * Generate bids and submit them to multiple marketplaces.
   *
   *  Notes:
   *
   * - Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.
   *
   * - We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.
   */
  postExecuteBidV5: {
    parameters: {
      body: {
        body?: definitions["Model450"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteBidV5Response"];
      };
    };
  };
  postExecuteBuyV5: {
    parameters: {
      body: {
        body?: definitions["Model458"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteBuyV5Response"];
      };
    };
  };
  postExecuteBuyV6: {
    parameters: {
      body: {
        body?: definitions["Model467"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteBuyV6Response"];
      };
    };
  };
  /** Use this API to fill listings. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders. */
  postExecuteBuyV7: {
    parameters: {
      body: {
        body?: definitions["Model475"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteBuyV7Response"];
      };
    };
  };
  /** Cancel existing orders on any marketplace */
  postExecuteCancelV3: {
    parameters: {
      body: {
        body?: definitions["Model488"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteCancelV3Response"];
      };
    };
  };
  /** If your order was created using the Seaport Oracle to allow off chain & gasless cancellations, you can just use the Kit's cancel modals, SDK's `cancelOrder`, or `/execute/cancel/`. Those tools will automatically access this endpoint for an oracle cancellation without you directly calling this endpoint. */
  postExecuteCancelsignatureV1: {
    parameters: {
      query: {
        /** Cancellation signature */
        signature?: string;
        /** Optional auth token used instead of the signature */
        auth?: string;
      };
      body: {
        body?: definitions["Model494"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  /** Generate a listing and submit it to multiple marketplaces */
  postExecuteListV4: {
    parameters: {
      body: {
        body?: definitions["Model497"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteListV4Response"];
      };
    };
  };
  /**
   * Generate listings and submit them to multiple marketplaces.
   *
   *  Notes:
   *
   * - Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.
   *
   * - We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.
   */
  postExecuteListV5: {
    parameters: {
      body: {
        body?: definitions["Model501"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteListV5Response"];
      };
    };
  };
  /** Use this API to mint tokens. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. */
  postExecuteMintV1: {
    parameters: {
      body: {
        body?: definitions["Model512"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postExecuteMintV1Response"];
      };
    };
  };
  postExecutePermitsignatureV1: {
    parameters: {
      query: {
        /** Signature to attach to the permit */
        signature: string;
      };
      body: {
        body?: definitions["Model515"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postExecutePresignatureV1: {
    parameters: {
      query: {
        /** Signature to attach to the pre-signature */
        signature: string;
      };
      body: {
        body?: definitions["Model516"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postExecuteResultsV1: {
    parameters: {
      body: {
        body?: definitions["Model517"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postExecuteResultsV1Response"];
      };
    };
  };
  postExecuteSellV6: {
    parameters: {
      body: {
        body?: definitions["Model520"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteBuyV6Response"];
      };
    };
  };
  /** Use this API to accept bids. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders. */
  postExecuteSellV7: {
    parameters: {
      body: {
        body?: definitions["Model525"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["getExecuteSellV7Response"];
      };
    };
  };
  postExecuteSolveV1: {
    parameters: {
      query: {
        /** Signature for the solve request */
        signature?: string;
      };
      body: {
        body?: definitions["Model532"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postExecuteSolveV1Response"];
      };
    };
  };
  postExecuteStatusV1: {
    parameters: {
      body: {
        body?: definitions["Model533"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postExecuteStatusV1Response"];
      };
    };
  };
  postExecuteTransferV1: {
    parameters: {
      body: {
        body?: definitions["Model536"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postExecuteTransferV1Response"];
      };
    };
  };
  /** This API requires an allowed API key for execution. Please contact technical support with more questions. */
  postTokensDisablemetadataV1: {
    parameters: {
      header: {
        "x-api-key": string;
      };
      body: {
        body?: definitions["Model542"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postTokensFlagV1: {
    parameters: {
      body: {
        body?: definitions["Model543"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  /**
   * Token metadata is never automatically refreshed, but may be manually refreshed with this API.
   *
   * Caution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.
   */
  postTokensRefreshV1: {
    parameters: {
      body: {
        body?: definitions["Model544"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postTokensSimulatefloorV1: {
    parameters: {
      body: {
        body?: definitions["Model545"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postTokensSimulatetopbidV1: {
    parameters: {
      body: {
        body?: definitions["Model546"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  /** This API can be used by allowed API keys to update the spam status of a token. */
  postTokensSpamstatusV1: {
    parameters: {
      header: {
        "x-api-key": string;
      };
      body: {
        body?: definitions["Model548"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  /** Override collections metadata and royalties */
  postCollectionsCollectionOverrideV1: {
    parameters: {
      header: {
        "x-api-key": string;
      };
      path: {
        /** The collection id to update. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */
        collection: string;
      };
      body: {
        body?: definitions["Model551"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
  postExecuteSolveCapacityV1: {
    parameters: {
      body: {
        body?: definitions["Model552"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["postExecuteSolveCapacityV1Response"];
      };
    };
  };
  postManagementOrdersSimulateV1: {
    parameters: {
      body: {
        body?: definitions["Model553"];
      };
    };
    responses: {
      /** Successful */
      200: {
        schema: definitions["putSetCollectionCommunityV1Response"];
      };
    };
  };
}

export interface external {}
